
LabMicro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b4  080048b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048b4  080048b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b4  080048b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000000c  080048c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080048c8  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011065  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ba  00000000  00000000  000310e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d72  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d9e  00000000  00000000  00035382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125ef  00000000  00000000  0005c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010857c  00000000  00000000  0006e70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ad0  00000000  00000000  00176c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017b75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800488c 	.word	0x0800488c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800488c 	.word	0x0800488c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc03 	bl	8000a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82e 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e0 	bl	80005e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f9ac 	bl	8000584 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f874 	bl	8000318 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000230:	f000 f95a 	bl	80004e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000234:	f000 f90a 	bl	800044c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <main+0x50>)
 800023a:	f003 fdc9 	bl	8003dd0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_ADC_Start_DMA(&hadc1, poten, 300);
 800023e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000242:	490a      	ldr	r1, [pc, #40]	; (800026c <main+0x54>)
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <main+0x58>)
 8000246:	f001 f839 	bl	80012bc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <main+0x5c>)
 800024c:	f003 fd50 	bl	8003cf0 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <main+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000256:	4a08      	ldr	r2, [pc, #32]	; (8000278 <main+0x60>)
 8000258:	6013      	str	r3, [r2, #0]
	  rawtim3 = __HAL_TIM_GET_COUNTER(&htim3);
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x5c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	b29a      	uxth	r2, r3
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x64>)
 8000264:	801a      	strh	r2, [r3, #0]
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000266:	e7f3      	b.n	8000250 <main+0x38>
 8000268:	200000f4 	.word	0x200000f4
 800026c:	20000198 	.word	0x20000198
 8000270:	20000028 	.word	0x20000028
 8000274:	20000140 	.word	0x20000140
 8000278:	20000190 	.word	0x20000190
 800027c:	2000018c 	.word	0x2000018c

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	; 0x50
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2238      	movs	r2, #56	; 0x38
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 fad0 	bl	8004834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002a6:	f002 fcd3 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2340      	movs	r3, #64	; 0x40
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002c0:	2304      	movs	r3, #4
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002c4:	234b      	movs	r3, #75	; 0x4b
 80002c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c8:	2302      	movs	r3, #2
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fd6d 	bl	8002db8 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e4:	f000 fa06 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2303      	movs	r3, #3
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f003 f86b 	bl	80033dc <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800030c:	f000 f9f2 	bl	80006f4 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3750      	adds	r7, #80	; 0x50
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08c      	sub	sp, #48	; 0x30
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2220      	movs	r2, #32
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f004 fa7f 	bl	8004834 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000336:	4b41      	ldr	r3, [pc, #260]	; (800043c <MX_ADC1_Init+0x124>)
 8000338:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800033c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800033e:	4b3f      	ldr	r3, [pc, #252]	; (800043c <MX_ADC1_Init+0x124>)
 8000340:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000344:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000346:	4b3d      	ldr	r3, [pc, #244]	; (800043c <MX_ADC1_Init+0x124>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <MX_ADC1_Init+0x124>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000352:	4b3a      	ldr	r3, [pc, #232]	; (800043c <MX_ADC1_Init+0x124>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000358:	4b38      	ldr	r3, [pc, #224]	; (800043c <MX_ADC1_Init+0x124>)
 800035a:	2201      	movs	r2, #1
 800035c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035e:	4b37      	ldr	r3, [pc, #220]	; (800043c <MX_ADC1_Init+0x124>)
 8000360:	2204      	movs	r2, #4
 8000362:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000364:	4b35      	ldr	r3, [pc, #212]	; (800043c <MX_ADC1_Init+0x124>)
 8000366:	2200      	movs	r2, #0
 8000368:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800036a:	4b34      	ldr	r3, [pc, #208]	; (800043c <MX_ADC1_Init+0x124>)
 800036c:	2200      	movs	r2, #0
 800036e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000370:	4b32      	ldr	r3, [pc, #200]	; (800043c <MX_ADC1_Init+0x124>)
 8000372:	2203      	movs	r2, #3
 8000374:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000376:	4b31      	ldr	r3, [pc, #196]	; (800043c <MX_ADC1_Init+0x124>)
 8000378:	2200      	movs	r2, #0
 800037a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800037e:	4b2f      	ldr	r3, [pc, #188]	; (800043c <MX_ADC1_Init+0x124>)
 8000380:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <MX_ADC1_Init+0x124>)
 8000388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_ADC1_Init+0x124>)
 8000390:	2201      	movs	r2, #1
 8000392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <MX_ADC1_Init+0x124>)
 8000398:	2200      	movs	r2, #0
 800039a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_ADC1_Init+0x124>)
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a4:	4825      	ldr	r0, [pc, #148]	; (800043c <MX_ADC1_Init+0x124>)
 80003a6:	f000 fdcd 	bl	8000f44 <HAL_ADC_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80003b0:	f000 f9a0 	bl	80006f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003bc:	4619      	mov	r1, r3
 80003be:	481f      	ldr	r0, [pc, #124]	; (800043c <MX_ADC1_Init+0x124>)
 80003c0:	f001 fdfe 	bl	8001fc0 <HAL_ADCEx_MultiModeConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80003ca:	f000 f993 	bl	80006f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_ADC1_Init+0x128>)
 80003d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d2:	2306      	movs	r3, #6
 80003d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003da:	237f      	movs	r3, #127	; 0x7f
 80003dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003de:	2304      	movs	r3, #4
 80003e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	4814      	ldr	r0, [pc, #80]	; (800043c <MX_ADC1_Init+0x124>)
 80003ec:	f001 f858 	bl	80014a0 <HAL_ADC_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80003f6:	f000 f97d 	bl	80006f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_ADC1_Init+0x12c>)
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003fe:	230c      	movs	r3, #12
 8000400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_ADC1_Init+0x124>)
 8000408:	f001 f84a 	bl	80014a0 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000412:	f000 f96f 	bl	80006f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_ADC1_Init+0x130>)
 8000418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800041a:	2312      	movs	r3, #18
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_ADC1_Init+0x124>)
 8000424:	f001 f83c 	bl	80014a0 <HAL_ADC_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800042e:	f000 f961 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3730      	adds	r7, #48	; 0x30
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	04300002 	.word	0x04300002
 8000444:	08600004 	.word	0x08600004
 8000448:	3ef08000 	.word	0x3ef08000

0800044c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_TIM2_Init+0x98>)
 800046c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000474:	2295      	movs	r2, #149	; 0x95
 8000476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_TIM2_Init+0x98>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000480:	f04f 32ff 	mov.w	r2, #4294967295
 8000484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_TIM2_Init+0x98>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000494:	f003 fbd4 	bl	8003c40 <HAL_TIM_Base_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800049e:	f000 f929 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	480d      	ldr	r0, [pc, #52]	; (80004e4 <MX_TIM2_Init+0x98>)
 80004b0:	f003 fe56 	bl	8004160 <HAL_TIM_ConfigClockSource>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004ba:	f000 f91b 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <MX_TIM2_Init+0x98>)
 80004cc:	f004 f8d6 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004d6:	f000 f90d 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000f4 	.word	0x200000f4

080004e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_TIM3_Init+0x94>)
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_TIM3_Init+0x98>)
 800050a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14999;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_TIM3_Init+0x94>)
 800050e:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000512:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_TIM3_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_TIM3_Init+0x94>)
 800051c:	2209      	movs	r2, #9
 800051e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_TIM3_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_TIM3_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800052c:	4813      	ldr	r0, [pc, #76]	; (800057c <MX_TIM3_Init+0x94>)
 800052e:	f003 fb87 	bl	8003c40 <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000538:	f000 f8dc 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <MX_TIM3_Init+0x94>)
 800054a:	f003 fe09 	bl	8004160 <HAL_TIM_ConfigClockSource>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000554:	f000 f8ce 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000558:	2320      	movs	r3, #32
 800055a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_TIM3_Init+0x94>)
 8000566:	f004 f889 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000570:	f000 f8c0 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000140 	.word	0x20000140
 8000580:	40000400 	.word	0x40000400

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_DMA_Init+0x60>)
 800058c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <MX_DMA_Init+0x60>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6493      	str	r3, [r2, #72]	; 0x48
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_DMA_Init+0x60>)
 8000598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_DMA_Init+0x60>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a6:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <MX_DMA_Init+0x60>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	; 0x48
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_DMA_Init+0x60>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	200b      	movs	r0, #11
 80005c0:	f001 fee1 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c4:	200b      	movs	r0, #11
 80005c6:	f001 fef8 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	205e      	movs	r0, #94	; 0x5e
 80005d0:	f001 fed9 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80005d4:	205e      	movs	r0, #94	; 0x5e
 80005d6:	f001 fef0 	bl	80023ba <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a2e      	ldr	r2, [pc, #184]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_GPIO_Init+0xd4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <MX_GPIO_Init+0xd4>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0xd4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_GPIO_Init+0xd4>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f002 fab7 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <MX_GPIO_Init+0xd8>)
 8000682:	f002 f927 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000686:	2320      	movs	r3, #32
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f002 f918 	bl	80028d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2028      	movs	r0, #40	; 0x28
 80006aa:	f001 fe6c 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f001 fe83 	bl	80023ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000800 	.word	0x48000800

080006c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d104      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		roundtim2 = roundtim2 + 1;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006dc:	6013      	str	r3, [r2, #0]
	}
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200000f4 	.word	0x200000f4
 80006f0:	20000194 	.word	0x20000194

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	; 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000736:	f002 fb2f 	bl	8002d98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a0      	sub	sp, #128	; 0x80
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	2254      	movs	r2, #84	; 0x54
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 f863 	bl	8004834 <memset>
  if(hadc->Instance==ADC1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000776:	d177      	bne.n	8000868 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800077e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000782:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f003 f80b 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000794:	f7ff ffae 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <HAL_ADC_MspInit+0x128>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	4a34      	ldr	r2, [pc, #208]	; (8000870 <HAL_ADC_MspInit+0x128>)
 800079e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a4:	4b32      	ldr	r3, [pc, #200]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b29      	ldr	r3, [pc, #164]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	4a28      	ldr	r2, [pc, #160]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <HAL_ADC_MspInit+0x128>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e0:	2303      	movs	r3, #3
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f002 f86d 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fa:	2301      	movs	r3, #1
 80007fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800080a:	4619      	mov	r1, r3
 800080c:	4819      	ldr	r0, [pc, #100]	; (8000874 <HAL_ADC_MspInit+0x12c>)
 800080e:	f002 f861 	bl	80028d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <HAL_ADC_MspInit+0x134>)
 8000816:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_ADC_MspInit+0x130>)
 800081a:	2205      	movs	r2, #5
 800081c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_ADC_MspInit+0x130>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_ADC_MspInit+0x130>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000842:	2220      	movs	r2, #32
 8000844:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <HAL_ADC_MspInit+0x130>)
 800084e:	f001 fdcf 	bl	80023f0 <HAL_DMA_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000858:	f7ff ff4c 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000860:	655a      	str	r2, [r3, #84]	; 0x54
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <HAL_ADC_MspInit+0x130>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3780      	adds	r7, #128	; 0x80
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400
 8000878:	20000094 	.word	0x20000094
 800087c:	40020008 	.word	0x40020008

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000890:	d114      	bne.n	80008bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f001 fd69 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f001 fd80 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ba:	e018      	b.n	80008ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_TIM_Base_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_TIM_Base_MspInit+0x78>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201d      	movs	r0, #29
 80008e4:	f001 fd4f 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e8:	201d      	movs	r0, #29
 80008ea:	f001 fd66 	bl	80023ba <HAL_NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40000400 	.word	0x40000400

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f8be 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <DMA1_Channel1_IRQHandler+0x10>)
 800095a:	f001 fe6c 	bl	8002636 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000094 	.word	0x20000094

08000968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM2_IRQHandler+0x10>)
 800096e:	f003 faa7 	bl	8003ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000f4 	.word	0x200000f4

0800097c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM3_IRQHandler+0x10>)
 8000982:	f003 fa9d 	bl	8003ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000140 	.word	0x20000140

08000990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000998:	f002 f936 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	; (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	; (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 ff1f 	bl	8004844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fc07 	bl	8000218 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   r0, =_estack
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a18:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a20:	200003f4 	.word	0x200003f4

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>

08000a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f001 fc9d 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f80e 	bl	8000a58 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e001      	b.n	8000a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a48:	f7ff fe5a 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d022      	beq.n	8000ab2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_InitTick+0x6c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_InitTick+0x68>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fca8 	bl	80023d6 <HAL_SYSTICK_Config>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10f      	bne.n	8000aac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b0f      	cmp	r3, #15
 8000a90:	d809      	bhi.n	8000aa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a92:	2200      	movs	r2, #0
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9a:	f001 fc74 	bl	8002386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_InitTick+0x70>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e007      	b.n	8000ab6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e004      	b.n	8000ab6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e001      	b.n	8000ab6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000adc:	6013      	str	r3, [r2, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	200003f0 	.word	0x200003f0
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200003f0 	.word	0x200003f0

08000b08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	609a      	str	r2, [r3, #8]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3360      	adds	r3, #96	; 0x60
 8000b82:	461a      	mov	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LL_ADC_SetOffset+0x44>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	03fff000 	.word	0x03fff000

08000bb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3360      	adds	r3, #96	; 0x60
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3360      	adds	r3, #96	; 0x60
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b087      	sub	sp, #28
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3360      	adds	r3, #96	; 0x60
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3360      	adds	r3, #96	; 0x60
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000c7a:	bf00      	nop
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	615a      	str	r2, [r3, #20]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3330      	adds	r3, #48	; 0x30
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	211f      	movs	r1, #31
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	401a      	ands	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0e9b      	lsrs	r3, r3, #26
 8000d0a:	f003 011f 	and.w	r1, r3, #31
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d1e:	bf00      	nop
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b087      	sub	sp, #28
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3314      	adds	r3, #20
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	0e5b      	lsrs	r3, r3, #25
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	0d1b      	lsrs	r3, r3, #20
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2107      	movs	r1, #7
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	0d1b      	lsrs	r3, r3, #20
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0318 	and.w	r3, r3, #24
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000da4:	40d9      	lsrs	r1, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	400b      	ands	r3, r1
 8000daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dae:	431a      	orrs	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0007ffff 	.word	0x0007ffff

08000dc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6093      	str	r3, [r2, #8]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e1c:	d101      	bne.n	8000e22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e6c:	d101      	bne.n	8000e72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <LL_ADC_IsEnabled+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_ADC_IsEnabled+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ede:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee2:	f043 0204 	orr.w	r2, r3, #4
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d101      	bne.n	8000f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d101      	bne.n	8000f34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1a9      	b.n	80012b2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fbeb 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff3f 	bl	8000e08 <LL_ADC_IsDeepPowerDownEnabled>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff25 	bl	8000de4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff5a 	bl	8000e58 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d115      	bne.n	8000fd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff3e 	bl	8000e30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb4:	4b9c      	ldr	r3, [pc, #624]	; (8001228 <HAL_ADC_Init+0x2e4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	4a9c      	ldr	r2, [pc, #624]	; (800122c <HAL_ADC_Init+0x2e8>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff3c 	bl	8000e58 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff75 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 800100c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8142 	bne.w	80012a0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 813e 	bne.w	80012a0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800102c:	f043 0202 	orr.w	r2, r3, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff35 	bl	8000ea8 <LL_ADC_IsEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d141      	bne.n	80010c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104c:	d004      	beq.n	8001058 <HAL_ADC_Init+0x114>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a77      	ldr	r2, [pc, #476]	; (8001230 <HAL_ADC_Init+0x2ec>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d10f      	bne.n	8001078 <HAL_ADC_Init+0x134>
 8001058:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800105c:	f7ff ff24 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001060:	4604      	mov	r4, r0
 8001062:	4873      	ldr	r0, [pc, #460]	; (8001230 <HAL_ADC_Init+0x2ec>)
 8001064:	f7ff ff20 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001068:	4603      	mov	r3, r0
 800106a:	4323      	orrs	r3, r4
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	e012      	b.n	800109e <HAL_ADC_Init+0x15a>
 8001078:	486e      	ldr	r0, [pc, #440]	; (8001234 <HAL_ADC_Init+0x2f0>)
 800107a:	f7ff ff15 	bl	8000ea8 <LL_ADC_IsEnabled>
 800107e:	4604      	mov	r4, r0
 8001080:	486d      	ldr	r0, [pc, #436]	; (8001238 <HAL_ADC_Init+0x2f4>)
 8001082:	f7ff ff11 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001086:	4603      	mov	r3, r0
 8001088:	431c      	orrs	r4, r3
 800108a:	486c      	ldr	r0, [pc, #432]	; (800123c <HAL_ADC_Init+0x2f8>)
 800108c:	f7ff ff0c 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001090:	4603      	mov	r3, r0
 8001092:	4323      	orrs	r3, r4
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf0c      	ite	eq
 8001098:	2301      	moveq	r3, #1
 800109a:	2300      	movne	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010aa:	d004      	beq.n	80010b6 <HAL_ADC_Init+0x172>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_ADC_Init+0x2ec>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Init+0x176>
 80010b6:	4a62      	ldr	r2, [pc, #392]	; (8001240 <HAL_ADC_Init+0x2fc>)
 80010b8:	e000      	b.n	80010bc <HAL_ADC_Init+0x178>
 80010ba:	4a62      	ldr	r2, [pc, #392]	; (8001244 <HAL_ADC_Init+0x300>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f7ff fd20 	bl	8000b08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7f5b      	ldrb	r3, [r3, #29]
 80010cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80010d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80010de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	3b01      	subs	r3, #1
 80010fc:	045b      	lsls	r3, r3, #17
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	2b00      	cmp	r3, #0
 800110a:	d009      	beq.n	8001120 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_ADC_Init+0x304>)
 8001128:	4013      	ands	r3, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	430b      	orrs	r3, r1
 8001132:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fee4 	bl	8000f1c <LL_ADC_INJ_IsConversionOngoing>
 8001154:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d17f      	bne.n	800125c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d17c      	bne.n	800125c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001166:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800116e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	430b      	orrs	r3, r1
 800118a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d017      	beq.n	80011c4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6911      	ldr	r1, [r2, #16]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	430b      	orrs	r3, r1
 80011be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80011c2:	e013      	b.n	80011ec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d12a      	bne.n	800124c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800120c:	4311      	orrs	r1, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001212:	4311      	orrs	r1, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001218:	430a      	orrs	r2, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	e019      	b.n	800125c <HAL_ADC_Init+0x318>
 8001228:	20000000 	.word	0x20000000
 800122c:	053e2d63 	.word	0x053e2d63
 8001230:	50000100 	.word	0x50000100
 8001234:	50000400 	.word	0x50000400
 8001238:	50000500 	.word	0x50000500
 800123c:	50000600 	.word	0x50000600
 8001240:	50000300 	.word	0x50000300
 8001244:	50000700 	.word	0x50000700
 8001248:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10c      	bne.n	800127e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f023 010f 	bic.w	r1, r3, #15
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	1e5a      	subs	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
 800127c:	e007      	b.n	800128e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 020f 	bic.w	r2, r2, #15
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	65da      	str	r2, [r3, #92]	; 0x5c
 800129e:	e007      	b.n	80012b0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop

080012bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d0:	d004      	beq.n	80012dc <HAL_ADC_Start_DMA+0x20>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_ADC_Start_DMA+0x184>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_Start_DMA+0x24>
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_ADC_Start_DMA+0x188>)
 80012de:	e000      	b.n	80012e2 <HAL_ADC_Start_DMA+0x26>
 80012e0:	4b59      	ldr	r3, [pc, #356]	; (8001448 <HAL_ADC_Start_DMA+0x18c>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd70 	bl	8000dc8 <LL_ADC_GetMultimode>
 80012e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe01 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 809b 	bne.w	8001432 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start_DMA+0x4e>
 8001306:	2302      	movs	r3, #2
 8001308:	e096      	b.n	8001438 <HAL_ADC_Start_DMA+0x17c>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_ADC_Start_DMA+0x190>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d008      	beq.n	800132e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b05      	cmp	r3, #5
 8001326:	d002      	beq.n	800132e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b09      	cmp	r3, #9
 800132c:	d17a      	bne.n	8001424 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fcf6 	bl	8001d20 <ADC_Enable>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d16d      	bne.n	800141a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <HAL_ADC_Start_DMA+0x184>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d009      	beq.n	8001370 <HAL_ADC_Start_DMA+0xb4>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a3b      	ldr	r2, [pc, #236]	; (8001450 <HAL_ADC_Start_DMA+0x194>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d002      	beq.n	800136c <HAL_ADC_Start_DMA+0xb0>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e003      	b.n	8001374 <HAL_ADC_Start_DMA+0xb8>
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_ADC_Start_DMA+0x198>)
 800136e:	e001      	b.n	8001374 <HAL_ADC_Start_DMA+0xb8>
 8001370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	4293      	cmp	r3, r2
 800137a:	d002      	beq.n	8001382 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f023 0206 	bic.w	r2, r3, #6
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	661a      	str	r2, [r3, #96]	; 0x60
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	4a29      	ldr	r2, [pc, #164]	; (8001458 <HAL_ADC_Start_DMA+0x19c>)
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_ADC_Start_DMA+0x1a0>)
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_ADC_Start_DMA+0x1a4>)
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	221c      	movs	r2, #28
 80013cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0210 	orr.w	r2, r2, #16
 80013e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3340      	adds	r3, #64	; 0x40
 8001400:	4619      	mov	r1, r3
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f001 f89b 	bl	8002540 <HAL_DMA_Start_IT>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd5b 	bl	8000ece <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001418:	e00d      	b.n	8001436 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001422:	e008      	b.n	8001436 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001430:	e001      	b.n	8001436 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001432:	2302      	movs	r3, #2
 8001434:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001436:	7dfb      	ldrb	r3, [r7, #23]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	50000100 	.word	0x50000100
 8001444:	50000300 	.word	0x50000300
 8001448:	50000700 	.word	0x50000700
 800144c:	50000600 	.word	0x50000600
 8001450:	50000500 	.word	0x50000500
 8001454:	50000400 	.word	0x50000400
 8001458:	08001e4d 	.word	0x08001e4d
 800145c:	08001f25 	.word	0x08001f25
 8001460:	08001f41 	.word	0x08001f41

08001464 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b6      	sub	sp, #216	; 0xd8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x24>
 80014be:	2302      	movs	r3, #2
 80014c0:	f000 bc13 	b.w	8001cea <HAL_ADC_ConfigChannel+0x84a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fd10 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 83f3 	bne.w	8001cc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7ff fbf1 	bl	8000cd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcfe 	bl	8000ef6 <LL_ADC_REG_IsConversionOngoing>
 80014fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd0a 	bl	8000f1c <LL_ADC_INJ_IsConversionOngoing>
 8001508:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800150c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 81d9 	bne.w	80018c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 81d4 	bne.w	80018c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001528:	d10f      	bne.n	800154a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fbf8 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fb9f 	bl	8000c86 <LL_ADC_SetSamplingTimeCommonConfig>
 8001548:	e00e      	b.n	8001568 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	461a      	mov	r2, r3
 8001558:	f7ff fbe7 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb8f 	bl	8000c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d022      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800159a:	f7ff fae9 	bl	8000b70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f7ff fb35 	bl	8000c1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x126>
 80015c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x128>
 80015c6:	2300      	movs	r3, #0
 80015c8:	461a      	mov	r2, r3
 80015ca:	f7ff fb41 	bl	8000c50 <LL_ADC_SetOffsetSaturation>
 80015ce:	e17b      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff faee 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x15c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fae3 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	0e9b      	lsrs	r3, r3, #26
 80015f6:	f003 021f 	and.w	r2, r3, #31
 80015fa:	e01e      	b.n	800163a <HAL_ADC_ConfigChannel+0x19a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fad8 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800161a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800161e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800162a:	2320      	movs	r3, #32
 800162c:	e004      	b.n	8001638 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800162e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x1b2>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	e018      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1e4>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800166e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001676:	2320      	movs	r3, #32
 8001678:	e004      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800167a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001684:	429a      	cmp	r2, r3
 8001686:	d106      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff faa7 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2101      	movs	r1, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa8b 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x222>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa80 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	0e9b      	lsrs	r3, r3, #26
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	e01e      	b.n	8001700 <HAL_ADC_ConfigChannel+0x260>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa75 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e004      	b.n	80016fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80016f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x278>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	e018      	b.n	800174a <HAL_ADC_ConfigChannel+0x2aa>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800172c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800173c:	2320      	movs	r3, #32
 800173e:	e004      	b.n	800174a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa44 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2102      	movs	r1, #2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa28 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10a      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x2e8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa1d 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	0e9b      	lsrs	r3, r3, #26
 8001782:	f003 021f 	and.w	r2, r3, #31
 8001786:	e01e      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x326>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2102      	movs	r1, #2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa12 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80017b6:	2320      	movs	r3, #32
 80017b8:	e004      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80017ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_ADC_ConfigChannel+0x33e>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	e016      	b.n	800180c <HAL_ADC_ConfigChannel+0x36c>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80017fe:	2320      	movs	r3, #32
 8001800:	e004      	b.n	800180c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800180c:	429a      	cmp	r2, r3
 800180e:	d106      	bne.n	800181e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f9e3 	bl	8000be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2103      	movs	r1, #3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f9c7 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10a      	bne.n	800184a <HAL_ADC_ConfigChannel+0x3aa>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2103      	movs	r1, #3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f9bc 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	0e9b      	lsrs	r3, r3, #26
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	e017      	b.n	800187a <HAL_ADC_ConfigChannel+0x3da>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2103      	movs	r1, #3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f9b1 	bl	8000bb8 <LL_ADC_GetOffsetChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001864:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e003      	b.n	8001878 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x3f2>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0e9b      	lsrs	r3, r3, #26
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	e011      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x416>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80018aa:	2320      	movs	r3, #32
 80018ac:	e003      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80018ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d106      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2200      	movs	r2, #0
 80018c0:	2103      	movs	r1, #3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f98e 	bl	8000be4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff faeb 	bl	8000ea8 <LL_ADC_IsEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 813d 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f7ff fa4a 	bl	8000d80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4aa2      	ldr	r2, [pc, #648]	; (8001b7c <HAL_ADC_ConfigChannel+0x6dc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	f040 812e 	bne.w	8001b54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x480>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	3301      	adds	r3, #1
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2b09      	cmp	r3, #9
 8001916:	bf94      	ite	ls
 8001918:	2301      	movls	r3, #1
 800191a:	2300      	movhi	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e019      	b.n	8001954 <HAL_ADC_ConfigChannel+0x4b4>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800192e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001930:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e003      	b.n	8001944 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800193c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2b09      	cmp	r3, #9
 800194c:	bf94      	ite	ls
 800194e:	2301      	movls	r3, #1
 8001950:	2300      	movhi	r3, #0
 8001952:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001954:	2b00      	cmp	r3, #0
 8001956:	d079      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x4d4>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	3301      	adds	r3, #1
 800196c:	069b      	lsls	r3, r3, #26
 800196e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001972:	e015      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x500>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001984:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e003      	b.n	8001998 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	069b      	lsls	r3, r3, #26
 800199c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x520>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	3301      	adds	r3, #1
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	e017      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x550>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e003      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80019dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	ea42 0103 	orr.w	r1, r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x576>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0e9b      	lsrs	r3, r3, #26
 8001a06:	3301      	adds	r3, #1
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	051b      	lsls	r3, r3, #20
 8001a14:	e018      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x5a8>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	e003      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	e07e      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x5c8>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	3301      	adds	r3, #1
 8001a60:	069b      	lsls	r3, r3, #26
 8001a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a66:	e015      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x5f4>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001a80:	2320      	movs	r3, #32
 8001a82:	e003      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	069b      	lsls	r3, r3, #26
 8001a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x614>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	e017      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x644>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	61fb      	str	r3, [r7, #28]
  return result;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e003      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	ea42 0103 	orr.w	r1, r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10d      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x670>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	3301      	adds	r3, #1
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	3b1e      	subs	r3, #30
 8001b08:	051b      	lsls	r3, r3, #20
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	e01b      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x6a8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	613b      	str	r3, [r7, #16]
  return result;
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 021f 	and.w	r2, r3, #31
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b1e      	subs	r3, #30
 8001b42:	051b      	lsls	r3, r3, #20
 8001b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f8eb 	bl	8000d2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_ADC_ConfigChannel+0x6e0>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80be 	beq.w	8001cde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6a:	d004      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x6d6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_ADC_ConfigChannel+0x6e4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x6ec>
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_ADC_ConfigChannel+0x6e8>)
 8001b78:	e009      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x6ee>
 8001b7a:	bf00      	nop
 8001b7c:	407f0000 	.word	0x407f0000
 8001b80:	80080000 	.word	0x80080000
 8001b84:	50000100 	.word	0x50000100
 8001b88:	50000300 	.word	0x50000300
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_ADC_ConfigChannel+0x854>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ffe0 	bl	8000b54 <LL_ADC_GetCommonPathInternalCh>
 8001b94:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_ADC_ConfigChannel+0x858>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x70c>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_ADC_ConfigChannel+0x85c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d13a      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d134      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc0:	d005      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x72e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_ADC_ConfigChannel+0x860>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f040 8085 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x742>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_ADC_ConfigChannel+0x864>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x746>
 8001be2:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_ADC_ConfigChannel+0x868>)
 8001be4:	e000      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x748>
 8001be6:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_ADC_ConfigChannel+0x854>)
 8001be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7fe ff9b 	bl	8000b2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_ADC_ConfigChannel+0x86c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <HAL_ADC_ConfigChannel+0x870>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f9      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c20:	e05a      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a3b      	ldr	r2, [pc, #236]	; (8001d14 <HAL_ADC_ConfigChannel+0x874>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d125      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d11f      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_ADC_ConfigChannel+0x864>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d104      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7ac>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <HAL_ADC_ConfigChannel+0x878>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d047      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x7c0>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <HAL_ADC_ConfigChannel+0x864>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x7c4>
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_ADC_ConfigChannel+0x868>)
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x7c6>
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_ADC_ConfigChannel+0x854>)
 8001c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f7fe ff5c 	bl	8000b2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c76:	e031      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_ADC_ConfigChannel+0x87c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12d      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d127      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_ADC_ConfigChannel+0x864>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca0:	d004      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x80c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_ADC_ConfigChannel+0x864>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x810>
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_ADC_ConfigChannel+0x868>)
 8001cae:	e000      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x812>
 8001cb0:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_ADC_ConfigChannel+0x854>)
 8001cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f7fe ff36 	bl	8000b2e <LL_ADC_SetCommonPathInternalCh>
 8001cc2:	e00c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ce6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	37d8      	adds	r7, #216	; 0xd8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	50000700 	.word	0x50000700
 8001cf8:	c3210000 	.word	0xc3210000
 8001cfc:	90c00010 	.word	0x90c00010
 8001d00:	50000600 	.word	0x50000600
 8001d04:	50000100 	.word	0x50000100
 8001d08:	50000300 	.word	0x50000300
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	053e2d63 	.word	0x053e2d63
 8001d14:	c7520000 	.word	0xc7520000
 8001d18:	50000500 	.word	0x50000500
 8001d1c:	cb840000 	.word	0xcb840000

08001d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f8b9 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d176      	bne.n	8001e2a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <ADC_Enable+0x114>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00d      	beq.n	8001d66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e062      	b.n	8001e2c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f888 	bl	8000e80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d004      	beq.n	8001d84 <ADC_Enable+0x64>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <ADC_Enable+0x118>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <ADC_Enable+0x68>
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <ADC_Enable+0x11c>)
 8001d86:	e000      	b.n	8001d8a <ADC_Enable+0x6a>
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <ADC_Enable+0x120>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fee2 	bl	8000b54 <LL_ADC_GetCommonPathInternalCh>
 8001d90:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d013      	beq.n	8001dc2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <ADC_Enable+0x124>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <ADC_Enable+0x128>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001db4:	e002      	b.n	8001dbc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001dc2:	f7fe fe95 	bl	8000af0 <HAL_GetTick>
 8001dc6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dc8:	e028      	b.n	8001e1c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f86a 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f84e 	bl	8000e80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de4:	f7fe fe84 	bl	8000af0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d914      	bls.n	8001e1c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00d      	beq.n	8001e1c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	f043 0210 	orr.w	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e007      	b.n	8001e2c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d1cf      	bne.n	8001dca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	8000003f 	.word	0x8000003f
 8001e38:	50000100 	.word	0x50000100
 8001e3c:	50000300 	.word	0x50000300
 8001e40:	50000700 	.word	0x50000700
 8001e44:	20000000 	.word	0x20000000
 8001e48:	053e2d63 	.word	0x053e2d63

08001e4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d14b      	bne.n	8001efe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d021      	beq.n	8001ec4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff11 	bl	8000cac <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d032      	beq.n	8001ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12b      	bne.n	8001ef6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11f      	bne.n	8001ef6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ec2:	e018      	b.n	8001ef6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d111      	bne.n	8001ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff fab4 	bl	8001464 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001efc:	e00e      	b.n	8001f1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff fabe 	bl	800148c <HAL_ADC_ErrorCallback>
}
 8001f10:	e004      	b.n	8001f1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff faa0 	bl	8001478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	f043 0204 	orr.w	r2, r3, #4
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fa90 	bl	800148c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <LL_ADC_IsEnabled>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <LL_ADC_IsEnabled+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_ADC_IsEnabled+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d101      	bne.n	8001fb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b0a1      	sub	sp, #132	; 0x84
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0e7      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001fea:	2300      	movs	r3, #0
 8001fec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff6:	d102      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	e009      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	e001      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0be      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffb1 	bl	8001f9a <LL_ADC_REG_IsConversionOngoing>
 8002038:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffab 	bl	8001f9a <LL_ADC_REG_IsConversionOngoing>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80a0 	bne.w	800218c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800204c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 809c 	bne.w	800218c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800205c:	d004      	beq.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a55      	ldr	r2, [pc, #340]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800206a:	e000      	b.n	800206e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800206c:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800206e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d04b      	beq.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800208a:	035b      	lsls	r3, r3, #13
 800208c:	430b      	orrs	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002092:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209c:	d004      	beq.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a45      	ldr	r2, [pc, #276]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10f      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80020a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020ac:	f7ff ff62 	bl	8001f74 <LL_ADC_IsEnabled>
 80020b0:	4604      	mov	r4, r0
 80020b2:	4841      	ldr	r0, [pc, #260]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020b4:	f7ff ff5e 	bl	8001f74 <LL_ADC_IsEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4323      	orrs	r3, r4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e012      	b.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80020c8:	483c      	ldr	r0, [pc, #240]	; (80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020ca:	f7ff ff53 	bl	8001f74 <LL_ADC_IsEnabled>
 80020ce:	4604      	mov	r4, r0
 80020d0:	483b      	ldr	r0, [pc, #236]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020d2:	f7ff ff4f 	bl	8001f74 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	431c      	orrs	r4, r3
 80020da:	483c      	ldr	r0, [pc, #240]	; (80021cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80020dc:	f7ff ff4a 	bl	8001f74 <LL_ADC_IsEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4323      	orrs	r3, r4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d056      	beq.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020fa:	f023 030f 	bic.w	r3, r3, #15
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	6892      	ldr	r2, [r2, #8]
 8002106:	430a      	orrs	r2, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800210e:	e047      	b.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002124:	d004      	beq.n	8002130 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10f      	bne.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002130:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002134:	f7ff ff1e 	bl	8001f74 <LL_ADC_IsEnabled>
 8002138:	4604      	mov	r4, r0
 800213a:	481f      	ldr	r0, [pc, #124]	; (80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800213c:	f7ff ff1a 	bl	8001f74 <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	4323      	orrs	r3, r4
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002150:	481a      	ldr	r0, [pc, #104]	; (80021bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002152:	f7ff ff0f 	bl	8001f74 <LL_ADC_IsEnabled>
 8002156:	4604      	mov	r4, r0
 8002158:	4819      	ldr	r0, [pc, #100]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800215a:	f7ff ff0b 	bl	8001f74 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	431c      	orrs	r4, r3
 8002162:	481a      	ldr	r0, [pc, #104]	; (80021cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002164:	f7ff ff06 	bl	8001f74 <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	4323      	orrs	r3, r4
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800217a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002182:	f023 030f 	bic.w	r3, r3, #15
 8002186:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002188:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800218a:	e009      	b.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800219e:	e000      	b.n	80021a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80021aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3784      	adds	r7, #132	; 0x84
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	50000100 	.word	0x50000100
 80021bc:	50000400 	.word	0x50000400
 80021c0:	50000500 	.word	0x50000500
 80021c4:	50000300 	.word	0x50000300
 80021c8:	50000700 	.word	0x50000700
 80021cc:	50000600 	.word	0x50000600

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff29 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff40 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff90 	bl	80022c4 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5f 	bl	8002270 <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff33 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa4 	bl	800232c <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e08d      	b.n	800251e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_DMA_Init+0x138>)
 800240a:	429a      	cmp	r2, r3
 800240c:	d80f      	bhi.n	800242e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_DMA_Init+0x13c>)
 8002416:	4413      	add	r3, r2
 8002418:	4a45      	ldr	r2, [pc, #276]	; (8002530 <HAL_DMA_Init+0x140>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_DMA_Init+0x144>)
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
 800242c:	e00e      	b.n	800244c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_DMA_Init+0x148>)
 8002436:	4413      	add	r3, r2
 8002438:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <HAL_DMA_Init+0x140>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	009a      	lsls	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a3c      	ldr	r2, [pc, #240]	; (800253c <HAL_DMA_Init+0x14c>)
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f9b6 	bl	8002810 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d102      	bne.n	80024b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_DMA_Init+0x104>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d80c      	bhi.n	80024f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f9d6 	bl	800288c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e008      	b.n	8002506 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020407 	.word	0x40020407
 800252c:	bffdfff8 	.word	0xbffdfff8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020000 	.word	0x40020000
 8002538:	bffdfbf8 	.word	0xbffdfbf8
 800253c:	40020400 	.word	0x40020400

08002540 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x20>
 800255c:	2302      	movs	r3, #2
 800255e:	e066      	b.n	800262e <HAL_DMA_Start_IT+0xee>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d155      	bne.n	8002620 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8fb 	bl	8002794 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 020e 	orr.w	r2, r2, #14
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00f      	b.n	80025d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 020a 	orr.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e005      	b.n	800262c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800262c:	7dfb      	ldrb	r3, [r7, #23]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2204      	movs	r2, #4
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d026      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7a>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d021      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0204 	bic.w	r2, r2, #4
 8002688:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2104      	movs	r1, #4
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d071      	beq.n	800278a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ae:	e06c      	b.n	800278a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2202      	movs	r2, #2
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02e      	beq.n	8002722 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d029      	beq.n	8002722 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020a 	bic.w	r2, r2, #10
 80026ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2102      	movs	r1, #2
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d038      	beq.n	800278a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002720:	e033      	b.n	800278a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2208      	movs	r2, #8
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02a      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d025      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020e 	bic.w	r2, r2, #14
 800274e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800278a:	bf00      	nop
 800278c:	bf00      	nop
}
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d108      	bne.n	80027f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027f2:	e007      	b.n	8002804 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d802      	bhi.n	800282a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e001      	b.n	800282e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800282c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3b08      	subs	r3, #8
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	009a      	lsls	r2, r3, #2
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800285a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	651a      	str	r2, [r3, #80]	; 0x50
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40020407 	.word	0x40020407
 800287c:	40020800 	.word	0x40020800
 8002880:	40020820 	.word	0x40020820
 8002884:	cccccccd 	.word	0xcccccccd
 8002888:	40020880 	.word	0x40020880

0800288c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2201      	movs	r2, #1
 80028ba:	409a      	lsls	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	1000823f 	.word	0x1000823f
 80028d0:	40020940 	.word	0x40020940

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028e2:	e15a      	b.n	8002b9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 814c 	beq.w	8002b94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d005      	beq.n	8002914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d130      	bne.n	8002976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0201 	and.w	r2, r3, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d017      	beq.n	80029b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d123      	bne.n	8002a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	6939      	ldr	r1, [r7, #16]
 8002a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80a6 	beq.w	8002b94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a48:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6613      	str	r3, [r2, #96]	; 0x60
 8002a54:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a60:	4a56      	ldr	r2, [pc, #344]	; (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a8a:	d01f      	beq.n	8002acc <HAL_GPIO_Init+0x1f8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <HAL_GPIO_Init+0x2ec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d019      	beq.n	8002ac8 <HAL_GPIO_Init+0x1f4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <HAL_GPIO_Init+0x2f0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_GPIO_Init+0x1f0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x2f4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_GPIO_Init+0x1ec>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a49      	ldr	r2, [pc, #292]	; (8002bcc <HAL_GPIO_Init+0x2f8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x1e8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2fc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_GPIO_Init+0x1e4>
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	e00a      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ab8:	2306      	movs	r3, #6
 8002aba:	e008      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002acc:	2300      	movs	r3, #0
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ade:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b10:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b8e:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae9d 	bne.w	80028e4 <HAL_GPIO_Init+0x10>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	48000800 	.word	0x48000800
 8002bc8:	48000c00 	.word	0x48000c00
 8002bcc:	48001000 	.word	0x48001000
 8002bd0:	48001400 	.word	0x48001400
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f806 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d141      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d131      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c72:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c84:	4a41      	ldr	r2, [pc, #260]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2232      	movs	r2, #50	; 0x32
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a3f      	ldr	r2, [pc, #252]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cca:	d158      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e057      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ce0:	e04d      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce8:	d141      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d131      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d10:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2232      	movs	r2, #50	; 0x32
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2e:	e002      	b.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d102      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f2      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d112      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e011      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d6c:	e007      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da6:	6093      	str	r3, [r2, #8]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e2fe      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b97      	ldr	r3, [pc, #604]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b94      	ldr	r3, [pc, #592]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3e>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e2d9      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a84      	ldr	r2, [pc, #528]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b7f      	ldr	r3, [pc, #508]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7e      	ldr	r2, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7b      	ldr	r2, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b78      	ldr	r3, [pc, #480]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a77      	ldr	r2, [pc, #476]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a74      	ldr	r2, [pc, #464]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fd fe3e 	bl	8000af0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fd fe3a 	bl	8000af0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e29e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fd fe2a 	bl	8000af0 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fe26 	bl	8000af0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e28a      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	4b60      	ldr	r3, [pc, #384]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b56      	ldr	r3, [pc, #344]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x136>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x13c>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d11f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x154>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e25d      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4946      	ldr	r1, [pc, #280]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f20:	4b45      	ldr	r3, [pc, #276]	; (8003038 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fd97 	bl	8000a58 <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e249      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd fdd2 	bl	8000af0 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fd fdce 	bl	8000af0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e232      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	492d      	ldr	r1, [pc, #180]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	e01a      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fd fdae 	bl	8000af0 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fd fdaa 	bl	8000af0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1e0>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d041      	beq.n	800304a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01c      	beq.n	8003008 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd4:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fd fd87 	bl	8000af0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fd fd83 	bl	8000af0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1e7      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ef      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
 8003006:	e020      	b.n	800304a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCC_OscConfig+0x27c>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fd fd6a 	bl	8000af0 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301e:	e00d      	b.n	800303c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fd fd66 	bl	8000af0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d906      	bls.n	800303c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1ca      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	4b8c      	ldr	r3, [pc, #560]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ea      	bne.n	8003020 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305c:	4b84      	ldr	r3, [pc, #528]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x2b4>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2b6>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	4a7e      	ldr	r2, [pc, #504]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
 800307e:	4b7c      	ldr	r3, [pc, #496]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0x4bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_RCC_OscConfig+0x4bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	; (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fd23 	bl	8000af0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fd fd1f 	bl	8000af0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e183      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	4b6c      	ldr	r3, [pc, #432]	; (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_RCC_OscConfig+0x32e>
 80030d4:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e4:	e024      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d110      	bne.n	8003110 <HAL_RCC_OscConfig+0x358>
 80030ee:	4b60      	ldr	r3, [pc, #384]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	4a5e      	ldr	r2, [pc, #376]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fe:	4b5c      	ldr	r3, [pc, #368]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310e:	e00f      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 8003110:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fd fcda 	bl	8000af0 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd fcd6 	bl	8000af0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e138      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ed      	beq.n	8003140 <HAL_RCC_OscConfig+0x388>
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fd fcc3 	bl	8000af0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fcbf 	bl	8000af0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e121      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ed      	bne.n	800316e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4a34      	ldr	r2, [pc, #208]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d03c      	beq.n	800322a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031be:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fc92 	bl	8000af0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d0:	f7fd fc8e 	bl	8000af0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0f2      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCC_OscConfig+0x418>
 80031f0:	e01b      	b.n	800322a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fc75 	bl	8000af0 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320a:	f7fd fc71 	bl	8000af0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0d5      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ef      	bne.n	800320a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80c9 	beq.w	80033c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f000 8083 	beq.w	8003348 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d15e      	bne.n	8003308 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fc4b 	bl	8000af0 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fd fc47 	bl	8000af0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d905      	bls.n	8003278 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0ab      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ec      	bne.n	800325e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b52      	ldr	r3, [pc, #328]	; (80033d4 <HAL_RCC_OscConfig+0x61c>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a11      	ldr	r1, [r2, #32]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003294:	3a01      	subs	r2, #1
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4311      	orrs	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800329e:	0212      	lsls	r2, r2, #8
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0552      	lsls	r2, r2, #21
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	0852      	lsrs	r2, r2, #1
 80032b4:	3a01      	subs	r2, #1
 80032b6:	0652      	lsls	r2, r2, #25
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032be:	06d2      	lsls	r2, r2, #27
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4943      	ldr	r1, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a3d      	ldr	r2, [pc, #244]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fc06 	bl	8000af0 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fc02 	bl	8000af0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e066      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x530>
 8003306:	e05e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd fbec 	bl	8000af0 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fd fbe8 	bl	8000af0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04c      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4924      	ldr	r1, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_OscConfig+0x620>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
 8003346:	e03e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e039      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	429a      	cmp	r2, r3
 8003366:	d12c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d123      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d113      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	019f800c 	.word	0x019f800c
 80033d8:	feeefffc 	.word	0xfeeefffc

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e11e      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b91      	ldr	r3, [pc, #580]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b8e      	ldr	r3, [pc, #568]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	498c      	ldr	r1, [pc, #560]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e106      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d073      	beq.n	8003518 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d129      	bne.n	800348c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f4      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003448:	f000 f966 	bl	8003718 <RCC_GetSysClockFreqFromPLLSource>
 800344c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a7c      	ldr	r2, [pc, #496]	; (8003644 <HAL_RCC_ClockConfig+0x268>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d93f      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003456:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d033      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12f      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347e:	4a70      	ldr	r2, [pc, #448]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e024      	b.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0c6      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0be      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034b4:	f000 f8ce 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4a61      	ldr	r2, [pc, #388]	; (8003644 <HAL_RCC_ClockConfig+0x268>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d909      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ca:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4957      	ldr	r1, [pc, #348]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fd fb02 	bl	8000af0 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fd fafe 	bl	8000af0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e095      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a42      	ldr	r2, [pc, #264]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800353a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003548:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003550:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4936      	ldr	r1, [pc, #216]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e008      	b.n	800357e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d105      	bne.n	800357e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a32      	ldr	r2, [pc, #200]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d21d      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800359c:	f7fd faa8 	bl	8000af0 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd faa4 	bl	8000af0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03b      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1ed      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4917      	ldr	r1, [pc, #92]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	490f      	ldr	r1, [pc, #60]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003606:	f000 f825 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800360a:	4602      	mov	r2, r0
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_ClockConfig+0x264>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	490c      	ldr	r1, [pc, #48]	; (8003648 <HAL_RCC_ClockConfig+0x26c>)
 8003618:	5ccb      	ldrb	r3, [r1, r3]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x270>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fa14 	bl	8000a58 <HAL_InitTick>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	04c4b400 	.word	0x04c4b400
 8003648:	080048a4 	.word	0x080048a4
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d102      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e047      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d102      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e03e      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d136      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3301      	adds	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	0a12      	lsrs	r2, r2, #8
 80036b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	0a12      	lsrs	r2, r2, #8
 80036d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e001      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036fc:	693b      	ldr	r3, [r7, #16]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	00f42400 	.word	0x00f42400
 8003714:	016e3600 	.word	0x016e3600

08003718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d10c      	bne.n	8003756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003746:	68d2      	ldr	r2, [r2, #12]
 8003748:	0a12      	lsrs	r2, r2, #8
 800374a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
    break;
 8003754:	e00c      	b.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	0a12      	lsrs	r2, r2, #8
 8003764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    break;
 800376e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0e5b      	lsrs	r3, r3, #25
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800378a:	687b      	ldr	r3, [r7, #4]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40021000 	.word	0x40021000
 800379c:	016e3600 	.word	0x016e3600
 80037a0:	00f42400 	.word	0x00f42400

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8098 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6593      	str	r3, [r2, #88]	; 0x58
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fa:	f7fd f979 	bl	8000af0 <HAL_GetTick>
 80037fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003800:	e009      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd f975 	bl	8000af0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
        break;
 8003814:	e005      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ef      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d159      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01e      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d019      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd f935 	bl	8000af0 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd f931 	bl	8000af0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
            break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ec      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e0:	7c7b      	ldrb	r3, [r7, #17]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4ba7      	ldr	r3, [pc, #668]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4aa6      	ldr	r2, [pc, #664]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038fe:	4ba1      	ldr	r3, [pc, #644]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 0203 	bic.w	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	499d      	ldr	r1, [pc, #628]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003920:	4b98      	ldr	r3, [pc, #608]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f023 020c 	bic.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4995      	ldr	r1, [pc, #596]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003942:	4b90      	ldr	r3, [pc, #576]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	498c      	ldr	r1, [pc, #560]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003964:	4b87      	ldr	r3, [pc, #540]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4984      	ldr	r1, [pc, #528]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003986:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	497b      	ldr	r1, [pc, #492]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4973      	ldr	r1, [pc, #460]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	496a      	ldr	r1, [pc, #424]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4962      	ldr	r1, [pc, #392]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	4959      	ldr	r1, [pc, #356]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a30:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	4951      	ldr	r1, [pc, #324]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4948      	ldr	r1, [pc, #288]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a74:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4940      	ldr	r1, [pc, #256]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aac:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	4932      	ldr	r1, [pc, #200]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4924      	ldr	r1, [pc, #144]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	4916      	ldr	r1, [pc, #88]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d019      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a02      	ldr	r2, [pc, #8]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4926      	ldr	r1, [pc, #152]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bda:	4918      	ldr	r1, [pc, #96]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c22:	d105      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e049      	b.n	8003ce6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fe0a 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fbac 	bl	80043dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d001      	beq.n	8003d08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e04c      	b.n	8003da2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_TIM_Base_Start+0xc0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d01d      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_TIM_Base_Start+0xc4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <HAL_TIM_Base_Start+0xc8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_TIM_Base_Start+0xcc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_TIM_Base_Start+0xd0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_TIM_Base_Start+0xd4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_Base_Start+0x70>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_TIM_Base_Start+0xd8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d115      	bne.n	8003d8c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_TIM_Base_Start+0xdc>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d015      	beq.n	8003d9e <HAL_TIM_Base_Start+0xae>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d78:	d011      	beq.n	8003d9e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8a:	e008      	b.n	8003d9e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e000      	b.n	8003da0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40015000 	.word	0x40015000
 8003dcc:	00010007 	.word	0x00010007

08003dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d001      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e054      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d01d      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_TIM_Base_Start_IT+0xdc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x80>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d115      	bne.n	8003e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_TIM_Base_Start_IT+0xec>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d015      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0xbe>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d011      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	e008      	b.n	8003e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	00010007 	.word	0x00010007

08003ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d020      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01b      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0202 	mvn.w	r2, #2
 8003ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa48 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa3a 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fa4b 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0204 	mvn.w	r2, #4
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa22 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa14 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa25 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f9fc 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9ee 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f9ff 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0210 	mvn.w	r2, #16
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f9d6 	bl	80043a0 <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9c8 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f9d9 	bl	80043b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0201 	mvn.w	r2, #1
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc fb4c 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fbb1 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fba9 	bl	80047d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f993 	bl	80043c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f06f 0220 	mvn.w	r2, #32
 80040be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb71 	bl	80047a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb7d 	bl	80047e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb75 	bl	80047f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fb6d 	bl	800480c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fb65 	bl	8004820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIM_ConfigClockSource+0x1c>
 8004178:	2302      	movs	r3, #2
 800417a:	e0f6      	b.n	800436a <HAL_TIM_ConfigClockSource+0x20a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800419a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a6f      	ldr	r2, [pc, #444]	; (8004374 <HAL_TIM_ConfigClockSource+0x214>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f000 80c1 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 80041bc:	4a6d      	ldr	r2, [pc, #436]	; (8004374 <HAL_TIM_ConfigClockSource+0x214>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f200 80c6 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 80041c4:	4a6c      	ldr	r2, [pc, #432]	; (8004378 <HAL_TIM_ConfigClockSource+0x218>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	f000 80b9 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 80041cc:	4a6a      	ldr	r2, [pc, #424]	; (8004378 <HAL_TIM_ConfigClockSource+0x218>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	f200 80be 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 80041d4:	4a69      	ldr	r2, [pc, #420]	; (800437c <HAL_TIM_ConfigClockSource+0x21c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	f000 80b1 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 80041dc:	4a67      	ldr	r2, [pc, #412]	; (800437c <HAL_TIM_ConfigClockSource+0x21c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	f200 80b6 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 80041e4:	4a66      	ldr	r2, [pc, #408]	; (8004380 <HAL_TIM_ConfigClockSource+0x220>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	f000 80a9 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 80041ec:	4a64      	ldr	r2, [pc, #400]	; (8004380 <HAL_TIM_ConfigClockSource+0x220>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f200 80ae 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_TIM_ConfigClockSource+0x224>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f000 80a1 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 80041fc:	4a61      	ldr	r2, [pc, #388]	; (8004384 <HAL_TIM_ConfigClockSource+0x224>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	f200 80a6 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004204:	4a60      	ldr	r2, [pc, #384]	; (8004388 <HAL_TIM_ConfigClockSource+0x228>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f000 8099 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 800420c:	4a5e      	ldr	r2, [pc, #376]	; (8004388 <HAL_TIM_ConfigClockSource+0x228>)
 800420e:	4293      	cmp	r3, r2
 8004210:	f200 809e 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004214:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004218:	f000 8091 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 800421c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004220:	f200 8096 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004228:	f000 8089 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x1de>
 800422c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004230:	f200 808e 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d03e      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0x158>
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	f200 8087 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	f000 8086 	beq.w	8004356 <HAL_TIM_ConfigClockSource+0x1f6>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d87f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d01a      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x12a>
 8004254:	2b70      	cmp	r3, #112	; 0x70
 8004256:	d87b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d050      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x19e>
 800425c:	2b60      	cmp	r3, #96	; 0x60
 800425e:	d877      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d03c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x17e>
 8004264:	2b50      	cmp	r3, #80	; 0x50
 8004266:	d873      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d058      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x1be>
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d86f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d064      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x1de>
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d86b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d060      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x1de>
 800427c:	2b20      	cmp	r3, #32
 800427e:	d867      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05c      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x1de>
 8004284:	2b10      	cmp	r3, #16
 8004286:	d05a      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x1de>
 8004288:	e062      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	f000 f9cf 	bl	800463c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
      break;
 80042b6:	e04f      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	f000 f9b8 	bl	800463c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042da:	609a      	str	r2, [r3, #8]
      break;
 80042dc:	e03c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 f92a 	bl	8004544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2150      	movs	r1, #80	; 0x50
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f983 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 80042fc:	e02c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800430a:	461a      	mov	r2, r3
 800430c:	f000 f949 	bl	80045a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2160      	movs	r1, #96	; 0x60
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f973 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800431c:	e01c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	461a      	mov	r2, r3
 800432c:	f000 f90a 	bl	8004544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2140      	movs	r1, #64	; 0x40
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f963 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800433c:	e00c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f000 f95a 	bl	8004602 <TIM_ITRx_SetConfig>
      break;
 800434e:	e003      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	e000      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	00100070 	.word	0x00100070
 8004378:	00100060 	.word	0x00100060
 800437c:	00100050 	.word	0x00100050
 8004380:	00100040 	.word	0x00100040
 8004384:	00100030 	.word	0x00100030
 8004388:	00100020 	.word	0x00100020

0800438c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a4c      	ldr	r2, [pc, #304]	; (8004520 <TIM_Base_SetConfig+0x144>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d017      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d013      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a49      	ldr	r2, [pc, #292]	; (8004524 <TIM_Base_SetConfig+0x148>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a48      	ldr	r2, [pc, #288]	; (8004528 <TIM_Base_SetConfig+0x14c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00b      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a47      	ldr	r2, [pc, #284]	; (800452c <TIM_Base_SetConfig+0x150>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a46      	ldr	r2, [pc, #280]	; (8004530 <TIM_Base_SetConfig+0x154>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0x48>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a45      	ldr	r2, [pc, #276]	; (8004534 <TIM_Base_SetConfig+0x158>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d108      	bne.n	8004436 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a39      	ldr	r2, [pc, #228]	; (8004520 <TIM_Base_SetConfig+0x144>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d023      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d01f      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a36      	ldr	r2, [pc, #216]	; (8004524 <TIM_Base_SetConfig+0x148>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01b      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a35      	ldr	r2, [pc, #212]	; (8004528 <TIM_Base_SetConfig+0x14c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d017      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a34      	ldr	r2, [pc, #208]	; (800452c <TIM_Base_SetConfig+0x150>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a33      	ldr	r2, [pc, #204]	; (8004530 <TIM_Base_SetConfig+0x154>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a33      	ldr	r2, [pc, #204]	; (8004538 <TIM_Base_SetConfig+0x15c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a32      	ldr	r2, [pc, #200]	; (800453c <TIM_Base_SetConfig+0x160>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a31      	ldr	r2, [pc, #196]	; (8004540 <TIM_Base_SetConfig+0x164>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0xaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <TIM_Base_SetConfig+0x158>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a18      	ldr	r2, [pc, #96]	; (8004520 <TIM_Base_SetConfig+0x144>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <TIM_Base_SetConfig+0x110>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <TIM_Base_SetConfig+0x154>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00f      	beq.n	80044ec <TIM_Base_SetConfig+0x110>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <TIM_Base_SetConfig+0x15c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_Base_SetConfig+0x110>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a19      	ldr	r2, [pc, #100]	; (800453c <TIM_Base_SetConfig+0x160>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_Base_SetConfig+0x110>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <TIM_Base_SetConfig+0x164>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_Base_SetConfig+0x110>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a13      	ldr	r2, [pc, #76]	; (8004534 <TIM_Base_SetConfig+0x158>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  }
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40013400 	.word	0x40013400
 8004534:	40015000 	.word	0x40015000
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 030a 	bic.w	r3, r3, #10
 8004580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b087      	sub	sp, #28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 0210 	bic.w	r2, r3, #16
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	031b      	lsls	r3, r3, #12
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	f043 0307 	orr.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	431a      	orrs	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e074      	b.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a34      	ldr	r2, [pc, #208]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a33      	ldr	r2, [pc, #204]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a31      	ldr	r2, [pc, #196]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a21      	ldr	r2, [pc, #132]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1c      	ldr	r2, [pc, #112]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a11      	ldr	r2, [pc, #68]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10c      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40015000 	.word	0x40015000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <memset>:
 8004834:	4402      	add	r2, r0
 8004836:	4603      	mov	r3, r0
 8004838:	4293      	cmp	r3, r2
 800483a:	d100      	bne.n	800483e <memset+0xa>
 800483c:	4770      	bx	lr
 800483e:	f803 1b01 	strb.w	r1, [r3], #1
 8004842:	e7f9      	b.n	8004838 <memset+0x4>

08004844 <__libc_init_array>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4d0d      	ldr	r5, [pc, #52]	; (800487c <__libc_init_array+0x38>)
 8004848:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <__libc_init_array+0x3c>)
 800484a:	1b64      	subs	r4, r4, r5
 800484c:	10a4      	asrs	r4, r4, #2
 800484e:	2600      	movs	r6, #0
 8004850:	42a6      	cmp	r6, r4
 8004852:	d109      	bne.n	8004868 <__libc_init_array+0x24>
 8004854:	4d0b      	ldr	r5, [pc, #44]	; (8004884 <__libc_init_array+0x40>)
 8004856:	4c0c      	ldr	r4, [pc, #48]	; (8004888 <__libc_init_array+0x44>)
 8004858:	f000 f818 	bl	800488c <_init>
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	2600      	movs	r6, #0
 8004862:	42a6      	cmp	r6, r4
 8004864:	d105      	bne.n	8004872 <__libc_init_array+0x2e>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	f855 3b04 	ldr.w	r3, [r5], #4
 800486c:	4798      	blx	r3
 800486e:	3601      	adds	r6, #1
 8004870:	e7ee      	b.n	8004850 <__libc_init_array+0xc>
 8004872:	f855 3b04 	ldr.w	r3, [r5], #4
 8004876:	4798      	blx	r3
 8004878:	3601      	adds	r6, #1
 800487a:	e7f2      	b.n	8004862 <__libc_init_array+0x1e>
 800487c:	080048b4 	.word	0x080048b4
 8004880:	080048b4 	.word	0x080048b4
 8004884:	080048b4 	.word	0x080048b4
 8004888:	080048b8 	.word	0x080048b8

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
