
LabMicro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf4  08004cf4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cfc  08004cfc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000010  08004d14  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08004d14  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110e3  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023cb  00000000  00000000  00031166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00033538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d6d  00000000  00000000  000346a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d9e  00000000  00000000  0003540d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001268b  00000000  00000000  0005c1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108595  00000000  00000000  0006e836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b34  00000000  00000000  00176dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ccc 	.word	0x08004ccc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004ccc 	.word	0x08004ccc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fca3 	bl	8000e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f868 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fa12 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 f9e6 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800052c:	f000 f8ae 	bl	800068c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000530:	f000 f994 	bl	800085c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000534:	f000 f944 	bl	80007c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000538:	4826      	ldr	r0, [pc, #152]	; (80005d4 <main+0xc0>)
 800053a:	f003 fe69 	bl	8004210 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_ADC_Start_DMA(&hadc1, poten, 300);
 800053e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000542:	4925      	ldr	r1, [pc, #148]	; (80005d8 <main+0xc4>)
 8000544:	4825      	ldr	r0, [pc, #148]	; (80005dc <main+0xc8>)
 8000546:	f001 f8d9 	bl	80016fc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800054a:	4825      	ldr	r0, [pc, #148]	; (80005e0 <main+0xcc>)
 800054c:	f003 fdf0 	bl	8004130 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <main+0xc0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <main+0xd0>)
 8000558:	6013      	str	r3, [r2, #0]
	  rawtim3 = __HAL_TIM_GET_COUNTER(&htim3);
 800055a:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <main+0xcc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	b29b      	uxth	r3, r3
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <main+0xd4>)
 8000564:	8013      	strh	r3, [r2, #0]
	  //HAL_Delay(1000);
	  sumTim2 = rawtim2+(roundtim2*(4294967295));
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <main+0xd0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2200      	movs	r2, #0
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	617a      	str	r2, [r7, #20]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <main+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	4698      	mov	r8, r3
 8000578:	4691      	mov	r9, r2
 800057a:	4642      	mov	r2, r8
 800057c:	464b      	mov	r3, r9
 800057e:	f04f 0000 	mov.w	r0, #0
 8000582:	f04f 0100 	mov.w	r1, #0
 8000586:	07d9      	lsls	r1, r3, #31
 8000588:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800058c:	07d0      	lsls	r0, r2, #31
 800058e:	4602      	mov	r2, r0
 8000590:	460b      	mov	r3, r1
 8000592:	ebb2 0408 	subs.w	r4, r2, r8
 8000596:	eb63 0509 	sbc.w	r5, r3, r9
 800059a:	1923      	adds	r3, r4, r4
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	eb45 0305 	adc.w	r3, r5, r5
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80005a8:	eb14 0a08 	adds.w	sl, r4, r8
 80005ac:	eb45 0b09 	adc.w	fp, r5, r9
 80005b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80005b4:	460b      	mov	r3, r1
 80005b6:	eb13 030a 	adds.w	r3, r3, sl
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4613      	mov	r3, r2
 80005be:	eb43 030b 	adc.w	r3, r3, fp
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <main+0xdc>)
 80005ca:	e9c3 0100 	strd	r0, r1, [r3]
	  Average();
 80005ce:	f000 fa43 	bl	8000a58 <Average>
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 80005d2:	e7bd      	b.n	8000550 <main+0x3c>
 80005d4:	200000f8 	.word	0x200000f8
 80005d8:	20000198 	.word	0x20000198
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000144 	.word	0x20000144
 80005e4:	20000194 	.word	0x20000194
 80005e8:	20000190 	.word	0x20000190
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200003f8 	.word	0x200003f8

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	; 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fb36 	bl	8004c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f002 fd39 	bl	8003090 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000634:	2304      	movs	r3, #4
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000638:	234b      	movs	r3, #75	; 0x4b
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fdd3 	bl	80031f8 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000658:	f000 fa86 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f8d1 	bl	800381c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000680:	f000 fa72 	bl	8000b68 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2220      	movs	r2, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fae5 	bl	8004c74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006da:	2200      	movs	r2, #0
 80006dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80006e4:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006f4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_ADC1_Init+0x124>)
 80006fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_ADC1_Init+0x124>)
 8000704:	2201      	movs	r2, #1
 8000706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_ADC1_Init+0x124>)
 800070c:	2200      	movs	r2, #0
 800070e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000710:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_ADC1_Init+0x124>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000718:	4825      	ldr	r0, [pc, #148]	; (80007b0 <MX_ADC1_Init+0x124>)
 800071a:	f000 fe33 	bl	8001384 <HAL_ADC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000724:	f000 fa20 	bl	8000b68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	481f      	ldr	r0, [pc, #124]	; (80007b0 <MX_ADC1_Init+0x124>)
 8000734:	f001 fe64 	bl	8002400 <HAL_ADCEx_MultiModeConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800073e:	f000 fa13 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0x128>)
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	237f      	movs	r3, #127	; 0x7f
 8000750:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x124>)
 8000760:	f001 f8be 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800076a:	f000 f9fd 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_ADC1_Init+0x12c>)
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000772:	230c      	movs	r3, #12
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x124>)
 800077c:	f001 f8b0 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000786:	f000 f9ef 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_ADC1_Init+0x130>)
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800078e:	2312      	movs	r3, #18
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_ADC1_Init+0x124>)
 8000798:	f001 f8a2 	bl	80018e0 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80007a2:	f000 f9e1 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	; 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	04300002 	.word	0x04300002
 80007b8:	08600004 	.word	0x08600004
 80007bc:	3ef08000 	.word	0x3ef08000

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e8:	2295      	movs	r2, #149	; 0x95
 80007ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM2_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_TIM2_Init+0x98>)
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_TIM2_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM2_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM2_Init+0x98>)
 8000808:	f003 fc3a 	bl	8004080 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 f9a9 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_TIM2_Init+0x98>)
 8000824:	f003 febc 	bl	80045a0 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082e:	f000 f99b 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_TIM2_Init+0x98>)
 8000840:	f004 f93c 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800084a:	f000 f98d 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000f8 	.word	0x200000f8

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM3_Init+0x94>)
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <MX_TIM3_Init+0x98>)
 800087e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14999;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM3_Init+0x94>)
 8000882:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM3_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM3_Init+0x94>)
 8000890:	2209      	movs	r2, #9
 8000892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM3_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM3_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM3_Init+0x94>)
 80008a2:	f003 fbed 	bl	8004080 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008ac:	f000 f95c 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM3_Init+0x94>)
 80008be:	f003 fe6f 	bl	80045a0 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 f94e 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008cc:	2320      	movs	r3, #32
 80008ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM3_Init+0x94>)
 80008da:	f004 f8ef 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f940 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000144 	.word	0x20000144
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_DMA_Init+0x50>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <MX_DMA_Init+0x50>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6493      	str	r3, [r2, #72]	; 0x48
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_DMA_Init+0x50>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_DMA_Init+0x50>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <MX_DMA_Init+0x50>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6493      	str	r3, [r2, #72]	; 0x48
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_DMA_Init+0x50>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200b      	movs	r0, #11
 8000934:	f001 ff47 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000938:	200b      	movs	r0, #11
 800093a:	f001 ff5e 	bl	80027fa <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0320 	and.w	r3, r3, #32
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f002 fb25 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0xd8>)
 80009e6:	f002 f995 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ea:	2320      	movs	r3, #32
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f002 f986 	bl	8002d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f001 feda 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a12:	2028      	movs	r0, #40	; 0x28
 8000a14:	f001 fef1 	bl	80027fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000800 	.word	0x48000800

08000a28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d104      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		roundtim2 = roundtim2 + 1;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a40:	6013      	str	r3, [r2, #0]
	}
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000f8 	.word	0x200000f8
 8000a54:	20000000 	.word	0x20000000

08000a58 <Average>:

void Average(){
 8000a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a5c:	b08e      	sub	sp, #56	; 0x38
 8000a5e:	af00      	add	r7, sp, #0
	uint64_t sumPoten[3] = {0};
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
	for (int i = 0;i<297;i+=3){
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
 8000a76:	e03f      	b.n	8000af8 <Average+0xa0>
		sumPoten[0] = sumPoten[0]+poten[i];
 8000a78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <Average+0x100>)
 8000a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	461c      	mov	r4, r3
 8000a8a:	4615      	mov	r5, r2
 8000a8c:	1903      	adds	r3, r0, r4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	eb41 0305 	adc.w	r3, r1, r5
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		sumPoten[1] = sumPoten[1]+poten[i+1];
 8000a9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <Average+0x100>)
 8000aa8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	eb10 0308 	adds.w	r3, r0, r8
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	eb41 0309 	adc.w	r3, r1, r9
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ac4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		sumPoten[2] = sumPoten[2]+poten[i+2];
 8000ac8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	1c9a      	adds	r2, r3, #2
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <Average+0x100>)
 8000ad2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	469a      	mov	sl, r3
 8000adc:	4693      	mov	fp, r2
 8000ade:	eb10 030a 	adds.w	r3, r0, sl
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	eb41 030b 	adc.w	r3, r1, fp
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (int i = 0;i<297;i+=3){
 8000af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af4:	3303      	adds	r3, #3
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000afe:	ddbb      	ble.n	8000a78 <Average+0x20>
	}
	avPoten1 = sumPoten[0]/100;
 8000b00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b04:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	f7ff fb84 	bl	8000218 <__aeabi_uldivmod>
 8000b10:	4602      	mov	r2, r0
 8000b12:	460b      	mov	r3, r1
 8000b14:	b292      	uxth	r2, r2
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <Average+0x104>)
 8000b18:	801a      	strh	r2, [r3, #0]
	avPoten2 = sumPoten[1]/100;
 8000b1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b1e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	f7ff fb77 	bl	8000218 <__aeabi_uldivmod>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <Average+0x108>)
 8000b32:	801a      	strh	r2, [r3, #0]
	avPoten3 = sumPoten[2]/100;
 8000b34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000b38:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	f7ff fb6a 	bl	8000218 <__aeabi_uldivmod>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <Average+0x10c>)
 8000b4c:	801a      	strh	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	3738      	adds	r7, #56	; 0x38
 8000b52:	46bd      	mov	sp, r7
 8000b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b58:	20000198 	.word	0x20000198
 8000b5c:	200003f0 	.word	0x200003f0
 8000b60:	200003f2 	.word	0x200003f2
 8000b64:	200003f4 	.word	0x200003f4

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6613      	str	r3, [r2, #96]	; 0x60
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000baa:	f002 fb15 	bl	80031d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0a0      	sub	sp, #128	; 0x80
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	2254      	movs	r2, #84	; 0x54
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 f849 	bl	8004c74 <memset>
  if(hadc->Instance==ADC1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bea:	d177      	bne.n	8000cdc <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bf2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fff1 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c08:	f7ff ffae 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a2e      	ldr	r2, [pc, #184]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_ADC_MspInit+0x128>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f002 f853 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <HAL_ADC_MspInit+0x12c>)
 8000c82:	f002 f847 	bl	8002d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0x134>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000c8e:	2205      	movs	r2, #5
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000caa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cc2:	f001 fdb5 	bl	8002830 <HAL_DMA_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000ccc:	f7ff ff4c 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cd4:	655a      	str	r2, [r3, #84]	; 0x54
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_ADC_MspInit+0x130>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3780      	adds	r7, #128	; 0x80
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d114      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	201c      	movs	r0, #28
 8000d24:	f001 fd4f 	bl	80027c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d28:	201c      	movs	r0, #28
 8000d2a:	f001 fd66 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d2e:	e010      	b.n	8000d52 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10b      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40000400 	.word	0x40000400

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8ac 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA1_Channel1_IRQHandler+0x10>)
 8000dbe:	f001 fe5a 	bl	8002a76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000098 	.word	0x20000098

08000dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM2_IRQHandler+0x10>)
 8000dd2:	f003 fa95 	bl	8004300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000f8 	.word	0x200000f8

08000de0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000de4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000de8:	f002 f92e 	bl	8003048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f003 ff1f 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fb65 	bl	8000514 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   r0, =_estack
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e58:	08004d04 	.word	0x08004d04
  ldr r2, =_sbss
 8000e5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e60:	20000404 	.word	0x20000404

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>

08000e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f001 fc9d 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fe74 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_InitTick+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d022      	beq.n	8000ef2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_InitTick+0x68>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fca8 	bl	8002816 <HAL_SYSTICK_Config>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10f      	bne.n	8000eec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b0f      	cmp	r3, #15
 8000ed0:	d809      	bhi.n	8000ee6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	f001 fc74 	bl	80027c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_InitTick+0x70>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e007      	b.n	8000ef6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e004      	b.n	8000ef6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e001      	b.n	8000ef6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000008 	.word	0x20000008

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f1c:	6013      	str	r3, [r2, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20000400 	.word	0x20000400
 8000f2c:	2000000c 	.word	0x2000000c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000400 	.word	0x20000400

08000f48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	609a      	str	r2, [r3, #8]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	609a      	str	r2, [r3, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3360      	adds	r3, #96	; 0x60
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LL_ADC_SetOffset+0x44>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	03fff000 	.word	0x03fff000

08000ff8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3360      	adds	r3, #96	; 0x60
 8001006:	461a      	mov	r2, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3360      	adds	r3, #96	; 0x60
 8001034:	461a      	mov	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	431a      	orrs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800105a:	b480      	push	{r7}
 800105c:	b087      	sub	sp, #28
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3360      	adds	r3, #96	; 0x60
 800106a:	461a      	mov	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3360      	adds	r3, #96	; 0x60
 80010a0:	461a      	mov	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	615a      	str	r2, [r3, #20]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001112:	b480      	push	{r7}
 8001114:	b087      	sub	sp, #28
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3330      	adds	r3, #48	; 0x30
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	4413      	add	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f003 031f 	and.w	r3, r3, #31
 800113c:	211f      	movs	r1, #31
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	0e9b      	lsrs	r3, r3, #26
 800114a:	f003 011f 	and.w	r1, r3, #31
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	431a      	orrs	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800115e:	bf00      	nop
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800116a:	b480      	push	{r7}
 800116c:	b087      	sub	sp, #28
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3314      	adds	r3, #20
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	0e5b      	lsrs	r3, r3, #25
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	0d1b      	lsrs	r3, r3, #20
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2107      	movs	r1, #7
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	0d1b      	lsrs	r3, r3, #20
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	431a      	orrs	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011b4:	bf00      	nop
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0318 	and.w	r3, r3, #24
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011e4:	40d9      	lsrs	r1, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	400b      	ands	r3, r1
 80011ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ee:	431a      	orrs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	0007ffff 	.word	0x0007ffff

08001208 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 031f 	and.w	r3, r3, #31
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6093      	str	r3, [r2, #8]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125c:	d101      	bne.n	8001262 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <LL_ADC_IsEnabled+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_ADC_IsEnabled+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800131e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001322:	f043 0204 	orr.w	r2, r3, #4
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b04      	cmp	r3, #4
 8001348:	d101      	bne.n	800134e <LL_ADC_REG_IsConversionOngoing+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b08      	cmp	r3, #8
 800136e:	d101      	bne.n	8001374 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1a9      	b.n	80016f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fc05 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff3f 	bl	8001248 <LL_ADC_IsDeepPowerDownEnabled>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff25 	bl	8001224 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff5a 	bl	8001298 <LL_ADC_IsInternalRegulatorEnabled>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff3e 	bl	8001270 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f4:	4b9c      	ldr	r3, [pc, #624]	; (8001668 <HAL_ADC_Init+0x2e4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	4a9c      	ldr	r2, [pc, #624]	; (800166c <HAL_ADC_Init+0x2e8>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	3301      	adds	r3, #1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001408:	e002      	b.n	8001410 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3b01      	subs	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff3c 	bl	8001298 <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10d      	bne.n	8001442 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	f043 0210 	orr.w	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff75 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 800144c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8142 	bne.w	80016e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 813e 	bne.w	80016e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff35 	bl	80012e8 <LL_ADC_IsEnabled>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d141      	bne.n	8001508 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800148c:	d004      	beq.n	8001498 <HAL_ADC_Init+0x114>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a77      	ldr	r2, [pc, #476]	; (8001670 <HAL_ADC_Init+0x2ec>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d10f      	bne.n	80014b8 <HAL_ADC_Init+0x134>
 8001498:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800149c:	f7ff ff24 	bl	80012e8 <LL_ADC_IsEnabled>
 80014a0:	4604      	mov	r4, r0
 80014a2:	4873      	ldr	r0, [pc, #460]	; (8001670 <HAL_ADC_Init+0x2ec>)
 80014a4:	f7ff ff20 	bl	80012e8 <LL_ADC_IsEnabled>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4323      	orrs	r3, r4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e012      	b.n	80014de <HAL_ADC_Init+0x15a>
 80014b8:	486e      	ldr	r0, [pc, #440]	; (8001674 <HAL_ADC_Init+0x2f0>)
 80014ba:	f7ff ff15 	bl	80012e8 <LL_ADC_IsEnabled>
 80014be:	4604      	mov	r4, r0
 80014c0:	486d      	ldr	r0, [pc, #436]	; (8001678 <HAL_ADC_Init+0x2f4>)
 80014c2:	f7ff ff11 	bl	80012e8 <LL_ADC_IsEnabled>
 80014c6:	4603      	mov	r3, r0
 80014c8:	431c      	orrs	r4, r3
 80014ca:	486c      	ldr	r0, [pc, #432]	; (800167c <HAL_ADC_Init+0x2f8>)
 80014cc:	f7ff ff0c 	bl	80012e8 <LL_ADC_IsEnabled>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4323      	orrs	r3, r4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ea:	d004      	beq.n	80014f6 <HAL_ADC_Init+0x172>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_ADC_Init+0x2ec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x176>
 80014f6:	4a62      	ldr	r2, [pc, #392]	; (8001680 <HAL_ADC_Init+0x2fc>)
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Init+0x178>
 80014fa:	4a62      	ldr	r2, [pc, #392]	; (8001684 <HAL_ADC_Init+0x300>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fd20 	bl	8000f48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001512:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001518:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800151e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001526:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001532:	2b01      	cmp	r3, #1
 8001534:	d106      	bne.n	8001544 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	3b01      	subs	r3, #1
 800153c:	045b      	lsls	r3, r3, #17
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	4b48      	ldr	r3, [pc, #288]	; (8001688 <HAL_ADC_Init+0x304>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	430b      	orrs	r3, r1
 8001572:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fee4 	bl	800135c <LL_ADC_INJ_IsConversionOngoing>
 8001594:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d17f      	bne.n	800169c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d17c      	bne.n	800169c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015be:	f023 0302 	bic.w	r3, r3, #2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	69b9      	ldr	r1, [r7, #24]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d017      	beq.n	8001604 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6911      	ldr	r1, [r2, #16]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001602:	e013      	b.n	800162c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12a      	bne.n	800168c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800164c:	4311      	orrs	r1, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001658:	430a      	orrs	r2, r1
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	e019      	b.n	800169c <HAL_ADC_Init+0x318>
 8001668:	20000004 	.word	0x20000004
 800166c:	053e2d63 	.word	0x053e2d63
 8001670:	50000100 	.word	0x50000100
 8001674:	50000400 	.word	0x50000400
 8001678:	50000500 	.word	0x50000500
 800167c:	50000600 	.word	0x50000600
 8001680:	50000300 	.word	0x50000300
 8001684:	50000700 	.word	0x50000700
 8001688:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10c      	bne.n	80016be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f023 010f 	bic.w	r1, r3, #15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
 80016bc:	e007      	b.n	80016ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020f 	bic.w	r2, r2, #15
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	f023 0303 	bic.w	r3, r3, #3
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016de:	e007      	b.n	80016f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop

080016fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001710:	d004      	beq.n	800171c <HAL_ADC_Start_DMA+0x20>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_ADC_Start_DMA+0x184>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_ADC_Start_DMA+0x24>
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_ADC_Start_DMA+0x188>)
 800171e:	e000      	b.n	8001722 <HAL_ADC_Start_DMA+0x26>
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_ADC_Start_DMA+0x18c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd70 	bl	8001208 <LL_ADC_GetMultimode>
 8001728:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe01 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 809b 	bne.w	8001872 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_ADC_Start_DMA+0x4e>
 8001746:	2302      	movs	r3, #2
 8001748:	e096      	b.n	8001878 <HAL_ADC_Start_DMA+0x17c>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4d      	ldr	r2, [pc, #308]	; (800188c <HAL_ADC_Start_DMA+0x190>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d008      	beq.n	800176e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d002      	beq.n	800176e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d17a      	bne.n	8001864 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fcf6 	bl	8002160 <ADC_Enable>
 8001774:	4603      	mov	r3, r0
 8001776:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d16d      	bne.n	800185a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <HAL_ADC_Start_DMA+0x184>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_ADC_Start_DMA+0xb4>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_ADC_Start_DMA+0x194>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d002      	beq.n	80017ac <HAL_ADC_Start_DMA+0xb0>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_Start_DMA+0xb8>
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_ADC_Start_DMA+0x198>)
 80017ae:	e001      	b.n	80017b4 <HAL_ADC_Start_DMA+0xb8>
 80017b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f023 0206 	bic.w	r2, r3, #6
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	661a      	str	r2, [r3, #96]	; 0x60
 80017e6:	e002      	b.n	80017ee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	4a29      	ldr	r2, [pc, #164]	; (8001898 <HAL_ADC_Start_DMA+0x19c>)
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_ADC_Start_DMA+0x1a0>)
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_ADC_Start_DMA+0x1a4>)
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	221c      	movs	r2, #28
 800180c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0210 	orr.w	r2, r2, #16
 8001824:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	4619      	mov	r1, r3
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f001 f89b 	bl	8002980 <HAL_DMA_Start_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fd5b 	bl	800130e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001858:	e00d      	b.n	8001876 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001862:	e008      	b.n	8001876 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001870:	e001      	b.n	8001876 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	50000100 	.word	0x50000100
 8001884:	50000300 	.word	0x50000300
 8001888:	50000700 	.word	0x50000700
 800188c:	50000600 	.word	0x50000600
 8001890:	50000500 	.word	0x50000500
 8001894:	50000400 	.word	0x50000400
 8001898:	0800228d 	.word	0x0800228d
 800189c:	08002365 	.word	0x08002365
 80018a0:	08002381 	.word	0x08002381

080018a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b6      	sub	sp, #216	; 0xd8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x24>
 80018fe:	2302      	movs	r3, #2
 8001900:	f000 bc13 	b.w	800212a <HAL_ADC_ConfigChannel+0x84a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fd10 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 83f3 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	f7ff fbf1 	bl	8001112 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fcfe 	bl	8001336 <LL_ADC_REG_IsConversionOngoing>
 800193a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fd0a 	bl	800135c <LL_ADC_INJ_IsConversionOngoing>
 8001948:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 81d9 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 81d4 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001968:	d10f      	bne.n	800198a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff fbf8 	bl	800116a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fb9f 	bl	80010c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001988:	e00e      	b.n	80019a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	461a      	mov	r2, r3
 8001998:	f7ff fbe7 	bl	800116a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb8f 	bl	80010c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	08db      	lsrs	r3, r3, #3
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d022      	beq.n	8001a10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019da:	f7ff fae9 	bl	8000fb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f7ff fb35 	bl	800105a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x126>
 8001a00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x128>
 8001a06:	2300      	movs	r3, #0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f7ff fb41 	bl	8001090 <LL_ADC_SetOffsetSaturation>
 8001a0e:	e17b      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff faee 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x15c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fae3 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	0e9b      	lsrs	r3, r3, #26
 8001a36:	f003 021f 	and.w	r2, r3, #31
 8001a3a:	e01e      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x19a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fad8 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	e004      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x1b2>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	e018      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1e4>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e004      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff faa7 	bl	8001024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fa8b 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10a      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x222>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fa80 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	e01e      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x260>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa75 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b30:	2320      	movs	r3, #32
 8001b32:	e004      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x278>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	e018      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x2aa>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e004      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa44 	bl	8001024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fa28 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x2e8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa1d 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 021f 	and.w	r2, r3, #31
 8001bc6:	e01e      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x326>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa12 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e004      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x33e>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e9b      	lsrs	r3, r3, #26
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	e016      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x36c>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	e004      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	2102      	movs	r1, #2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f9e3 	bl	8001024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2103      	movs	r1, #3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f9c7 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x3aa>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2103      	movs	r1, #3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f9bc 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	e017      	b.n	8001cba <HAL_ADC_ConfigChannel+0x3da>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2103      	movs	r1, #3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f9b1 	bl	8000ff8 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x3f2>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	e011      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x416>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e003      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2103      	movs	r1, #3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f98e 	bl	8001024 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff faeb 	bl	80012e8 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 813d 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff fa4a 	bl	80011c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4aa2      	ldr	r2, [pc, #648]	; (8001fbc <HAL_ADC_ConfigChannel+0x6dc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 812e 	bne.w	8001f94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x480>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e019      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x4b4>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	bf94      	ite	ls
 8001d8e:	2301      	movls	r3, #1
 8001d90:	2300      	movhi	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d079      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x4d4>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	3301      	adds	r3, #1
 8001dac:	069b      	lsls	r3, r3, #26
 8001dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db2:	e015      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x500>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	e003      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	069b      	lsls	r3, r3, #26
 8001ddc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x520>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	3301      	adds	r3, #1
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	e017      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x550>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e003      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	ea42 0103 	orr.w	r1, r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x576>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	051b      	lsls	r3, r3, #20
 8001e54:	e018      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x5a8>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	e07e      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x5c8>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	069b      	lsls	r3, r3, #26
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	e015      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x5f4>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e003      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	069b      	lsls	r3, r3, #26
 8001ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x614>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	e017      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x644>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	61fb      	str	r3, [r7, #28]
  return result;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x670>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	e01b      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x6a8>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	613b      	str	r3, [r7, #16]
  return result;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b1e      	subs	r3, #30
 8001f82:	051b      	lsls	r3, r3, #20
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7ff f8eb 	bl	800116a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_ADC_ConfigChannel+0x6e0>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80be 	beq.w	800211e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x6d6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_ADC_ConfigChannel+0x6e4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10a      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x6ec>
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fb8:	e009      	b.n	8001fce <HAL_ADC_ConfigChannel+0x6ee>
 8001fba:	bf00      	nop
 8001fbc:	407f0000 	.word	0x407f0000
 8001fc0:	80080000 	.word	0x80080000
 8001fc4:	50000100 	.word	0x50000100
 8001fc8:	50000300 	.word	0x50000300
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_ADC_ConfigChannel+0x854>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe ffe0 	bl	8000f94 <LL_ADC_GetCommonPathInternalCh>
 8001fd4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a56      	ldr	r2, [pc, #344]	; (8002138 <HAL_ADC_ConfigChannel+0x858>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x70c>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_ADC_ConfigChannel+0x85c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d13a      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d134      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002000:	d005      	beq.n	800200e <HAL_ADC_ConfigChannel+0x72e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_ADC_ConfigChannel+0x860>)
 8002008:	4293      	cmp	r3, r2
 800200a:	f040 8085 	bne.w	8002118 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002016:	d004      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x742>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_ADC_ConfigChannel+0x864>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x746>
 8002022:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_ADC_ConfigChannel+0x868>)
 8002024:	e000      	b.n	8002028 <HAL_ADC_ConfigChannel+0x748>
 8002026:	4a43      	ldr	r2, [pc, #268]	; (8002134 <HAL_ADC_ConfigChannel+0x854>)
 8002028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f7fe ff9b 	bl	8000f6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_ADC_ConfigChannel+0x86c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_ADC_ConfigChannel+0x870>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002052:	e002      	b.n	800205a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3b01      	subs	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002060:	e05a      	b.n	8002118 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a3b      	ldr	r2, [pc, #236]	; (8002154 <HAL_ADC_ConfigChannel+0x874>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d125      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800206c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11f      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a31      	ldr	r2, [pc, #196]	; (8002144 <HAL_ADC_ConfigChannel+0x864>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d104      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7ac>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_ADC_ConfigChannel+0x878>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d047      	beq.n	800211c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002094:	d004      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x7c0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <HAL_ADC_ConfigChannel+0x864>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x7c4>
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_ADC_ConfigChannel+0x868>)
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x7c6>
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_ADC_ConfigChannel+0x854>)
 80020a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7fe ff5c 	bl	8000f6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b6:	e031      	b.n	800211c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_ADC_ConfigChannel+0x87c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12d      	bne.n	800211e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d127      	bne.n	800211e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x864>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e0:	d004      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x80c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_ADC_ConfigChannel+0x864>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x810>
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_ADC_ConfigChannel+0x868>)
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x812>
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_ADC_ConfigChannel+0x854>)
 80020f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe ff36 	bl	8000f6e <LL_ADC_SetCommonPathInternalCh>
 8002102:	e00c      	b.n	800211e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002116:	e002      	b.n	800211e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002118:	bf00      	nop
 800211a:	e000      	b.n	800211e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800211c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002126:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800212a:	4618      	mov	r0, r3
 800212c:	37d8      	adds	r7, #216	; 0xd8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	50000700 	.word	0x50000700
 8002138:	c3210000 	.word	0xc3210000
 800213c:	90c00010 	.word	0x90c00010
 8002140:	50000600 	.word	0x50000600
 8002144:	50000100 	.word	0x50000100
 8002148:	50000300 	.word	0x50000300
 800214c:	20000004 	.word	0x20000004
 8002150:	053e2d63 	.word	0x053e2d63
 8002154:	c7520000 	.word	0xc7520000
 8002158:	50000500 	.word	0x50000500
 800215c:	cb840000 	.word	0xcb840000

08002160 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8b9 	bl	80012e8 <LL_ADC_IsEnabled>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d176      	bne.n	800226a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <ADC_Enable+0x114>)
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e062      	b.n	800226c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f888 	bl	80012c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d004      	beq.n	80021c4 <ADC_Enable+0x64>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2e      	ldr	r2, [pc, #184]	; (8002278 <ADC_Enable+0x118>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <ADC_Enable+0x68>
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <ADC_Enable+0x11c>)
 80021c6:	e000      	b.n	80021ca <ADC_Enable+0x6a>
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <ADC_Enable+0x120>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee2 	bl	8000f94 <LL_ADC_GetCommonPathInternalCh>
 80021d0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d013      	beq.n	8002202 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <ADC_Enable+0x124>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <ADC_Enable+0x128>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021f4:	e002      	b.n	80021fc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002202:	f7fe fe95 	bl	8000f30 <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002208:	e028      	b.n	800225c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f86a 	bl	80012e8 <LL_ADC_IsEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f84e 	bl	80012c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002224:	f7fe fe84 	bl	8000f30 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d914      	bls.n	800225c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00d      	beq.n	800225c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	f043 0210 	orr.w	r2, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e007      	b.n	800226c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d1cf      	bne.n	800220a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	8000003f 	.word	0x8000003f
 8002278:	50000100 	.word	0x50000100
 800227c:	50000300 	.word	0x50000300
 8002280:	50000700 	.word	0x50000700
 8002284:	20000004 	.word	0x20000004
 8002288:	053e2d63 	.word	0x053e2d63

0800228c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d14b      	bne.n	800233e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe ff11 	bl	80010ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d032      	beq.n	8002336 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12b      	bne.n	8002336 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d11f      	bne.n	8002336 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
 8002302:	e018      	b.n	8002336 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d111      	bne.n	8002336 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff fab4 	bl	80018a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800233c:	e00e      	b.n	800235c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff fabe 	bl	80018cc <HAL_ADC_ErrorCallback>
}
 8002350:	e004      	b.n	800235c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff faa0 	bl	80018b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff fa90 	bl	80018cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <LL_ADC_IsEnabled>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <LL_ADC_IsEnabled+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_ADC_IsEnabled+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_ADC_REG_IsConversionOngoing>:
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d101      	bne.n	80023f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b0a1      	sub	sp, #132	; 0x84
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800241a:	2302      	movs	r3, #2
 800241c:	e0e7      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002426:	2300      	movs	r3, #0
 8002428:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800242a:	2300      	movs	r3, #0
 800242c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002436:	d102      	bne.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002438:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	e009      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6e      	ldr	r2, [pc, #440]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d102      	bne.n	800244e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002448:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	e001      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0be      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ffb1 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 8002478:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ffab 	bl	80023da <LL_ADC_REG_IsConversionOngoing>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80a0 	bne.w	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800248c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 809c 	bne.w	80025cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249c:	d004      	beq.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80024aa:	e000      	b.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80024ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d04b      	beq.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ca:	035b      	lsls	r3, r3, #13
 80024cc:	430b      	orrs	r3, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a45      	ldr	r2, [pc, #276]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80024e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024ec:	f7ff ff62 	bl	80023b4 <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	4841      	ldr	r0, [pc, #260]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024f4:	f7ff ff5e 	bl	80023b4 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e012      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002508:	483c      	ldr	r0, [pc, #240]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800250a:	f7ff ff53 	bl	80023b4 <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	483b      	ldr	r0, [pc, #236]	; (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002512:	f7ff ff4f 	bl	80023b4 <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	431c      	orrs	r4, r3
 800251a:	483c      	ldr	r0, [pc, #240]	; (800260c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800251c:	f7ff ff4a 	bl	80023b4 <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d056      	beq.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6811      	ldr	r1, [r2, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	430a      	orrs	r2, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800254e:	e047      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002564:	d004      	beq.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a23      	ldr	r2, [pc, #140]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10f      	bne.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002570:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002574:	f7ff ff1e 	bl	80023b4 <LL_ADC_IsEnabled>
 8002578:	4604      	mov	r4, r0
 800257a:	481f      	ldr	r0, [pc, #124]	; (80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800257c:	f7ff ff1a 	bl	80023b4 <LL_ADC_IsEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	4323      	orrs	r3, r4
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e012      	b.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002590:	481a      	ldr	r0, [pc, #104]	; (80025fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002592:	f7ff ff0f 	bl	80023b4 <LL_ADC_IsEnabled>
 8002596:	4604      	mov	r4, r0
 8002598:	4819      	ldr	r0, [pc, #100]	; (8002600 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800259a:	f7ff ff0b 	bl	80023b4 <LL_ADC_IsEnabled>
 800259e:	4603      	mov	r3, r0
 80025a0:	431c      	orrs	r4, r3
 80025a2:	481a      	ldr	r0, [pc, #104]	; (800260c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025a4:	f7ff ff06 	bl	80023b4 <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4323      	orrs	r3, r4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025c2:	f023 030f 	bic.w	r3, r3, #15
 80025c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025ca:	e009      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025de:	e000      	b.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3784      	adds	r7, #132	; 0x84
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	50000100 	.word	0x50000100
 80025fc:	50000400 	.word	0x50000400
 8002600:	50000500 	.word	0x50000500
 8002604:	50000300 	.word	0x50000300
 8002608:	50000700 	.word	0x50000700
 800260c:	50000600 	.word	0x50000600

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff29 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff40 	bl	8002658 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff90 	bl	8002704 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5f 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff33 	bl	8002674 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa4 	bl	800276c <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e08d      	b.n	800295e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_DMA_Init+0x138>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d80f      	bhi.n	800286e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_DMA_Init+0x13c>)
 8002856:	4413      	add	r3, r2
 8002858:	4a45      	ldr	r2, [pc, #276]	; (8002970 <HAL_DMA_Init+0x140>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_DMA_Init+0x144>)
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
 800286c:	e00e      	b.n	800288c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_DMA_Init+0x148>)
 8002876:	4413      	add	r3, r2
 8002878:	4a3d      	ldr	r2, [pc, #244]	; (8002970 <HAL_DMA_Init+0x140>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	009a      	lsls	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_DMA_Init+0x14c>)
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f9b6 	bl	8002c50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ec:	d102      	bne.n	80028f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002908:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d010      	beq.n	8002934 <HAL_DMA_Init+0x104>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d80c      	bhi.n	8002934 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9d6 	bl	8002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	e008      	b.n	8002946 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40020407 	.word	0x40020407
 800296c:	bffdfff8 	.word	0xbffdfff8
 8002970:	cccccccd 	.word	0xcccccccd
 8002974:	40020000 	.word	0x40020000
 8002978:	bffdfbf8 	.word	0xbffdfbf8
 800297c:	40020400 	.word	0x40020400

08002980 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Start_IT+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e066      	b.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d155      	bne.n	8002a60 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f8fb 	bl	8002bd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 020e 	orr.w	r2, r2, #14
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e00f      	b.n	8002a18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0204 	bic.w	r2, r2, #4
 8002a06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 020a 	orr.w	r2, r2, #10
 8002a16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a34:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e005      	b.n	8002a6c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2204      	movs	r2, #4
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d026      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x7a>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d021      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d107      	bne.n	8002aca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0204 	bic.w	r2, r2, #4
 8002ac8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d071      	beq.n	8002bca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002aee:	e06c      	b.n	8002bca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2202      	movs	r2, #2
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d02e      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d029      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020a 	bic.w	r2, r2, #10
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2102      	movs	r1, #2
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d038      	beq.n	8002bca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b60:	e033      	b.n	8002bca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d02a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d025      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 020e 	bic.w	r2, r2, #14
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
}
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bfc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d108      	bne.n	8002c34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c32:	e007      	b.n	8002c44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d802      	bhi.n	8002c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e001      	b.n	8002c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c6c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3b08      	subs	r3, #8
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	009a      	lsls	r2, r3, #2
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40020407 	.word	0x40020407
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020820 	.word	0x40020820
 8002cc4:	cccccccd 	.word	0xcccccccd
 8002cc8:	40020880 	.word	0x40020880

08002ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	1000823f 	.word	0x1000823f
 8002d10:	40020940 	.word	0x40020940

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d22:	e15a      	b.n	8002fda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 814c 	beq.w	8002fd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d005      	beq.n	8002d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d130      	bne.n	8002db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0201 	and.w	r2, r3, #1
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d017      	beq.n	8002df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d123      	bne.n	8002e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	6939      	ldr	r1, [r7, #16]
 8002e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80a6 	beq.w	8002fd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_GPIO_Init+0x2e4>)
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ff8 <HAL_GPIO_Init+0x2e4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6613      	str	r3, [r2, #96]	; 0x60
 8002e94:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <HAL_GPIO_Init+0x2e4>)
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea0:	4a56      	ldr	r2, [pc, #344]	; (8002ffc <HAL_GPIO_Init+0x2e8>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eca:	d01f      	beq.n	8002f0c <HAL_GPIO_Init+0x1f8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_GPIO_Init+0x2ec>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d019      	beq.n	8002f08 <HAL_GPIO_Init+0x1f4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a4b      	ldr	r2, [pc, #300]	; (8003004 <HAL_GPIO_Init+0x2f0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_GPIO_Init+0x1f0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <HAL_GPIO_Init+0x2f4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00d      	beq.n	8002f00 <HAL_GPIO_Init+0x1ec>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a49      	ldr	r2, [pc, #292]	; (800300c <HAL_GPIO_Init+0x2f8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <HAL_GPIO_Init+0x1e8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a48      	ldr	r2, [pc, #288]	; (8003010 <HAL_GPIO_Init+0x2fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_GPIO_Init+0x1e4>
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	e00a      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002ef8:	2306      	movs	r3, #6
 8002efa:	e008      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e006      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e004      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e002      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_GPIO_Init+0x1fa>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	f002 0203 	and.w	r2, r2, #3
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	4093      	lsls	r3, r2
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1e:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_GPIO_Init+0x2e8>)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f50:	4a30      	ldr	r2, [pc, #192]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f7a:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f ae9d 	bne.w	8002d24 <HAL_GPIO_Init+0x10>
  }
}
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010000 	.word	0x40010000
 8003000:	48000400 	.word	0x48000400
 8003004:	48000800 	.word	0x48000800
 8003008:	48000c00 	.word	0x48000c00
 800300c:	48001000 	.word	0x48001000
 8003010:	48001400 	.word	0x48001400
 8003014:	40010400 	.word	0x40010400

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003034:	e002      	b.n	800303c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f806 	bl	8003078 <HAL_GPIO_EXTI_Callback>
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d141      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800309e:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d131      	bne.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030ac:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b2:	4a46      	ldr	r2, [pc, #280]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030bc:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c4:	4a41      	ldr	r2, [pc, #260]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030cc:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2232      	movs	r2, #50	; 0x32
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	4a3f      	ldr	r2, [pc, #252]	; (80031d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	0c9b      	lsrs	r3, r3, #18
 80030de:	3301      	adds	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e2:	e002      	b.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f6:	d102      	bne.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f2      	bne.n	80030e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d158      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e057      	b.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003110:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003116:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003120:	e04d      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003128:	d141      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d131      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003150:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2232      	movs	r2, #50	; 0x32
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316e:	e002      	b.n	8003176 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d112      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e011      	b.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ac:	e007      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40007000 	.word	0x40007000
 80031d0:	20000004 	.word	0x20000004
 80031d4:	431bde83 	.word	0x431bde83

080031d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e6:	6093      	str	r3, [r2, #8]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007000 	.word	0x40007000

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e2fe      	b.n	8003808 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d075      	beq.n	8003302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003216:	4b97      	ldr	r3, [pc, #604]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003220:	4b94      	ldr	r3, [pc, #592]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d102      	bne.n	8003236 <HAL_RCC_OscConfig+0x3e>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d002      	beq.n	800323c <HAL_RCC_OscConfig+0x44>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05b      	beq.n	8003300 <HAL_RCC_OscConfig+0x108>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d157      	bne.n	8003300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e2d9      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x74>
 800325e:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a84      	ldr	r2, [pc, #528]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x98>
 8003276:	4b7f      	ldr	r3, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7e      	ldr	r2, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b7c      	ldr	r3, [pc, #496]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7b      	ldr	r2, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a74      	ldr	r2, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd fe3e 	bl	8000f30 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fe3a 	bl	8000f30 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e29e      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ca:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xc0>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd fe2a 	bl	8000f30 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd fe26 	bl	8000f30 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e28a      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0xe8>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d075      	beq.n	80033fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0x136>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d002      	beq.n	8003334 <HAL_RCC_OscConfig+0x13c>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11f      	bne.n	8003374 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x154>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e25d      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	4946      	ldr	r1, [pc, #280]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003360:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_RCC_OscConfig+0x280>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fd97 	bl	8000e98 <HAL_InitTick>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e249      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3c      	ldr	r2, [pc, #240]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd fdd2 	bl	8000f30 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fdce 	bl	8000f30 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e232      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a2:	4b34      	ldr	r3, [pc, #208]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	492d      	ldr	r1, [pc, #180]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e01a      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fdae 	bl	8000f30 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fd fdaa 	bl	8000f30 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e20e      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1e0>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d041      	beq.n	800348a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01c      	beq.n	8003448 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fd fd87 	bl	8000f30 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd fd83 	bl	8000f30 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1e7      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ef      	beq.n	8003426 <HAL_RCC_OscConfig+0x22e>
 8003446:	e020      	b.n	800348a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <HAL_RCC_OscConfig+0x27c>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fd fd6a 	bl	8000f30 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345e:	e00d      	b.n	800347c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fd fd66 	bl	8000f30 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d906      	bls.n	800347c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1ca      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800347c:	4b8c      	ldr	r3, [pc, #560]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ea      	bne.n	8003460 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80a6 	beq.w	80035e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349c:	4b84      	ldr	r3, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x2b4>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x2b6>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a7e      	ldr	r2, [pc, #504]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4b79      	ldr	r3, [pc, #484]	; (80036b4 <HAL_RCC_OscConfig+0x4bc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x4bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x4bc>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fd fd23 	bl	8000f30 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fd fd1f 	bl	8000f30 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e183      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003500:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <HAL_RCC_OscConfig+0x4bc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d108      	bne.n	8003526 <HAL_RCC_OscConfig+0x32e>
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003524:	e024      	b.n	8003570 <HAL_RCC_OscConfig+0x378>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d110      	bne.n	8003550 <HAL_RCC_OscConfig+0x358>
 800352e:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	4a5e      	ldr	r2, [pc, #376]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353e:	4b5c      	ldr	r3, [pc, #368]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	4a5a      	ldr	r2, [pc, #360]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800354e:	e00f      	b.n	8003570 <HAL_RCC_OscConfig+0x378>
 8003550:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd fcda 	bl	8000f30 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd fcd6 	bl	8000f30 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e138      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ed      	beq.n	8003580 <HAL_RCC_OscConfig+0x388>
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fcc3 	bl	8000f30 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fcbf 	bl	8000f30 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e121      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ed      	bne.n	80035ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03c      	beq.n	800366a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01c      	beq.n	8003632 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd fc92 	bl	8000f30 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003610:	f7fd fc8e 	bl	8000f30 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0f2      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCC_OscConfig+0x418>
 8003630:	e01b      	b.n	800366a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003632:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fc75 	bl	8000f30 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fd fc71 	bl	8000f30 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0d5      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ef      	bne.n	800364a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80c9 	beq.w	8003806 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b0c      	cmp	r3, #12
 800367e:	f000 8083 	beq.w	8003788 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d15e      	bne.n	8003748 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fd fc4b 	bl	8000f30 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e00c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fd fc47 	bl	8000f30 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d905      	bls.n	80036b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ab      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	4b55      	ldr	r3, [pc, #340]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ec      	bne.n	800369e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c4:	4b52      	ldr	r3, [pc, #328]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b52      	ldr	r3, [pc, #328]	; (8003814 <HAL_RCC_OscConfig+0x61c>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6a11      	ldr	r1, [r2, #32]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036de:	0212      	lsls	r2, r2, #8
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e6:	0852      	lsrs	r2, r2, #1
 80036e8:	3a01      	subs	r2, #1
 80036ea:	0552      	lsls	r2, r2, #21
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036f2:	0852      	lsrs	r2, r2, #1
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0652      	lsls	r2, r2, #25
 80036f8:	4311      	orrs	r1, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036fe:	06d2      	lsls	r2, r2, #27
 8003700:	430a      	orrs	r2, r1
 8003702:	4943      	ldr	r1, [pc, #268]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 8003704:	4313      	orrs	r3, r2
 8003706:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a40      	ldr	r2, [pc, #256]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003712:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fc06 	bl	8000f30 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd fc02 	bl	8000f30 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e066      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x530>
 8003746:	e05e      	b.n	8003806 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a30      	ldr	r2, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800374e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd fbec 	bl	8000f30 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd fbe8 	bl	8000f30 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e04c      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376e:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800377a:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4924      	ldr	r1, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_OscConfig+0x620>)
 8003782:	4013      	ands	r3, r2
 8003784:	60cb      	str	r3, [r1, #12]
 8003786:	e03e      	b.n	8003806 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e039      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_RCC_OscConfig+0x618>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d12c      	bne.n	8003802 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	3b01      	subs	r3, #1
 80037b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d123      	bne.n	8003802 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11b      	bne.n	8003802 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d113      	bne.n	8003802 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	019f800c 	.word	0x019f800c
 8003818:	feeefffc 	.word	0xfeeefffc

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e11e      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b91      	ldr	r3, [pc, #580]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d910      	bls.n	8003864 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b8e      	ldr	r3, [pc, #568]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	498c      	ldr	r1, [pc, #560]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b8a      	ldr	r3, [pc, #552]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e106      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d073      	beq.n	8003958 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d129      	bne.n	80038cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b81      	ldr	r3, [pc, #516]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0f4      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003888:	f000 f966 	bl	8003b58 <RCC_GetSysClockFreqFromPLLSource>
 800388c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4a7c      	ldr	r2, [pc, #496]	; (8003a84 <HAL_RCC_ClockConfig+0x268>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d93f      	bls.n	8003916 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003896:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d033      	beq.n	8003916 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d12f      	bne.n	8003916 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038b6:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	4a70      	ldr	r2, [pc, #448]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e024      	b.n	8003916 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d4:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0c6      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e4:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0be      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038f4:	f000 f8ce 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4a61      	ldr	r2, [pc, #388]	; (8003a84 <HAL_RCC_ClockConfig+0x268>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d909      	bls.n	8003916 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	4a5d      	ldr	r2, [pc, #372]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 800390c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003910:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4957      	ldr	r1, [pc, #348]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd fb02 	bl	8000f30 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fafe 	bl	8000f30 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e095      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b4e      	ldr	r3, [pc, #312]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800397a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003990:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4936      	ldr	r1, [pc, #216]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
 80039aa:	e008      	b.n	80039be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d105      	bne.n	80039be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039b2:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d21d      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 020f 	bic.w	r2, r3, #15
 80039d4:	4929      	ldr	r1, [pc, #164]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039dc:	f7fd faa8 	bl	8000f30 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fd faa4 	bl	8000f30 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e03b      	b.n	8003a72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d1ed      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4917      	ldr	r1, [pc, #92]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490f      	ldr	r1, [pc, #60]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a46:	f000 f825 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490c      	ldr	r1, [pc, #48]	; (8003a88 <HAL_RCC_ClockConfig+0x26c>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_RCC_ClockConfig+0x270>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fa14 	bl	8000e98 <HAL_InitTick>
 8003a70:	4603      	mov	r3, r0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	40021000 	.word	0x40021000
 8003a84:	04c4b400 	.word	0x04c4b400
 8003a88:	08004ce4 	.word	0x08004ce4
 8003a8c:	20000004 	.word	0x20000004
 8003a90:	20000008 	.word	0x20000008

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d102      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e047      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e03e      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d136      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	0a12      	lsrs	r2, r2, #8
 8003af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	617b      	str	r3, [r7, #20]
      break;
 8003b00:	e00c      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	0a12      	lsrs	r2, r2, #8
 8003b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
      break;
 8003b1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0e5b      	lsrs	r3, r3, #25
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e001      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b3c:	693b      	ldr	r3, [r7, #16]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	016e3600 	.word	0x016e3600

08003b58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d10c      	bne.n	8003b96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b7c:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	0a12      	lsrs	r2, r2, #8
 8003b8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
    break;
 8003b94:	e00c      	b.n	8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	0a12      	lsrs	r2, r2, #8
 8003ba4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
    break;
 8003bae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0e5b      	lsrs	r3, r3, #25
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bca:	687b      	ldr	r3, [r7, #4]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	016e3600 	.word	0x016e3600
 8003be0:	00f42400 	.word	0x00f42400

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bec:	2300      	movs	r3, #0
 8003bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8098 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2e:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a39      	ldr	r2, [pc, #228]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd f979 	bl	8000f30 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c40:	e009      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fd f975 	bl	8000f30 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	74fb      	strb	r3, [r7, #19]
        break;
 8003c54:	e005      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ef      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d159      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c68:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01e      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d019      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c84:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd f935 	bl	8000f30 <HAL_GetTick>
 8003cc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc8:	e00b      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd f931 	bl	8000f30 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d902      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	74fb      	strb	r3, [r7, #19]
            break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ec      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d0c:	e008      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	74bb      	strb	r3, [r7, #18]
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d20:	7c7b      	ldrb	r3, [r7, #17]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4ba7      	ldr	r3, [pc, #668]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4aa6      	ldr	r2, [pc, #664]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3e:	4ba1      	ldr	r3, [pc, #644]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	499d      	ldr	r1, [pc, #628]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d60:	4b98      	ldr	r3, [pc, #608]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 020c 	bic.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4995      	ldr	r1, [pc, #596]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d82:	4b90      	ldr	r3, [pc, #576]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	498c      	ldr	r1, [pc, #560]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da4:	4b87      	ldr	r3, [pc, #540]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4984      	ldr	r1, [pc, #528]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc6:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	497b      	ldr	r1, [pc, #492]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de8:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4973      	ldr	r1, [pc, #460]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	496a      	ldr	r1, [pc, #424]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e2c:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4962      	ldr	r1, [pc, #392]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	4959      	ldr	r1, [pc, #356]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e70:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	4951      	ldr	r1, [pc, #324]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4948      	ldr	r1, [pc, #288]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4940      	ldr	r1, [pc, #256]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	4932      	ldr	r1, [pc, #200]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4924      	ldr	r1, [pc, #144]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	4916      	ldr	r1, [pc, #88]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d019      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4926      	ldr	r1, [pc, #152]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	4918      	ldr	r1, [pc, #96]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004036:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800406a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004070:	7cbb      	ldrb	r3, [r7, #18]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000

08004080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e049      	b.n	8004126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc fe24 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 fbac 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e04c      	b.n	80041e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_TIM_Base_Start+0xc0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d01d      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <HAL_TIM_Base_Start+0xc4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <HAL_TIM_Base_Start+0xc8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_TIM_Base_Start+0xcc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_TIM_Base_Start+0xd0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_TIM_Base_Start+0xd4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_TIM_Base_Start+0x70>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_TIM_Base_Start+0xd8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d115      	bne.n	80041cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_TIM_Base_Start+0xdc>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d015      	beq.n	80041de <HAL_TIM_Base_Start+0xae>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d011      	beq.n	80041de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ca:	e008      	b.n	80041de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e000      	b.n	80041e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40013400 	.word	0x40013400
 8004204:	40014000 	.word	0x40014000
 8004208:	40015000 	.word	0x40015000
 800420c:	00010007 	.word	0x00010007

08004210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e054      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d01d      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_TIM_Base_Start_IT+0xdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x80>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d115      	bne.n	80042bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_TIM_Base_Start_IT+0xec>)
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d015      	beq.n	80042ce <HAL_TIM_Base_Start_IT+0xbe>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d011      	beq.n	80042ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e008      	b.n	80042ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40013400 	.word	0x40013400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40015000 	.word	0x40015000
 80042fc:	00010007 	.word	0x00010007

08004300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0202 	mvn.w	r2, #2
 8004334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa48 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa3a 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa4b 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0204 	mvn.w	r2, #4
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa22 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa14 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa25 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0208 	mvn.w	r2, #8
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2204      	movs	r2, #4
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9fc 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9ee 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f9ff 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d020      	beq.n	8004448 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0210 	mvn.w	r2, #16
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2208      	movs	r2, #8
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9d6 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9c8 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f9d9 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fade 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fbb1 	bl	8004bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fba9 	bl	8004c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f993 	bl	8004808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00c      	beq.n	8004506 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0220 	mvn.w	r2, #32
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb71 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fb7d 	bl	8004c24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fb75 	bl	8004c38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fb6d 	bl	8004c4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00c      	beq.n	8004596 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fb65 	bl	8004c60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_ConfigClockSource+0x1c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0f6      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x20a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80045da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6f      	ldr	r2, [pc, #444]	; (80047b4 <HAL_TIM_ConfigClockSource+0x214>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f000 80c1 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 80045fc:	4a6d      	ldr	r2, [pc, #436]	; (80047b4 <HAL_TIM_ConfigClockSource+0x214>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f200 80c6 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004604:	4a6c      	ldr	r2, [pc, #432]	; (80047b8 <HAL_TIM_ConfigClockSource+0x218>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f000 80b9 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800460c:	4a6a      	ldr	r2, [pc, #424]	; (80047b8 <HAL_TIM_ConfigClockSource+0x218>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f200 80be 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004614:	4a69      	ldr	r2, [pc, #420]	; (80047bc <HAL_TIM_ConfigClockSource+0x21c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f000 80b1 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800461c:	4a67      	ldr	r2, [pc, #412]	; (80047bc <HAL_TIM_ConfigClockSource+0x21c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f200 80b6 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004624:	4a66      	ldr	r2, [pc, #408]	; (80047c0 <HAL_TIM_ConfigClockSource+0x220>)
 8004626:	4293      	cmp	r3, r2
 8004628:	f000 80a9 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800462c:	4a64      	ldr	r2, [pc, #400]	; (80047c0 <HAL_TIM_ConfigClockSource+0x220>)
 800462e:	4293      	cmp	r3, r2
 8004630:	f200 80ae 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004634:	4a63      	ldr	r2, [pc, #396]	; (80047c4 <HAL_TIM_ConfigClockSource+0x224>)
 8004636:	4293      	cmp	r3, r2
 8004638:	f000 80a1 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800463c:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <HAL_TIM_ConfigClockSource+0x224>)
 800463e:	4293      	cmp	r3, r2
 8004640:	f200 80a6 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004644:	4a60      	ldr	r2, [pc, #384]	; (80047c8 <HAL_TIM_ConfigClockSource+0x228>)
 8004646:	4293      	cmp	r3, r2
 8004648:	f000 8099 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800464c:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_TIM_ConfigClockSource+0x228>)
 800464e:	4293      	cmp	r3, r2
 8004650:	f200 809e 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004654:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004658:	f000 8091 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800465c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004660:	f200 8096 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004668:	f000 8089 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x1de>
 800466c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004670:	f200 808e 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d03e      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0x158>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467e:	f200 8087 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	f000 8086 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x1f6>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d87f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d01a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x12a>
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d87b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 8004698:	2b60      	cmp	r3, #96	; 0x60
 800469a:	d050      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x19e>
 800469c:	2b60      	cmp	r3, #96	; 0x60
 800469e:	d877      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d03c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x17e>
 80046a4:	2b50      	cmp	r3, #80	; 0x50
 80046a6:	d873      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d058      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x1be>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d86f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d064      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x1de>
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d86b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d060      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x1de>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d867      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x1de>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d05a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x1de>
 80046c8:	e062      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046da:	f000 f9cf 	bl	8004a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e04f      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	f000 f9b8 	bl	8004a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f92a 	bl	8004984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2150      	movs	r1, #80	; 0x50
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f983 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 800473c:	e02c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f949 	bl	80049e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2160      	movs	r1, #96	; 0x60
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f973 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 800475c:	e01c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f90a 	bl	8004984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f963 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 800477c:	e00c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 f95a 	bl	8004a42 <TIM_ITRx_SetConfig>
      break;
 800478e:	e003      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e000      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	00100070 	.word	0x00100070
 80047b8:	00100060 	.word	0x00100060
 80047bc:	00100050 	.word	0x00100050
 80047c0:	00100040 	.word	0x00100040
 80047c4:	00100030 	.word	0x00100030
 80047c8:	00100020 	.word	0x00100020

080047cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <TIM_Base_SetConfig+0x144>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d017      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d013      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a49      	ldr	r2, [pc, #292]	; (8004964 <TIM_Base_SetConfig+0x148>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a48      	ldr	r2, [pc, #288]	; (8004968 <TIM_Base_SetConfig+0x14c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a47      	ldr	r2, [pc, #284]	; (800496c <TIM_Base_SetConfig+0x150>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a46      	ldr	r2, [pc, #280]	; (8004970 <TIM_Base_SetConfig+0x154>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0x48>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a45      	ldr	r2, [pc, #276]	; (8004974 <TIM_Base_SetConfig+0x158>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a39      	ldr	r2, [pc, #228]	; (8004960 <TIM_Base_SetConfig+0x144>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d023      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d01f      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a36      	ldr	r2, [pc, #216]	; (8004964 <TIM_Base_SetConfig+0x148>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01b      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a35      	ldr	r2, [pc, #212]	; (8004968 <TIM_Base_SetConfig+0x14c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d017      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a34      	ldr	r2, [pc, #208]	; (800496c <TIM_Base_SetConfig+0x150>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <TIM_Base_SetConfig+0x154>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a33      	ldr	r2, [pc, #204]	; (8004978 <TIM_Base_SetConfig+0x15c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a32      	ldr	r2, [pc, #200]	; (800497c <TIM_Base_SetConfig+0x160>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a31      	ldr	r2, [pc, #196]	; (8004980 <TIM_Base_SetConfig+0x164>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0xaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2c      	ldr	r2, [pc, #176]	; (8004974 <TIM_Base_SetConfig+0x158>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <TIM_Base_SetConfig+0x144>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <TIM_Base_SetConfig+0x110>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <TIM_Base_SetConfig+0x154>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0x110>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <TIM_Base_SetConfig+0x15c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0x110>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a19      	ldr	r2, [pc, #100]	; (800497c <TIM_Base_SetConfig+0x160>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0x110>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <TIM_Base_SetConfig+0x164>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0x110>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <TIM_Base_SetConfig+0x158>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]
  }
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40015000 	.word	0x40015000
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800

08004984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 030a 	bic.w	r3, r3, #10
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b087      	sub	sp, #28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f023 0210 	bic.w	r2, r3, #16
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	031b      	lsls	r3, r3, #12
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f043 0307 	orr.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e074      	b.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d01d      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a15      	ldr	r2, [pc, #84]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10c      	bne.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40015000 	.word	0x40015000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <memset>:
 8004c74:	4402      	add	r2, r0
 8004c76:	4603      	mov	r3, r0
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <memset+0xa>
 8004c7c:	4770      	bx	lr
 8004c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c82:	e7f9      	b.n	8004c78 <memset+0x4>

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	; (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	; (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f000 f818 	bl	8004ccc <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08004cfc 	.word	0x08004cfc
 8004cc0:	08004cfc 	.word	0x08004cfc
 8004cc4:	08004cfc 	.word	0x08004cfc
 8004cc8:	08004d00 	.word	0x08004d00

08004ccc <_init>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_fini>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr
