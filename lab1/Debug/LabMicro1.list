
LabMicro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000000c  080049b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080049b8  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110fa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e4  00000000  00000000  00031179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d79  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d9e  00000000  00000000  00035451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001265c  00000000  00000000  0005c1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001085a8  00000000  00000000  0006e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004af8  00000000  00000000  00176df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800497c 	.word	0x0800497c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800497c 	.word	0x0800497c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc59 	bl	8000ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f834 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e6 	bl	80005f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f9b2 	bl	8000590 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f87a 	bl	8000324 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000230:	f000 f960 	bl	80004f4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000234:	f000 f910 	bl	8000458 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000238:	480e      	ldr	r0, [pc, #56]	; (8000274 <main+0x5c>)
 800023a:	f003 fe41 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_ADC_Start_DMA(&hadc1, poten, 300);
 800023e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <main+0x60>)
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <main+0x64>)
 8000246:	f001 f8b1 	bl	80013ac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 800024a:	480d      	ldr	r0, [pc, #52]	; (8000280 <main+0x68>)
 800024c:	f003 fdc8 	bl	8003de0 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0x5c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000256:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <main+0x6c>)
 8000258:	6013      	str	r3, [r2, #0]
	  rawtim3 = __HAL_TIM_GET_COUNTER(&htim3);
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x68>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000260:	b29a      	uxth	r2, r3
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x70>)
 8000264:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f000 fca3 	bl	8000bb4 <HAL_Delay>

	  Average();
 800026e:	f000 fa47 	bl	8000700 <Average>
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000272:	e7ed      	b.n	8000250 <main+0x38>
 8000274:	200000f4 	.word	0x200000f4
 8000278:	20000198 	.word	0x20000198
 800027c:	20000028 	.word	0x20000028
 8000280:	20000140 	.word	0x20000140
 8000284:	20000190 	.word	0x20000190
 8000288:	2000018c 	.word	0x2000018c

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b094      	sub	sp, #80	; 0x50
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2238      	movs	r2, #56	; 0x38
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f004 fb42 	bl	8004924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b2:	f002 fd45 	bl	8002d40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	2340      	movs	r3, #64	; 0x40
 80002c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002cc:	2304      	movs	r3, #4
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002d0:	234b      	movs	r3, #75	; 0x4b
 80002d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002dc:	2302      	movs	r3, #2
 80002de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fddf 	bl	8002ea8 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002f0:	f000 fa56 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2303      	movs	r3, #3
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2104      	movs	r1, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f003 f8dd 	bl	80034cc <HAL_RCC_ClockConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000318:	f000 fa42 	bl	80007a0 <Error_Handler>
  }
}
 800031c:	bf00      	nop
 800031e:	3750      	adds	r7, #80	; 0x50
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08c      	sub	sp, #48	; 0x30
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800032a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2220      	movs	r2, #32
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f004 faf1 	bl	8004924 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000342:	4b41      	ldr	r3, [pc, #260]	; (8000448 <MX_ADC1_Init+0x124>)
 8000344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800034a:	4b3f      	ldr	r3, [pc, #252]	; (8000448 <MX_ADC1_Init+0x124>)
 800034c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000352:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <MX_ADC1_Init+0x124>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <MX_ADC1_Init+0x124>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800035e:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <MX_ADC1_Init+0x124>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000364:	4b38      	ldr	r3, [pc, #224]	; (8000448 <MX_ADC1_Init+0x124>)
 8000366:	2201      	movs	r2, #1
 8000368:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036a:	4b37      	ldr	r3, [pc, #220]	; (8000448 <MX_ADC1_Init+0x124>)
 800036c:	2204      	movs	r2, #4
 800036e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000370:	4b35      	ldr	r3, [pc, #212]	; (8000448 <MX_ADC1_Init+0x124>)
 8000372:	2200      	movs	r2, #0
 8000374:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000376:	4b34      	ldr	r3, [pc, #208]	; (8000448 <MX_ADC1_Init+0x124>)
 8000378:	2200      	movs	r2, #0
 800037a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <MX_ADC1_Init+0x124>)
 800037e:	2203      	movs	r2, #3
 8000380:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000382:	4b31      	ldr	r3, [pc, #196]	; (8000448 <MX_ADC1_Init+0x124>)
 8000384:	2200      	movs	r2, #0
 8000386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_ADC1_Init+0x124>)
 800038c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000390:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000392:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_ADC1_Init+0x124>)
 8000394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000398:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_ADC1_Init+0x124>)
 800039c:	2201      	movs	r2, #1
 800039e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_ADC1_Init+0x124>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <MX_ADC1_Init+0x124>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b0:	4825      	ldr	r0, [pc, #148]	; (8000448 <MX_ADC1_Init+0x124>)
 80003b2:	f000 fe3f 	bl	8001034 <HAL_ADC_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80003bc:	f000 f9f0 	bl	80007a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c8:	4619      	mov	r1, r3
 80003ca:	481f      	ldr	r0, [pc, #124]	; (8000448 <MX_ADC1_Init+0x124>)
 80003cc:	f001 fe70 	bl	80020b0 <HAL_ADCEx_MultiModeConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80003d6:	f000 f9e3 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <MX_ADC1_Init+0x128>)
 80003dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003de:	2306      	movs	r3, #6
 80003e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e6:	237f      	movs	r3, #127	; 0x7f
 80003e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ea:	2304      	movs	r3, #4
 80003ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	4814      	ldr	r0, [pc, #80]	; (8000448 <MX_ADC1_Init+0x124>)
 80003f8:	f001 f8ca 	bl	8001590 <HAL_ADC_ConfigChannel>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000402:	f000 f9cd 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_ADC1_Init+0x12c>)
 8000408:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800040a:	230c      	movs	r3, #12
 800040c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	480d      	ldr	r0, [pc, #52]	; (8000448 <MX_ADC1_Init+0x124>)
 8000414:	f001 f8bc 	bl	8001590 <HAL_ADC_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800041e:	f000 f9bf 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_ADC1_Init+0x130>)
 8000424:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000426:	2312      	movs	r3, #18
 8000428:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4619      	mov	r1, r3
 800042e:	4806      	ldr	r0, [pc, #24]	; (8000448 <MX_ADC1_Init+0x124>)
 8000430:	f001 f8ae 	bl	8001590 <HAL_ADC_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800043a:	f000 f9b1 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	3730      	adds	r7, #48	; 0x30
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000028 	.word	0x20000028
 800044c:	04300002 	.word	0x04300002
 8000450:	08600004 	.word	0x08600004
 8000454:	3ef08000 	.word	0x3ef08000

08000458 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000480:	2295      	movs	r2, #149	; 0x95
 8000482:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <MX_TIM2_Init+0x98>)
 800048c:	f04f 32ff 	mov.w	r2, #4294967295
 8000490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_TIM2_Init+0x98>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_TIM2_Init+0x98>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800049e:	4814      	ldr	r0, [pc, #80]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004a0:	f003 fc46 	bl	8003d30 <HAL_TIM_Base_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004aa:	f000 f979 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004bc:	f003 fec8 	bl	8004250 <HAL_TIM_ConfigClockSource>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004c6:	f000 f96b 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4619      	mov	r1, r3
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <MX_TIM2_Init+0x98>)
 80004d8:	f004 f948 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004e2:	f000 f95d 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000f4 	.word	0x200000f4

080004f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_TIM3_Init+0x94>)
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <MX_TIM3_Init+0x98>)
 8000516:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14999;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_TIM3_Init+0x94>)
 800051a:	f643 2297 	movw	r2, #14999	; 0x3a97
 800051e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_TIM3_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_TIM3_Init+0x94>)
 8000528:	2209      	movs	r2, #9
 800052a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_TIM3_Init+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_TIM3_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000538:	4813      	ldr	r0, [pc, #76]	; (8000588 <MX_TIM3_Init+0x94>)
 800053a:	f003 fbf9 	bl	8003d30 <HAL_TIM_Base_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000544:	f000 f92c 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800054c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_TIM3_Init+0x94>)
 8000556:	f003 fe7b 	bl	8004250 <HAL_TIM_ConfigClockSource>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000560:	f000 f91e 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000564:	2320      	movs	r3, #32
 8000566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_TIM3_Init+0x94>)
 8000572:	f004 f8fb 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800057c:	f000 f910 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000140 	.word	0x20000140
 800058c:	40000400 	.word	0x40000400

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_DMA_Init+0x60>)
 8000598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <MX_DMA_Init+0x60>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6493      	str	r3, [r2, #72]	; 0x48
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_DMA_Init+0x60>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x60>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x60>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6493      	str	r3, [r2, #72]	; 0x48
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x60>)
 80005bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200b      	movs	r0, #11
 80005cc:	f001 ff53 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f001 ff6a 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	205e      	movs	r0, #94	; 0x5e
 80005dc:	f001 ff4b 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80005e0:	205e      	movs	r0, #94	; 0x5e
 80005e2:	f001 ff62 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <MX_GPIO_Init+0xd4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xd4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_GPIO_Init+0xd4>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f002 fb29 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <MX_GPIO_Init+0xd8>)
 800068e:	f002 f999 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	2320      	movs	r3, #32
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f002 f98a 	bl	80029c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f001 fede 	bl	8002476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ba:	2028      	movs	r0, #40	; 0x28
 80006bc:	f001 fef5 	bl	80024aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d104      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		roundtim2 = roundtim2 + 1;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006e8:	6013      	str	r3, [r2, #0]
	}
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	20000194 	.word	0x20000194

08000700 <Average>:

void Average(){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
	uint16_t sumPoten[3] = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	809a      	strh	r2, [r3, #4]
	for (int i = 0;i<297;i+3){
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e019      	b.n	8000748 <Average+0x48>
		sumPoten[0] = sumPoten[0]+poten[i];
 8000714:	88ba      	ldrh	r2, [r7, #4]
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <Average+0x8c>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800071e:	4413      	add	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	80bb      	strh	r3, [r7, #4]
		sumPoten[1] = sumPoten[1]+poten[i+1];
 8000724:	88fa      	ldrh	r2, [r7, #6]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	4918      	ldr	r1, [pc, #96]	; (800078c <Average+0x8c>)
 800072c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000730:	4413      	add	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	80fb      	strh	r3, [r7, #6]
		sumPoten[2] = sumPoten[2]+poten[i+2];
 8000736:	893a      	ldrh	r2, [r7, #8]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3302      	adds	r3, #2
 800073c:	4913      	ldr	r1, [pc, #76]	; (800078c <Average+0x8c>)
 800073e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000742:	4413      	add	r3, r2
 8000744:	b29b      	uxth	r3, r3
 8000746:	813b      	strh	r3, [r7, #8]
	for (int i = 0;i<297;i+3){
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800074e:	dde1      	ble.n	8000714 <Average+0x14>
	}
	avPoten1 = sumPoten[0]/100;
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <Average+0x90>)
 8000754:	fba2 2303 	umull	r2, r3, r2, r3
 8000758:	095b      	lsrs	r3, r3, #5
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <Average+0x94>)
 800075e:	801a      	strh	r2, [r3, #0]
	avPoten2 = sumPoten[1]/100;
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <Average+0x90>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	095b      	lsrs	r3, r3, #5
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <Average+0x98>)
 800076e:	801a      	strh	r2, [r3, #0]
	avPoten3 = sumPoten[2]/100;
 8000770:	893b      	ldrh	r3, [r7, #8]
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <Average+0x90>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	095b      	lsrs	r3, r3, #5
 800077a:	b29a      	uxth	r2, r3
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <Average+0x9c>)
 800077e:	801a      	strh	r2, [r3, #0]

}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000198 	.word	0x20000198
 8000790:	51eb851f 	.word	0x51eb851f
 8000794:	200003f0 	.word	0x200003f0
 8000798:	200003f2 	.word	0x200003f2
 800079c:	200003f4 	.word	0x200003f4

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007e2:	f002 fb51 	bl	8002e88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0a0      	sub	sp, #128	; 0x80
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	2254      	movs	r2, #84	; 0x54
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f885 	bl	8004924 <memset>
  if(hadc->Instance==ADC1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000822:	d177      	bne.n	8000914 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000828:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800082a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f82d 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000840:	f7ff ffae 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <HAL_ADC_MspInit+0x128>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a34      	ldr	r2, [pc, #208]	; (800091c <HAL_ADC_MspInit+0x128>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b32      	ldr	r3, [pc, #200]	; (800091c <HAL_ADC_MspInit+0x128>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <HAL_ADC_MspInit+0x128>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a2e      	ldr	r2, [pc, #184]	; (800091c <HAL_ADC_MspInit+0x128>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <HAL_ADC_MspInit+0x128>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_ADC_MspInit+0x128>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	4a28      	ldr	r2, [pc, #160]	; (800091c <HAL_ADC_MspInit+0x128>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <HAL_ADC_MspInit+0x128>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800088c:	2303      	movs	r3, #3
 800088e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f002 f88f 	bl	80029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a6:	2301      	movs	r3, #1
 80008a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008b6:	4619      	mov	r1, r3
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <HAL_ADC_MspInit+0x12c>)
 80008ba:	f002 f883 	bl	80029c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_ADC_MspInit+0x134>)
 80008c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008c6:	2205      	movs	r2, #5
 80008c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008ee:	2220      	movs	r2, #32
 80008f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_ADC_MspInit+0x130>)
 80008fa:	f001 fdf1 	bl	80024e0 <HAL_DMA_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000904:	f7ff ff4c 	bl	80007a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_ADC_MspInit+0x130>)
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_ADC_MspInit+0x130>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3780      	adds	r7, #128	; 0x80
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400
 8000924:	20000094 	.word	0x20000094
 8000928:	40020008 	.word	0x40020008

0800092c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800093c:	d114      	bne.n	8000968 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	201c      	movs	r0, #28
 800095c:	f001 fd8b 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000960:	201c      	movs	r0, #28
 8000962:	f001 fda2 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000966:	e018      	b.n	800099a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_TIM_Base_MspInit+0x7c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d113      	bne.n	800099a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_TIM_Base_MspInit+0x78>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	201d      	movs	r0, #29
 8000990:	f001 fd71 	bl	8002476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000994:	201d      	movs	r0, #29
 8000996:	f001 fd88 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40000400 	.word	0x40000400

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8be 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA1_Channel1_IRQHandler+0x10>)
 8000a06:	f001 fe8e 	bl	8002726 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000094 	.word	0x20000094

08000a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM2_IRQHandler+0x10>)
 8000a1a:	f003 fac9 	bl	8003fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000f4 	.word	0x200000f4

08000a28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM3_IRQHandler+0x10>)
 8000a2e:	f003 fabf 	bl	8003fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000140 	.word	0x20000140

08000a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a44:	f002 f958 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f003 ff41 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fbb1 	bl	8000218 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080049ac 	.word	0x080049ac
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	200003fc 	.word	0x200003fc

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>

08000ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f001 fcbf 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f80e 	bl	8000b04 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fe5a 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]

}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_InitTick+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d022      	beq.n	8000b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_InitTick+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fcca 	bl	80024c6 <HAL_SYSTICK_Config>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10f      	bne.n	8000b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d809      	bhi.n	8000b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	f001 fc96 	bl	8002476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0x70>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e004      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200003f8 	.word	0x200003f8
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200003f8 	.word	0x200003f8

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d004      	beq.n	8000bd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_Delay+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd8:	bf00      	nop
 8000bda:	f7ff ffdf 	bl	8000b9c <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d8f7      	bhi.n	8000bda <HAL_Delay+0x26>
  {
  }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	609a      	str	r2, [r3, #8]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	609a      	str	r2, [r3, #8]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3360      	adds	r3, #96	; 0x60
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LL_ADC_SetOffset+0x44>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	03fff000 	.word	0x03fff000

08000ca8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3360      	adds	r3, #96	; 0x60
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3360      	adds	r3, #96	; 0x60
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b087      	sub	sp, #28
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3360      	adds	r3, #96	; 0x60
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3360      	adds	r3, #96	; 0x60
 8000d50:	461a      	mov	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000d6a:	bf00      	nop
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	615a      	str	r2, [r3, #20]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b087      	sub	sp, #28
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3330      	adds	r3, #48	; 0x30
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	4413      	add	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	211f      	movs	r1, #31
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	401a      	ands	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0e9b      	lsrs	r3, r3, #26
 8000dfa:	f003 011f 	and.w	r1, r3, #31
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b087      	sub	sp, #28
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3314      	adds	r3, #20
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	0e5b      	lsrs	r3, r3, #25
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	0d1b      	lsrs	r3, r3, #20
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	2107      	movs	r1, #7
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	0d1b      	lsrs	r3, r3, #20
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0318 	and.w	r3, r3, #24
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e94:	40d9      	lsrs	r1, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	400b      	ands	r3, r1
 8000e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0007ffff 	.word	0x0007ffff

08000eb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6093      	str	r3, [r2, #8]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f0c:	d101      	bne.n	8000f12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f5c:	d101      	bne.n	8000f62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <LL_ADC_IsEnabled+0x18>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <LL_ADC_IsEnabled+0x1a>
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd2:	f043 0204 	orr.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d101      	bne.n	8000ffe <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b08      	cmp	r3, #8
 800101e:	d101      	bne.n	8001024 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e1a9      	b.n	80013a2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fbc9 	bl	80007f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff3f 	bl	8000ef8 <LL_ADC_IsDeepPowerDownEnabled>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff25 	bl	8000ed4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff5a 	bl	8000f48 <LL_ADC_IsInternalRegulatorEnabled>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d115      	bne.n	80010c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff3e 	bl	8000f20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a4:	4b9c      	ldr	r3, [pc, #624]	; (8001318 <HAL_ADC_Init+0x2e4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	099b      	lsrs	r3, r3, #6
 80010aa:	4a9c      	ldr	r2, [pc, #624]	; (800131c <HAL_ADC_Init+0x2e8>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	099b      	lsrs	r3, r3, #6
 80010b2:	3301      	adds	r3, #1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff3c 	bl	8000f48 <LL_ADC_IsInternalRegulatorEnabled>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff75 	bl	8000fe6 <LL_ADC_REG_IsConversionOngoing>
 80010fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8142 	bne.w	8001390 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 813e 	bne.w	8001390 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800111c:	f043 0202 	orr.w	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff35 	bl	8000f98 <LL_ADC_IsEnabled>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d141      	bne.n	80011b8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800113c:	d004      	beq.n	8001148 <HAL_ADC_Init+0x114>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a77      	ldr	r2, [pc, #476]	; (8001320 <HAL_ADC_Init+0x2ec>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d10f      	bne.n	8001168 <HAL_ADC_Init+0x134>
 8001148:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800114c:	f7ff ff24 	bl	8000f98 <LL_ADC_IsEnabled>
 8001150:	4604      	mov	r4, r0
 8001152:	4873      	ldr	r0, [pc, #460]	; (8001320 <HAL_ADC_Init+0x2ec>)
 8001154:	f7ff ff20 	bl	8000f98 <LL_ADC_IsEnabled>
 8001158:	4603      	mov	r3, r0
 800115a:	4323      	orrs	r3, r4
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	e012      	b.n	800118e <HAL_ADC_Init+0x15a>
 8001168:	486e      	ldr	r0, [pc, #440]	; (8001324 <HAL_ADC_Init+0x2f0>)
 800116a:	f7ff ff15 	bl	8000f98 <LL_ADC_IsEnabled>
 800116e:	4604      	mov	r4, r0
 8001170:	486d      	ldr	r0, [pc, #436]	; (8001328 <HAL_ADC_Init+0x2f4>)
 8001172:	f7ff ff11 	bl	8000f98 <LL_ADC_IsEnabled>
 8001176:	4603      	mov	r3, r0
 8001178:	431c      	orrs	r4, r3
 800117a:	486c      	ldr	r0, [pc, #432]	; (800132c <HAL_ADC_Init+0x2f8>)
 800117c:	f7ff ff0c 	bl	8000f98 <LL_ADC_IsEnabled>
 8001180:	4603      	mov	r3, r0
 8001182:	4323      	orrs	r3, r4
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d012      	beq.n	80011b8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119a:	d004      	beq.n	80011a6 <HAL_ADC_Init+0x172>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_ADC_Init+0x2ec>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_ADC_Init+0x176>
 80011a6:	4a62      	ldr	r2, [pc, #392]	; (8001330 <HAL_ADC_Init+0x2fc>)
 80011a8:	e000      	b.n	80011ac <HAL_ADC_Init+0x178>
 80011aa:	4a62      	ldr	r2, [pc, #392]	; (8001334 <HAL_ADC_Init+0x300>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f7ff fd20 	bl	8000bf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7f5b      	ldrb	r3, [r3, #29]
 80011bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d106      	bne.n	80011f4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	3b01      	subs	r3, #1
 80011ec:	045b      	lsls	r3, r3, #17
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d009      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	4b48      	ldr	r3, [pc, #288]	; (8001338 <HAL_ADC_Init+0x304>)
 8001218:	4013      	ands	r3, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	430b      	orrs	r3, r1
 8001222:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fee4 	bl	800100c <LL_ADC_INJ_IsConversionOngoing>
 8001244:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d17f      	bne.n	800134c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d17c      	bne.n	800134c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001256:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800125e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800126e:	f023 0302 	bic.w	r3, r3, #2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	430b      	orrs	r3, r1
 800127a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d017      	beq.n	80012b4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001292:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800129c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6911      	ldr	r1, [r2, #16]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80012b2:	e013      	b.n	80012dc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d12a      	bne.n	800133c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001302:	4311      	orrs	r1, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001308:	430a      	orrs	r2, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	e019      	b.n	800134c <HAL_ADC_Init+0x318>
 8001318:	20000000 	.word	0x20000000
 800131c:	053e2d63 	.word	0x053e2d63
 8001320:	50000100 	.word	0x50000100
 8001324:	50000400 	.word	0x50000400
 8001328:	50000500 	.word	0x50000500
 800132c:	50000600 	.word	0x50000600
 8001330:	50000300 	.word	0x50000300
 8001334:	50000700 	.word	0x50000700
 8001338:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10c      	bne.n	800136e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f023 010f 	bic.w	r1, r3, #15
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
 800136c:	e007      	b.n	800137e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 020f 	bic.w	r2, r2, #15
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c
 800138e:	e007      	b.n	80013a0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	bf00      	nop

080013ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c0:	d004      	beq.n	80013cc <HAL_ADC_Start_DMA+0x20>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5a      	ldr	r2, [pc, #360]	; (8001530 <HAL_ADC_Start_DMA+0x184>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_ADC_Start_DMA+0x24>
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_ADC_Start_DMA+0x188>)
 80013ce:	e000      	b.n	80013d2 <HAL_ADC_Start_DMA+0x26>
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_ADC_Start_DMA+0x18c>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd70 	bl	8000eb8 <LL_ADC_GetMultimode>
 80013d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe01 	bl	8000fe6 <LL_ADC_REG_IsConversionOngoing>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 809b 	bne.w	8001522 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Start_DMA+0x4e>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e096      	b.n	8001528 <HAL_ADC_Start_DMA+0x17c>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a4d      	ldr	r2, [pc, #308]	; (800153c <HAL_ADC_Start_DMA+0x190>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d008      	beq.n	800141e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d002      	beq.n	800141e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b09      	cmp	r3, #9
 800141c:	d17a      	bne.n	8001514 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fcf6 	bl	8001e10 <ADC_Enable>
 8001424:	4603      	mov	r3, r0
 8001426:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d16d      	bne.n	800150a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <HAL_ADC_Start_DMA+0x184>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d009      	beq.n	8001460 <HAL_ADC_Start_DMA+0xb4>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a3b      	ldr	r2, [pc, #236]	; (8001540 <HAL_ADC_Start_DMA+0x194>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d002      	beq.n	800145c <HAL_ADC_Start_DMA+0xb0>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e003      	b.n	8001464 <HAL_ADC_Start_DMA+0xb8>
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_ADC_Start_DMA+0x198>)
 800145e:	e001      	b.n	8001464 <HAL_ADC_Start_DMA+0xb8>
 8001460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	4293      	cmp	r3, r2
 800146a:	d002      	beq.n	8001472 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d105      	bne.n	800147e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	f023 0206 	bic.w	r2, r3, #6
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	661a      	str	r2, [r3, #96]	; 0x60
 8001496:	e002      	b.n	800149e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_ADC_Start_DMA+0x19c>)
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_ADC_Start_DMA+0x1a0>)
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_ADC_Start_DMA+0x1a4>)
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	221c      	movs	r2, #28
 80014bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0210 	orr.w	r2, r2, #16
 80014d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3340      	adds	r3, #64	; 0x40
 80014f0:	4619      	mov	r1, r3
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f001 f89b 	bl	8002630 <HAL_DMA_Start_IT>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd5b 	bl	8000fbe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001508:	e00d      	b.n	8001526 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001512:	e008      	b.n	8001526 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001520:	e001      	b.n	8001526 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001522:	2302      	movs	r3, #2
 8001524:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001526:	7dfb      	ldrb	r3, [r7, #23]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	50000100 	.word	0x50000100
 8001534:	50000300 	.word	0x50000300
 8001538:	50000700 	.word	0x50000700
 800153c:	50000600 	.word	0x50000600
 8001540:	50000500 	.word	0x50000500
 8001544:	50000400 	.word	0x50000400
 8001548:	08001f3d 	.word	0x08001f3d
 800154c:	08002015 	.word	0x08002015
 8001550:	08002031 	.word	0x08002031

08001554 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0b6      	sub	sp, #216	; 0xd8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x24>
 80015ae:	2302      	movs	r3, #2
 80015b0:	f000 bc13 	b.w	8001dda <HAL_ADC_ConfigChannel+0x84a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fd10 	bl	8000fe6 <LL_ADC_REG_IsConversionOngoing>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f040 83f3 	bne.w	8001db4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	f7ff fbf1 	bl	8000dc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fcfe 	bl	8000fe6 <LL_ADC_REG_IsConversionOngoing>
 80015ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fd0a 	bl	800100c <LL_ADC_INJ_IsConversionOngoing>
 80015f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001600:	2b00      	cmp	r3, #0
 8001602:	f040 81d9 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 81d4 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001618:	d10f      	bne.n	800163a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fbf8 	bl	8000e1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb9f 	bl	8000d76 <LL_ADC_SetSamplingTimeCommonConfig>
 8001638:	e00e      	b.n	8001658 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	461a      	mov	r2, r3
 8001648:	f7ff fbe7 	bl	8000e1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb8f 	bl	8000d76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b04      	cmp	r3, #4
 8001678:	d022      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6919      	ldr	r1, [r3, #16]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800168a:	f7ff fae9 	bl	8000c60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6919      	ldr	r1, [r3, #16]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	461a      	mov	r2, r3
 800169c:	f7ff fb35 	bl	8000d0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d102      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x126>
 80016b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x128>
 80016b6:	2300      	movs	r3, #0
 80016b8:	461a      	mov	r2, r3
 80016ba:	f7ff fb41 	bl	8000d40 <LL_ADC_SetOffsetSaturation>
 80016be:	e17b      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff faee 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x15c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fae3 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	f003 021f 	and.w	r2, r3, #31
 80016ea:	e01e      	b.n	800172a <HAL_ADC_ConfigChannel+0x19a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fad8 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800170a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800170e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e004      	b.n	8001728 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800171e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x1b2>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e9b      	lsrs	r3, r3, #26
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	e018      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1e4>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800175e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001766:	2320      	movs	r3, #32
 8001768:	e004      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800176a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800176e:	fab3 f383 	clz	r3, r3
 8001772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001774:	429a      	cmp	r2, r3
 8001776:	d106      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff faa7 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa8b 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10a      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x222>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa80 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	e01e      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x260>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2101      	movs	r1, #1
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fa75 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e004      	b.n	80017ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80017e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x278>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0e9b      	lsrs	r3, r3, #26
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	e018      	b.n	800183a <HAL_ADC_ConfigChannel+0x2aa>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800181c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800182c:	2320      	movs	r3, #32
 800182e:	e004      	b.n	800183a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa44 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2102      	movs	r1, #2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa28 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x2e8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2102      	movs	r1, #2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa1d 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 021f 	and.w	r2, r3, #31
 8001876:	e01e      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x326>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa12 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800189a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800189e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80018a6:	2320      	movs	r3, #32
 80018a8:	e004      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80018aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x33e>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	e016      	b.n	80018fc <HAL_ADC_ConfigChannel+0x36c>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e004      	b.n	80018fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80018f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d106      	bne.n	800190e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	2102      	movs	r1, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9e3 	bl	8000cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2103      	movs	r1, #3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f9c7 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_ADC_ConfigChannel+0x3aa>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2103      	movs	r1, #3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f9bc 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	e017      	b.n	800196a <HAL_ADC_ConfigChannel+0x3da>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2103      	movs	r1, #3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f9b1 	bl	8000ca8 <LL_ADC_GetOffsetChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001954:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e003      	b.n	8001968 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x3f2>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	0e9b      	lsrs	r3, r3, #26
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	e011      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x416>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001992:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800199a:	2320      	movs	r3, #32
 800199c:	e003      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	2103      	movs	r1, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f98e 	bl	8000cd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff faeb 	bl	8000f98 <LL_ADC_IsEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 813d 	bne.w	8001c44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f7ff fa4a 	bl	8000e70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4aa2      	ldr	r2, [pc, #648]	; (8001c6c <HAL_ADC_ConfigChannel+0x6dc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f040 812e 	bne.w	8001c44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10b      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x480>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	3301      	adds	r3, #1
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b09      	cmp	r3, #9
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e019      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x4b4>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	bf94      	ite	ls
 8001a3e:	2301      	movls	r3, #1
 8001a40:	2300      	movhi	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d079      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x4d4>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	069b      	lsls	r3, r3, #26
 8001a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a62:	e015      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x500>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e003      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	069b      	lsls	r3, r3, #26
 8001a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x520>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	e017      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x550>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	e003      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	ea42 0103 	orr.w	r1, r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10a      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x576>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	051b      	lsls	r3, r3, #20
 8001b04:	e018      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x5a8>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e003      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	e07e      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x5c8>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	3301      	adds	r3, #1
 8001b50:	069b      	lsls	r3, r3, #26
 8001b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b56:	e015      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x5f4>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x614>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	3301      	adds	r3, #1
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	e017      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x644>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	61fb      	str	r3, [r7, #28]
  return result;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e003      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	ea42 0103 	orr.w	r1, r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10d      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x670>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	3301      	adds	r3, #1
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b1e      	subs	r3, #30
 8001bf8:	051b      	lsls	r3, r3, #20
 8001bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	e01b      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x6a8>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	613b      	str	r3, [r7, #16]
  return result;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e003      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 021f 	and.w	r2, r3, #31
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b1e      	subs	r3, #30
 8001c32:	051b      	lsls	r3, r3, #20
 8001c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7ff f8eb 	bl	8000e1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_ADC_ConfigChannel+0x6e0>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80be 	beq.w	8001dce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x6d6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_ADC_ConfigChannel+0x6e4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10a      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x6ec>
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_ADC_ConfigChannel+0x6e8>)
 8001c68:	e009      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x6ee>
 8001c6a:	bf00      	nop
 8001c6c:	407f0000 	.word	0x407f0000
 8001c70:	80080000 	.word	0x80080000
 8001c74:	50000100 	.word	0x50000100
 8001c78:	50000300 	.word	0x50000300
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_ADC_ConfigChannel+0x854>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe ffe0 	bl	8000c44 <LL_ADC_GetCommonPathInternalCh>
 8001c84:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_ADC_ConfigChannel+0x858>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0x70c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a55      	ldr	r2, [pc, #340]	; (8001dec <HAL_ADC_ConfigChannel+0x85c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d134      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb0:	d005      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x72e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_ADC_ConfigChannel+0x860>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	f040 8085 	bne.w	8001dc8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc6:	d004      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x742>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a49      	ldr	r2, [pc, #292]	; (8001df4 <HAL_ADC_ConfigChannel+0x864>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x746>
 8001cd2:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_ADC_ConfigChannel+0x868>)
 8001cd4:	e000      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x748>
 8001cd6:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <HAL_ADC_ConfigChannel+0x854>)
 8001cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7fe ff9b 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_ADC_ConfigChannel+0x86c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <HAL_ADC_ConfigChannel+0x870>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d10:	e05a      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_ADC_ConfigChannel+0x874>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d125      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11f      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_ADC_ConfigChannel+0x864>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d104      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x7ac>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <HAL_ADC_ConfigChannel+0x878>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d047      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x7c0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <HAL_ADC_ConfigChannel+0x864>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x7c4>
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_ADC_ConfigChannel+0x868>)
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x7c6>
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_ADC_ConfigChannel+0x854>)
 8001d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f7fe ff5c 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d66:	e031      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_ADC_ConfigChannel+0x87c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12d      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d127      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_ADC_ConfigChannel+0x864>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_ConfigChannel+0x80c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_ADC_ConfigChannel+0x864>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x810>
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_ADC_ConfigChannel+0x868>)
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x812>
 8001da0:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_ADC_ConfigChannel+0x854>)
 8001da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7fe ff36 	bl	8000c1e <LL_ADC_SetCommonPathInternalCh>
 8001db2:	e00c      	b.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001dc6:	e002      	b.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001dd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	37d8      	adds	r7, #216	; 0xd8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	50000700 	.word	0x50000700
 8001de8:	c3210000 	.word	0xc3210000
 8001dec:	90c00010 	.word	0x90c00010
 8001df0:	50000600 	.word	0x50000600
 8001df4:	50000100 	.word	0x50000100
 8001df8:	50000300 	.word	0x50000300
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	053e2d63 	.word	0x053e2d63
 8001e04:	c7520000 	.word	0xc7520000
 8001e08:	50000500 	.word	0x50000500
 8001e0c:	cb840000 	.word	0xcb840000

08001e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f8b9 	bl	8000f98 <LL_ADC_IsEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d176      	bne.n	8001f1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <ADC_Enable+0x114>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e062      	b.n	8001f1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f888 	bl	8000f70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e68:	d004      	beq.n	8001e74 <ADC_Enable+0x64>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <ADC_Enable+0x118>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <ADC_Enable+0x68>
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <ADC_Enable+0x11c>)
 8001e76:	e000      	b.n	8001e7a <ADC_Enable+0x6a>
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <ADC_Enable+0x120>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fee2 	bl	8000c44 <LL_ADC_GetCommonPathInternalCh>
 8001e80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d013      	beq.n	8001eb2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <ADC_Enable+0x124>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <ADC_Enable+0x128>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	099b      	lsrs	r3, r3, #6
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ea4:	e002      	b.n	8001eac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f9      	bne.n	8001ea6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe fe73 	bl	8000b9c <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb8:	e028      	b.n	8001f0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f86a 	bl	8000f98 <LL_ADC_IsEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f84e 	bl	8000f70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed4:	f7fe fe62 	bl	8000b9c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d914      	bls.n	8001f0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d00d      	beq.n	8001f0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e007      	b.n	8001f1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d1cf      	bne.n	8001eba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	8000003f 	.word	0x8000003f
 8001f28:	50000100 	.word	0x50000100
 8001f2c:	50000300 	.word	0x50000300
 8001f30:	50000700 	.word	0x50000700
 8001f34:	20000000 	.word	0x20000000
 8001f38:	053e2d63 	.word	0x053e2d63

08001f3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d14b      	bne.n	8001fee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d021      	beq.n	8001fb4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe ff11 	bl	8000d9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d032      	beq.n	8001fe6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12b      	bne.n	8001fe6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11f      	bne.n	8001fe6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fb2:	e018      	b.n	8001fe6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d111      	bne.n	8001fe6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fab4 	bl	8001554 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fec:	e00e      	b.n	800200c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff fabe 	bl	800157c <HAL_ADC_ErrorCallback>
}
 8002000:	e004      	b.n	800200c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff faa0 	bl	8001568 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7ff fa90 	bl	800157c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <LL_ADC_IsEnabled>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <LL_ADC_IsEnabled+0x18>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <LL_ADC_IsEnabled+0x1a>
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_REG_IsConversionOngoing>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b04      	cmp	r3, #4
 800209c:	d101      	bne.n	80020a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b0a1      	sub	sp, #132	; 0x84
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0e7      	b.n	800229e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020d6:	2300      	movs	r3, #0
 80020d8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020da:	2300      	movs	r3, #0
 80020dc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e6:	d102      	bne.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020e8:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	e009      	b.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d102      	bne.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80020f8:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	e001      	b.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0be      	b.n	800229e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ffb1 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002128:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ffab 	bl	800208a <LL_ADC_REG_IsConversionOngoing>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80a0 	bne.w	800227c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800213c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 809c 	bne.w	800227c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800214c:	d004      	beq.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800215a:	e000      	b.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800215e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d04b      	beq.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800217a:	035b      	lsls	r3, r3, #13
 800217c:	430b      	orrs	r3, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002182:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218c:	d004      	beq.n	8002198 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10f      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002198:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800219c:	f7ff ff62 	bl	8002064 <LL_ADC_IsEnabled>
 80021a0:	4604      	mov	r4, r0
 80021a2:	4841      	ldr	r0, [pc, #260]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021a4:	f7ff ff5e 	bl	8002064 <LL_ADC_IsEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4323      	orrs	r3, r4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e012      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80021b8:	483c      	ldr	r0, [pc, #240]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021ba:	f7ff ff53 	bl	8002064 <LL_ADC_IsEnabled>
 80021be:	4604      	mov	r4, r0
 80021c0:	483b      	ldr	r0, [pc, #236]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021c2:	f7ff ff4f 	bl	8002064 <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	431c      	orrs	r4, r3
 80021ca:	483c      	ldr	r0, [pc, #240]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021cc:	f7ff ff4a 	bl	8002064 <LL_ADC_IsEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4323      	orrs	r3, r4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d056      	beq.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021ea:	f023 030f 	bic.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	6811      	ldr	r1, [r2, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6892      	ldr	r2, [r2, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021fe:	e047      	b.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002214:	d004      	beq.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d10f      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002220:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002224:	f7ff ff1e 	bl	8002064 <LL_ADC_IsEnabled>
 8002228:	4604      	mov	r4, r0
 800222a:	481f      	ldr	r0, [pc, #124]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800222c:	f7ff ff1a 	bl	8002064 <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	4323      	orrs	r3, r4
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e012      	b.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002240:	481a      	ldr	r0, [pc, #104]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002242:	f7ff ff0f 	bl	8002064 <LL_ADC_IsEnabled>
 8002246:	4604      	mov	r4, r0
 8002248:	4819      	ldr	r0, [pc, #100]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800224a:	f7ff ff0b 	bl	8002064 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	431c      	orrs	r4, r3
 8002252:	481a      	ldr	r0, [pc, #104]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002254:	f7ff ff06 	bl	8002064 <LL_ADC_IsEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	4323      	orrs	r3, r4
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002272:	f023 030f 	bic.w	r3, r3, #15
 8002276:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002278:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800227a:	e009      	b.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800228e:	e000      	b.n	8002292 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002290:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800229a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3784      	adds	r7, #132	; 0x84
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	50000100 	.word	0x50000100
 80022ac:	50000400 	.word	0x50000400
 80022b0:	50000500 	.word	0x50000500
 80022b4:	50000300 	.word	0x50000300
 80022b8:	50000700 	.word	0x50000700
 80022bc:	50000600 	.word	0x50000600

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43d9      	mvns	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	4313      	orrs	r3, r2
         );
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff8e 	bl	8002360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff29 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff40 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff90 	bl	80023b4 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5f 	bl	8002360 <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff33 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa4 	bl	800241c <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e08d      	b.n	800260e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_DMA_Init+0x138>)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d80f      	bhi.n	800251e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <HAL_DMA_Init+0x13c>)
 8002506:	4413      	add	r3, r2
 8002508:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_DMA_Init+0x140>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	009a      	lsls	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_DMA_Init+0x144>)
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
 800251c:	e00e      	b.n	800253c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_DMA_Init+0x148>)
 8002526:	4413      	add	r3, r2
 8002528:	4a3d      	ldr	r2, [pc, #244]	; (8002620 <HAL_DMA_Init+0x140>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	009a      	lsls	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a3c      	ldr	r2, [pc, #240]	; (800262c <HAL_DMA_Init+0x14c>)
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9b6 	bl	8002900 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800259c:	d102      	bne.n	80025a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <HAL_DMA_Init+0x104>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d80c      	bhi.n	80025e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9d6 	bl	800297c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	e008      	b.n	80025f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40020407 	.word	0x40020407
 800261c:	bffdfff8 	.word	0xbffdfff8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020000 	.word	0x40020000
 8002628:	bffdfbf8 	.word	0xbffdfbf8
 800262c:	40020400 	.word	0x40020400

08002630 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_DMA_Start_IT+0x20>
 800264c:	2302      	movs	r3, #2
 800264e:	e066      	b.n	800271e <HAL_DMA_Start_IT+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d155      	bne.n	8002710 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f8fb 	bl	8002884 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 020e 	orr.w	r2, r2, #14
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e00f      	b.n	80026c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 020a 	orr.w	r2, r2, #10
 80026c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e005      	b.n	800271c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002718:	2302      	movs	r3, #2
 800271a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800271c:	7dfb      	ldrb	r3, [r7, #23]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2204      	movs	r2, #4
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d026      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x7a>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d021      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 021f 	and.w	r2, r3, #31
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2104      	movs	r1, #4
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d071      	beq.n	800287a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800279e:	e06c      	b.n	800287a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2202      	movs	r2, #2
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02e      	beq.n	8002812 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d029      	beq.n	8002812 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020a 	bic.w	r2, r2, #10
 80027da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2102      	movs	r1, #2
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d038      	beq.n	800287a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002810:	e033      	b.n	800287a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	2208      	movs	r2, #8
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d02a      	beq.n	800287c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d025      	beq.n	800287c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 020e 	bic.w	r2, r2, #14
 800283e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800287a:	bf00      	nop
 800287c:	bf00      	nop
}
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800289a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d108      	bne.n	80028e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028e2:	e007      	b.n	80028f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002910:	429a      	cmp	r2, r3
 8002912:	d802      	bhi.n	800291a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e001      	b.n	800291e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800291c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3b08      	subs	r3, #8
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	009a      	lsls	r2, r3, #2
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800294a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2201      	movs	r2, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	651a      	str	r2, [r3, #80]	; 0x50
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40020407 	.word	0x40020407
 800296c:	40020800 	.word	0x40020800
 8002970:	40020820 	.word	0x40020820
 8002974:	cccccccd 	.word	0xcccccccd
 8002978:	40020880 	.word	0x40020880

0800297c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800299e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	1000823f 	.word	0x1000823f
 80029c0:	40020940 	.word	0x40020940

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029d2:	e15a      	b.n	8002c8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 814c 	beq.w	8002c84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d130      	bne.n	8002a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0201 	and.w	r2, r3, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d017      	beq.n	8002aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d123      	bne.n	8002af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a6 	beq.w	8002c84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b38:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_GPIO_Init+0x2e4>)
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_GPIO_Init+0x2e4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6613      	str	r3, [r2, #96]	; 0x60
 8002b44:	4b58      	ldr	r3, [pc, #352]	; (8002ca8 <HAL_GPIO_Init+0x2e4>)
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_GPIO_Init+0x2e8>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b7a:	d01f      	beq.n	8002bbc <HAL_GPIO_Init+0x1f8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_GPIO_Init+0x2ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d019      	beq.n	8002bb8 <HAL_GPIO_Init+0x1f4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_GPIO_Init+0x2f0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_GPIO_Init+0x1f0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_GPIO_Init+0x2f4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_GPIO_Init+0x1ec>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x2f8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_Init+0x1e8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_GPIO_Init+0x1e4>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e00a      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002ba8:	2306      	movs	r3, #6
 8002baa:	e008      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e006      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e004      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e002      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_GPIO_Init+0x1fa>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bce:	4937      	ldr	r1, [pc, #220]	; (8002cac <HAL_GPIO_Init+0x2e8>)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bdc:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c00:	4a30      	ldr	r2, [pc, #192]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7e:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f ae9d 	bne.w	80029d4 <HAL_GPIO_Init+0x10>
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	48000800 	.word	0x48000800
 8002cb8:	48000c00 	.word	0x48000c00
 8002cbc:	48001000 	.word	0x48001000
 8002cc0:	48001400 	.word	0x48001400
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f806 	bl	8002d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d141      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4e:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d131      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d62:	4a46      	ldr	r2, [pc, #280]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d74:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2232      	movs	r2, #50	; 0x32
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	4a3f      	ldr	r2, [pc, #252]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d92:	e002      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d102      	bne.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f2      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d158      	bne.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e057      	b.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc6:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dd0:	e04d      	b.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d141      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de6:	d131      	bne.n	8002e4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dee:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2232      	movs	r2, #50	; 0x32
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1e:	e002      	b.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d102      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f2      	bne.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d112      	bne.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e011      	b.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e5c:	e007      	b.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	20000000 	.word	0x20000000
 8002e84:	431bde83 	.word	0x431bde83

08002e88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e96:	6093      	str	r3, [r2, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e2fe      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b97      	ldr	r3, [pc, #604]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed0:	4b94      	ldr	r3, [pc, #592]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3e>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b8d      	ldr	r3, [pc, #564]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e2d9      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b85      	ldr	r3, [pc, #532]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a84      	ldr	r2, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fd fe1c 	bl	8000b9c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd fe18 	bl	8000b9c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e29e      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fd fe08 	bl	8000b9c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fd fe04 	bl	8000b9c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e28a      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa2:	4b60      	ldr	r3, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d075      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc8:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d102      	bne.n	8002fde <HAL_RCC_OscConfig+0x136>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x13c>
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11f      	bne.n	8003024 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x154>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e25d      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4946      	ldr	r1, [pc, #280]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_RCC_OscConfig+0x280>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fd75 	bl	8000b04 <HAL_InitTick>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d043      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e249      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd fdb0 	bl	8000b9c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd fdac 	bl	8000b9c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e232      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	492d      	ldr	r1, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 8003072:	e01a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 800307a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd fd8c 	bl	8000b9c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7fd fd88 	bl	8000b9c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e20e      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1e0>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d041      	beq.n	800313a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fd fd65 	bl	8000b9c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fd fd61 	bl	8000b9c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1e7      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ef      	beq.n	80030d6 <HAL_RCC_OscConfig+0x22e>
 80030f6:	e020      	b.n	800313a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x27c>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fd fd48 	bl	8000b9c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800310e:	e00d      	b.n	800312c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fd fd44 	bl	8000b9c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d906      	bls.n	800312c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ca      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800312c:	4b8c      	ldr	r3, [pc, #560]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ea      	bne.n	8003110 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80a6 	beq.w	8003294 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800314c:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_OscConfig+0x2b4>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x2b6>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x4bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x4bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4bc>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fd fd01 	bl	8000b9c <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fd fcfd 	bl	8000b9c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e183      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b0:	4b6c      	ldr	r3, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x4bc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_RCC_OscConfig+0x32e>
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d4:	e024      	b.n	8003220 <HAL_RCC_OscConfig+0x378>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d110      	bne.n	8003200 <HAL_RCC_OscConfig+0x358>
 80031de:	4b60      	ldr	r3, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	4a5e      	ldr	r2, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ee:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	4a5a      	ldr	r2, [pc, #360]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fe:	e00f      	b.n	8003220 <HAL_RCC_OscConfig+0x378>
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	4a52      	ldr	r2, [pc, #328]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d016      	beq.n	8003256 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fd fcb8 	bl	8000b9c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fd fcb4 	bl	8000b9c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e138      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	4b46      	ldr	r3, [pc, #280]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ed      	beq.n	8003230 <HAL_RCC_OscConfig+0x388>
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fd fca1 	bl	8000b9c <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fd fc9d 	bl	8000b9c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e121      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ed      	bne.n	800325e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03c      	beq.n	800331a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fd fc70 	bl	8000b9c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c0:	f7fd fc6c 	bl	8000b9c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0f2      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032d2:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ef      	beq.n	80032c0 <HAL_RCC_OscConfig+0x418>
 80032e0:	e01b      	b.n	800331a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd fc53 	bl	8000b9c <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032fa:	f7fd fc4f 	bl	8000b9c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0d5      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ef      	bne.n	80032fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80c9 	beq.w	80034b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f000 8083 	beq.w	8003438 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d15e      	bne.n	80033f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <HAL_RCC_OscConfig+0x4b8>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd fc29 	bl	8000b9c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e00c      	b.n	8003368 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fc25 	bl	8000b9c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d905      	bls.n	8003368 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0ab      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ec      	bne.n	800334e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003374:	4b52      	ldr	r3, [pc, #328]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <HAL_RCC_OscConfig+0x61c>)
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6a11      	ldr	r1, [r2, #32]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003384:	3a01      	subs	r2, #1
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	4311      	orrs	r1, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800338e:	0212      	lsls	r2, r2, #8
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003396:	0852      	lsrs	r2, r2, #1
 8003398:	3a01      	subs	r2, #1
 800339a:	0552      	lsls	r2, r2, #21
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0652      	lsls	r2, r2, #25
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033ae:	06d2      	lsls	r2, r2, #27
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4943      	ldr	r1, [pc, #268]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c4:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a3d      	ldr	r2, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fbe4 	bl	8000b9c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fbe0 	bl	8000b9c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e066      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x530>
 80033f6:	e05e      	b.n	80034b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fd fbca 	bl	8000b9c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fbc6 	bl	8000b9c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04c      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800342a:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	4924      	ldr	r1, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_OscConfig+0x620>)
 8003432:	4013      	ands	r3, r2
 8003434:	60cb      	str	r3, [r1, #12]
 8003436:	e03e      	b.n	80034b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e039      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_RCC_OscConfig+0x618>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0203 	and.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	429a      	cmp	r2, r3
 8003456:	d12c      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	3b01      	subs	r3, #1
 8003464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d123      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d11b      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d113      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	019f800c 	.word	0x019f800c
 80034c8:	feeefffc 	.word	0xfeeefffc

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e11e      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b91      	ldr	r3, [pc, #580]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b8e      	ldr	r3, [pc, #568]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	498c      	ldr	r1, [pc, #560]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b8a      	ldr	r3, [pc, #552]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e106      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d073      	beq.n	8003608 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d129      	bne.n	800357c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0f4      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003538:	f000 f966 	bl	8003808 <RCC_GetSysClockFreqFromPLLSource>
 800353c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4a7c      	ldr	r2, [pc, #496]	; (8003734 <HAL_RCC_ClockConfig+0x268>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d93f      	bls.n	80035c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800355a:	2b00      	cmp	r3, #0
 800355c:	d033      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d12f      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	4a70      	ldr	r2, [pc, #448]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e024      	b.n	80035c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0c6      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0be      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035a4:	f000 f8ce 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_RCC_ClockConfig+0x268>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d909      	bls.n	80035c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ba:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80035bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4957      	ldr	r1, [pc, #348]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fd fae0 	bl	8000b9c <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fd fadc 	bl	8000b9c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e095      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800362a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003638:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003640:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4936      	ldr	r1, [pc, #216]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
 800365a:	e008      	b.n	800366e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d105      	bne.n	800366e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4a32      	ldr	r2, [pc, #200]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 8003668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d21d      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 020f 	bic.w	r2, r3, #15
 8003684:	4929      	ldr	r1, [pc, #164]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800368c:	f7fd fa86 	bl	8000b9c <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003694:	f7fd fa82 	bl	8000b9c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e03b      	b.n	8003722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCC_ClockConfig+0x260>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1ed      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4917      	ldr	r1, [pc, #92]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490f      	ldr	r1, [pc, #60]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f6:	f000 f825 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_ClockConfig+0x264>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490c      	ldr	r1, [pc, #48]	; (8003738 <HAL_RCC_ClockConfig+0x26c>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <HAL_RCC_ClockConfig+0x270>)
 8003714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x274>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd f9f2 	bl	8000b04 <HAL_InitTick>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40022000 	.word	0x40022000
 8003730:	40021000 	.word	0x40021000
 8003734:	04c4b400 	.word	0x04c4b400
 8003738:	08004994 	.word	0x08004994
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d102      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e047      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800375c:	4b27      	ldr	r3, [pc, #156]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d102      	bne.n	800376e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003768:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e03e      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d136      	bne.n	80037e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3301      	adds	r3, #1
 8003790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d10c      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003798:	4a1a      	ldr	r2, [pc, #104]	; (8003804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	0a12      	lsrs	r2, r2, #8
 80037a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
      break;
 80037b0:	e00c      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80037bc:	68d2      	ldr	r2, [r2, #12]
 80037be:	0a12      	lsrs	r2, r2, #8
 80037c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
      break;
 80037ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	0e5b      	lsrs	r3, r3, #25
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e001      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037ec:	693b      	ldr	r3, [r7, #16]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	00f42400 	.word	0x00f42400
 8003804:	016e3600 	.word	0x016e3600

08003808 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d10c      	bne.n	8003846 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382c:	4a17      	ldr	r2, [pc, #92]	; (800388c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003836:	68d2      	ldr	r2, [r2, #12]
 8003838:	0a12      	lsrs	r2, r2, #8
 800383a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
    break;
 8003844:	e00c      	b.n	8003860 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003850:	68d2      	ldr	r2, [r2, #12]
 8003852:	0a12      	lsrs	r2, r2, #8
 8003854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
    break;
 800385e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0e5b      	lsrs	r3, r3, #25
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800387a:	687b      	ldr	r3, [r7, #4]
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40021000 	.word	0x40021000
 800388c:	016e3600 	.word	0x016e3600
 8003890:	00f42400 	.word	0x00f42400

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800389c:	2300      	movs	r3, #0
 800389e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8098 	beq.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038de:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ea:	f7fd f957 	bl	8000b9c <HAL_GetTick>
 80038ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f0:	e009      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7fd f953 	bl	8000b9c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d902      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	74fb      	strb	r3, [r7, #19]
        break;
 8003904:	e005      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ef      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d159      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d019      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003934:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003950:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd f913 	bl	8000b9c <HAL_GetTick>
 8003976:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003978:	e00b      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fd f90f 	bl	8000b9c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d902      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	74fb      	strb	r3, [r7, #19]
            break;
 8003990:	e006      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ec      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b4:	4903      	ldr	r1, [pc, #12]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039bc:	e008      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	74bb      	strb	r3, [r7, #18]
 80039c2:	e005      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d0:	7c7b      	ldrb	r3, [r7, #17]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4ba7      	ldr	r3, [pc, #668]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4aa6      	ldr	r2, [pc, #664]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ee:	4ba1      	ldr	r3, [pc, #644]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f023 0203 	bic.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	499d      	ldr	r1, [pc, #628]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a10:	4b98      	ldr	r3, [pc, #608]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 020c 	bic.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4995      	ldr	r1, [pc, #596]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a32:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	498c      	ldr	r1, [pc, #560]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a54:	4b87      	ldr	r3, [pc, #540]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	4984      	ldr	r1, [pc, #528]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	497b      	ldr	r1, [pc, #492]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a98:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	4973      	ldr	r1, [pc, #460]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	496a      	ldr	r1, [pc, #424]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003adc:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4962      	ldr	r1, [pc, #392]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4959      	ldr	r1, [pc, #356]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b20:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	4951      	ldr	r1, [pc, #324]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4948      	ldr	r1, [pc, #288]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4940      	ldr	r1, [pc, #256]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a3a      	ldr	r2, [pc, #232]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b9c:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	4932      	ldr	r1, [pc, #200]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	4924      	ldr	r1, [pc, #144]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	4916      	ldr	r1, [pc, #88]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d109      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a02      	ldr	r2, [pc, #8]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4926      	ldr	r1, [pc, #152]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	4918      	ldr	r1, [pc, #96]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d015      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	490a      	ldr	r1, [pc, #40]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d12:	d105      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e049      	b.n	8003dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fc fde8 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fbac 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04c      	b.n	8003e92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <HAL_TIM_Base_Start+0xc0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d01d      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_TIM_Base_Start+0xc4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_TIM_Base_Start+0xc8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_TIM_Base_Start+0xcc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <HAL_TIM_Base_Start+0xd0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_TIM_Base_Start+0xd4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_TIM_Base_Start+0xd8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d115      	bne.n	8003e7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_TIM_Base_Start+0xdc>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d015      	beq.n	8003e8e <HAL_TIM_Base_Start+0xae>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d011      	beq.n	8003e8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	e008      	b.n	8003e8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	00010007 	.word	0x00010007

08003ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e054      	b.n	8003f82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d01d      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x80>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d115      	bne.n	8003f6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_TIM_Base_Start_IT+0xec>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d015      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0xbe>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d011      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	e008      	b.n	8003f7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40015000 	.word	0x40015000
 8003fac:	00010007 	.word	0x00010007

08003fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d020      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0202 	mvn.w	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa48 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa3a 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fa4b 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0204 	mvn.w	r2, #4
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa22 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa14 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fa25 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d020      	beq.n	80040ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0208 	mvn.w	r2, #8
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9fc 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9ee 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f9ff 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d020      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0210 	mvn.w	r2, #16
 80040c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2208      	movs	r2, #8
 80040ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9d6 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9c8 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f9d9 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fc fada 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00c      	beq.n	800414a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fbb1 	bl	80048ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fba9 	bl	80048c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00c      	beq.n	8004192 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f993 	bl	80044b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0220 	mvn.w	r2, #32
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb71 	bl	8004898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb7d 	bl	80048d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80041f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb75 	bl	80048e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800421a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fb6d 	bl	80048fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb65 	bl	8004910 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIM_ConfigClockSource+0x1c>
 8004268:	2302      	movs	r3, #2
 800426a:	e0f6      	b.n	800445a <HAL_TIM_ConfigClockSource+0x20a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800428a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6f      	ldr	r2, [pc, #444]	; (8004464 <HAL_TIM_ConfigClockSource+0x214>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f000 80c1 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042ac:	4a6d      	ldr	r2, [pc, #436]	; (8004464 <HAL_TIM_ConfigClockSource+0x214>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f200 80c6 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b4:	4a6c      	ldr	r2, [pc, #432]	; (8004468 <HAL_TIM_ConfigClockSource+0x218>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 80b9 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_TIM_ConfigClockSource+0x218>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f200 80be 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c4:	4a69      	ldr	r2, [pc, #420]	; (800446c <HAL_TIM_ConfigClockSource+0x21c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f000 80b1 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042cc:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_TIM_ConfigClockSource+0x21c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f200 80b6 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d4:	4a66      	ldr	r2, [pc, #408]	; (8004470 <HAL_TIM_ConfigClockSource+0x220>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f000 80a9 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042dc:	4a64      	ldr	r2, [pc, #400]	; (8004470 <HAL_TIM_ConfigClockSource+0x220>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f200 80ae 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 80042e4:	4a63      	ldr	r2, [pc, #396]	; (8004474 <HAL_TIM_ConfigClockSource+0x224>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 80a1 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042ec:	4a61      	ldr	r2, [pc, #388]	; (8004474 <HAL_TIM_ConfigClockSource+0x224>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f200 80a6 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 80042f4:	4a60      	ldr	r2, [pc, #384]	; (8004478 <HAL_TIM_ConfigClockSource+0x228>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f000 8099 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 80042fc:	4a5e      	ldr	r2, [pc, #376]	; (8004478 <HAL_TIM_ConfigClockSource+0x228>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f200 809e 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004304:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004308:	f000 8091 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 800430c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004310:	f200 8096 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004318:	f000 8089 	beq.w	800442e <HAL_TIM_ConfigClockSource+0x1de>
 800431c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004320:	f200 808e 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0x158>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432e:	f200 8087 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004336:	f000 8086 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x1f6>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433e:	d87f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d01a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x12a>
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d87b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d050      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x19e>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d877      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d03c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x17e>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d873      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d058      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x1be>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d86f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d064      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x1de>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d86b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d060      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x1de>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d867      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x1de>
 8004374:	2b10      	cmp	r3, #16
 8004376:	d05a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x1de>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	f000 f9cf 	bl	800472c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	f000 f9b8 	bl	800472c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f92a 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	; 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f983 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f949 	bl	8004692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	; 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f973 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f90a 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f963 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 f95a 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	00100070 	.word	0x00100070
 8004468:	00100060 	.word	0x00100060
 800446c:	00100050 	.word	0x00100050
 8004470:	00100040 	.word	0x00100040
 8004474:	00100030 	.word	0x00100030
 8004478:	00100020 	.word	0x00100020

0800447c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a4c      	ldr	r2, [pc, #304]	; (8004610 <TIM_Base_SetConfig+0x144>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d017      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d013      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a49      	ldr	r2, [pc, #292]	; (8004614 <TIM_Base_SetConfig+0x148>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00f      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a48      	ldr	r2, [pc, #288]	; (8004618 <TIM_Base_SetConfig+0x14c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a47      	ldr	r2, [pc, #284]	; (800461c <TIM_Base_SetConfig+0x150>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a46      	ldr	r2, [pc, #280]	; (8004620 <TIM_Base_SetConfig+0x154>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a45      	ldr	r2, [pc, #276]	; (8004624 <TIM_Base_SetConfig+0x158>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d108      	bne.n	8004526 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a39      	ldr	r2, [pc, #228]	; (8004610 <TIM_Base_SetConfig+0x144>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d023      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a36      	ldr	r2, [pc, #216]	; (8004614 <TIM_Base_SetConfig+0x148>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a35      	ldr	r2, [pc, #212]	; (8004618 <TIM_Base_SetConfig+0x14c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a34      	ldr	r2, [pc, #208]	; (800461c <TIM_Base_SetConfig+0x150>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a33      	ldr	r2, [pc, #204]	; (8004620 <TIM_Base_SetConfig+0x154>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a33      	ldr	r2, [pc, #204]	; (8004628 <TIM_Base_SetConfig+0x15c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a32      	ldr	r2, [pc, #200]	; (800462c <TIM_Base_SetConfig+0x160>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a31      	ldr	r2, [pc, #196]	; (8004630 <TIM_Base_SetConfig+0x164>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0xaa>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <TIM_Base_SetConfig+0x158>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <TIM_Base_SetConfig+0x144>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <TIM_Base_SetConfig+0x110>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <TIM_Base_SetConfig+0x154>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00f      	beq.n	80045dc <TIM_Base_SetConfig+0x110>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <TIM_Base_SetConfig+0x15c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0x110>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <TIM_Base_SetConfig+0x160>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0x110>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <TIM_Base_SetConfig+0x164>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0x110>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a13      	ldr	r2, [pc, #76]	; (8004624 <TIM_Base_SetConfig+0x158>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
  }
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40013400 	.word	0x40013400
 8004624:	40015000 	.word	0x40015000
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 030a 	bic.w	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	f043 0307 	orr.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e074      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a34      	ldr	r2, [pc, #208]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a33      	ldr	r2, [pc, #204]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a31      	ldr	r2, [pc, #196]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d01d      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10c      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40013400 	.word	0x40013400
 8004884:	40015000 	.word	0x40015000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40014000 	.word	0x40014000

08004898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <memset>:
 8004924:	4402      	add	r2, r0
 8004926:	4603      	mov	r3, r0
 8004928:	4293      	cmp	r3, r2
 800492a:	d100      	bne.n	800492e <memset+0xa>
 800492c:	4770      	bx	lr
 800492e:	f803 1b01 	strb.w	r1, [r3], #1
 8004932:	e7f9      	b.n	8004928 <memset+0x4>

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4d0d      	ldr	r5, [pc, #52]	; (800496c <__libc_init_array+0x38>)
 8004938:	4c0d      	ldr	r4, [pc, #52]	; (8004970 <__libc_init_array+0x3c>)
 800493a:	1b64      	subs	r4, r4, r5
 800493c:	10a4      	asrs	r4, r4, #2
 800493e:	2600      	movs	r6, #0
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	4d0b      	ldr	r5, [pc, #44]	; (8004974 <__libc_init_array+0x40>)
 8004946:	4c0c      	ldr	r4, [pc, #48]	; (8004978 <__libc_init_array+0x44>)
 8004948:	f000 f818 	bl	800497c <_init>
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	2600      	movs	r6, #0
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	080049a4 	.word	0x080049a4
 8004970:	080049a4 	.word	0x080049a4
 8004974:	080049a4 	.word	0x080049a4
 8004978:	080049a8 	.word	0x080049a8

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr
