
LabMicro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb4  08003cb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cb4  08003cb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cb4  08003cb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003cc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003cc8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106b1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a4  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  000328d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cef  00000000  00000000  000339a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bc1  00000000  00000000  0003468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011693  00000000  00000000  0005b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010829e  00000000  00000000  0006c8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004824  00000000  00000000  00174b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001793a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c8c 	.word	0x08003c8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c8c 	.word	0x08003c8c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb49 	bl	80008b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f822 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f980 	bl	8000528 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f86a 	bl	8000300 <MX_ADC1_Init>
  MX_TIM3_Init();
 800022c:	f000 f92e 	bl	800048c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000230:	f000 f8de 	bl	80003f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <main+0x40>)
 8000236:	f002 ffcb 	bl	80031d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <main+0x44>)
 800023c:	f002 ffc8 	bl	80031d0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x40>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <main+0x48>)
 8000248:	6013      	str	r3, [r2, #0]
	  rawtim3 = __HAL_TIM_GET_COUNTER(&htim3);
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <main+0x44>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000250:	b29a      	uxth	r2, r3
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <main+0x4c>)
 8000254:	801a      	strh	r2, [r3, #0]
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000256:	e7f3      	b.n	8000240 <main+0x28>
 8000258:	20000094 	.word	0x20000094
 800025c:	200000e0 	.word	0x200000e0
 8000260:	20000130 	.word	0x20000130
 8000264:	2000012c 	.word	0x2000012c

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b094      	sub	sp, #80	; 0x50
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2238      	movs	r2, #56	; 0x38
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fcdc 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800028a:	2000      	movs	r0, #0
 800028c:	f001 ff50 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2340      	movs	r3, #64	; 0x40
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002a6:	2304      	movs	r3, #4
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002aa:	2355      	movs	r3, #85	; 0x55
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b6:	2302      	movs	r3, #2
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 ffea 	bl	8002298 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ca:	f000 f9b3 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2303      	movs	r3, #3
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2104      	movs	r1, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fae8 	bl	80028bc <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002f2:	f000 f99f 	bl	8000634 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3750      	adds	r7, #80	; 0x50
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08c      	sub	sp, #48	; 0x30
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2220      	movs	r2, #32
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f003 fc8b 	bl	8003c34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000326:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000328:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032e:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000340:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000348:	2204      	movs	r2, #4
 800034a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800034e:	2200      	movs	r2, #0
 8000350:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000354:	2200      	movs	r2, #0
 8000356:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800035a:	2201      	movs	r2, #1
 800035c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000368:	2200      	movs	r2, #0
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800036e:	2200      	movs	r2, #0
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000374:	2200      	movs	r2, #0
 8000376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800037c:	2200      	movs	r2, #0
 800037e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <MX_ADC1_Init+0xe8>)
 8000382:	2200      	movs	r2, #0
 8000384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000388:	4817      	ldr	r0, [pc, #92]	; (80003e8 <MX_ADC1_Init+0xe8>)
 800038a:	f000 fcd9 	bl	8000d40 <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000394:	f000 f94e 	bl	8000634 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000398:	2300      	movs	r3, #0
 800039a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800039c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <MX_ADC1_Init+0xe8>)
 80003a4:	f001 faee 	bl	8001984 <HAL_ADCEx_MultiModeConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003ae:	f000 f941 	bl	8000634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_ADC1_Init+0xec>)
 80003b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b6:	2306      	movs	r3, #6
 80003b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003be:	237f      	movs	r3, #127	; 0x7f
 80003c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c2:	2304      	movs	r3, #4
 80003c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <MX_ADC1_Init+0xe8>)
 80003d0:	f000 fe72 	bl	80010b8 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003da:	f000 f92b 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3730      	adds	r7, #48	; 0x30
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028
 80003ec:	04300002 	.word	0x04300002

080003f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM2_Init+0x98>)
 8000410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000414:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM2_Init+0x98>)
 8000418:	22a9      	movs	r2, #169	; 0xa9
 800041a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_TIM2_Init+0x98>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM2_Init+0x98>)
 8000424:	f04f 32ff 	mov.w	r2, #4294967295
 8000428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_TIM2_Init+0x98>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_TIM2_Init+0x98>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <MX_TIM2_Init+0x98>)
 8000438:	f002 fe72 	bl	8003120 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000442:	f000 f8f7 	bl	8000634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM2_Init+0x98>)
 8000454:	f003 f884 	bl	8003560 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800045e:	f000 f8e9 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_TIM2_Init+0x98>)
 8000470:	f003 fb04 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800047a:	f000 f8db 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000094 	.word	0x20000094

0800048c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_TIM3_Init+0x94>)
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_TIM3_Init+0x98>)
 80004ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_TIM3_Init+0x94>)
 80004b2:	22a9      	movs	r2, #169	; 0xa9
 80004b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM3_Init+0x94>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_TIM3_Init+0x94>)
 80004be:	f242 720f 	movw	r2, #9999	; 0x270f
 80004c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_TIM3_Init+0x94>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_TIM3_Init+0x94>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004d0:	4813      	ldr	r0, [pc, #76]	; (8000520 <MX_TIM3_Init+0x94>)
 80004d2:	f002 fe25 	bl	8003120 <HAL_TIM_Base_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80004dc:	f000 f8aa 	bl	8000634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_TIM3_Init+0x94>)
 80004ee:	f003 f837 	bl	8003560 <HAL_TIM_ConfigClockSource>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80004f8:	f000 f89c 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_TIM3_Init+0x94>)
 800050a:	f003 fab7 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000514:	f000 f88e 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000e0 	.word	0x200000e0
 8000524:	40000400 	.word	0x40000400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a2e      	ldr	r2, [pc, #184]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <MX_GPIO_Init+0xd4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a28      	ldr	r2, [pc, #160]	; (80005fc <MX_GPIO_Init+0xd4>)
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a22      	ldr	r2, [pc, #136]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <MX_GPIO_Init+0xd4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_GPIO_Init+0xd4>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_GPIO_Init+0xd4>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 fd87 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <MX_GPIO_Init+0xd8>)
 80005c2:	f001 fbf7 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c6:	2320      	movs	r3, #32
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f001 fbe8 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	2028      	movs	r0, #40	; 0x28
 80005ea:	f001 fbae 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ee:	2028      	movs	r0, #40	; 0x28
 80005f0:	f001 fbc5 	bl	8001d7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800

08000604 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d104      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		roundtim2 = roundtim2 + 1;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800061c:	6013      	str	r3, [r2, #0]
//	{
//		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//
//		roundtim3 = roundtim3 + 1;
//	}
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000094 	.word	0x20000094
 8000630:	20000134 	.word	0x20000134

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6613      	str	r3, [r2, #96]	; 0x60
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6593      	str	r3, [r2, #88]	; 0x58
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000676:	f001 fdff 	bl	8002278 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09e      	sub	sp, #120	; 0x78
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2254      	movs	r2, #84	; 0x54
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fac3 	bl	8003c34 <memset>
  if(hadc->Instance==ADC1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006b6:	d134      	bne.n	8000722 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fadb 	bl	8002c84 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006d4:	f7ff ffae 	bl	8000634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <HAL_ADC_MspInit+0xa4>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000708:	2307      	movs	r3, #7
 800070a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070c:	2303      	movs	r3, #3
 800070e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fb49 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3778      	adds	r7, #120	; 0x78
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000740:	d114      	bne.n	800076c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	201c      	movs	r0, #28
 8000760:	f001 faf3 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000764:	201c      	movs	r0, #28
 8000766:	f001 fb0a 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800076a:	e018      	b.n	800079e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_TIM_Base_MspInit+0x7c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d113      	bne.n	800079e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6593      	str	r3, [r2, #88]	; 0x58
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_TIM_Base_MspInit+0x78>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201d      	movs	r0, #29
 8000794:	f001 fad9 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000798:	201d      	movs	r0, #29
 800079a:	f001 faf0 	bl	8001d7e <HAL_NVIC_EnableIRQ>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40000400 	.word	0x40000400

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f8ac 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM2_IRQHandler+0x10>)
 800080a:	f002 fd59 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000094 	.word	0x20000094

08000818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM3_IRQHandler+0x10>)
 800081e:	f002 fd4f 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e0 	.word	0x200000e0

0800082c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000830:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000834:	f001 fc58 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff ffea 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f003 f9d9 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000892:	f7ff fcc1 	bl	8000218 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a4:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 80008a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ac:	2000013c 	.word	0x2000013c

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>

080008b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f001 fa39 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f80e 	bl	80008e4 <HAL_InitTick>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	e001      	b.n	80008d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d4:	f7ff feb4 	bl	8000640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d8:	79fb      	ldrb	r3, [r7, #7]

}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_InitTick+0x68>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d022      	beq.n	800093e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_InitTick+0x6c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_InitTick+0x68>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000904:	fbb1 f3f3 	udiv	r3, r1, r3
 8000908:	fbb2 f3f3 	udiv	r3, r2, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fa44 	bl	8001d9a <HAL_SYSTICK_Config>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10f      	bne.n	8000938 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d809      	bhi.n	8000932 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091e:	2200      	movs	r2, #0
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	f04f 30ff 	mov.w	r0, #4294967295
 8000926:	f001 fa10 	bl	8001d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_InitTick+0x70>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e007      	b.n	8000942 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e004      	b.n	8000942 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e001      	b.n	8000942 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000008 	.word	0x20000008
 8000950:	20000000 	.word	0x20000000
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4413      	add	r3, r2
 8000966:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x1c>)
 8000968:	6013      	str	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	20000138 	.word	0x20000138
 8000978:	20000008 	.word	0x20000008

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000138 	.word	0x20000138

08000994 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	609a      	str	r2, [r3, #8]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3360      	adds	r3, #96	; 0x60
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LL_ADC_SetOffset+0x44>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a34:	bf00      	nop
 8000a36:	371c      	adds	r7, #28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	03fff000 	.word	0x03fff000

08000a44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3360      	adds	r3, #96	; 0x60
 8000a52:	461a      	mov	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3360      	adds	r3, #96	; 0x60
 8000a80:	461a      	mov	r2, r3
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a9a:	bf00      	nop
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b087      	sub	sp, #28
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3360      	adds	r3, #96	; 0x60
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	431a      	orrs	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ad0:	bf00      	nop
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3360      	adds	r3, #96	; 0x60
 8000aec:	461a      	mov	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b06:	bf00      	nop
 8000b08:	371c      	adds	r7, #28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	615a      	str	r2, [r3, #20]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3330      	adds	r3, #48	; 0x30
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	4413      	add	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	211f      	movs	r1, #31
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	0e9b      	lsrs	r3, r3, #26
 8000b70:	f003 011f 	and.w	r1, r3, #31
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f003 031f 	and.w	r3, r3, #31
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b84:	bf00      	nop
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	0e5b      	lsrs	r3, r3, #25
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	4413      	add	r3, r2
 8000bae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	0d1b      	lsrs	r3, r3, #20
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	0d1b      	lsrs	r3, r3, #20
 8000bca:	f003 031f 	and.w	r3, r3, #31
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bda:	bf00      	nop
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0318 	and.w	r3, r3, #24
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c0c:	40d9      	lsrs	r1, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	400b      	ands	r3, r1
 8000c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	0007ffff 	.word	0x0007ffff

08000c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6093      	str	r3, [r2, #8]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c68:	d101      	bne.n	8000c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb8:	d101      	bne.n	8000cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <LL_ADC_IsEnabled+0x18>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <LL_ADC_IsEnabled+0x1a>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d101      	bne.n	8000d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d101      	bne.n	8000d30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1a9      	b.n	80010ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d109      	bne.n	8000d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fc8d 	bl	8000688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff67 	bl	8000c54 <LL_ADC_IsDeepPowerDownEnabled>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff4d 	bl	8000c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff82 	bl	8000ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff66 	bl	8000c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000db0:	4b9c      	ldr	r3, [pc, #624]	; (8001024 <HAL_ADC_Init+0x2e4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	099b      	lsrs	r3, r3, #6
 8000db6:	4a9c      	ldr	r2, [pc, #624]	; (8001028 <HAL_ADC_Init+0x2e8>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	099b      	lsrs	r3, r3, #6
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dc4:	e002      	b.n	8000dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff64 	bl	8000ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10d      	bne.n	8000dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de6:	f043 0210 	orr.w	r2, r3, #16
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff75 	bl	8000cf2 <LL_ADC_REG_IsConversionOngoing>
 8000e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8142 	bne.w	800109c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 813e 	bne.w	800109c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e28:	f043 0202 	orr.w	r2, r3, #2
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff49 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d141      	bne.n	8000ec4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e48:	d004      	beq.n	8000e54 <HAL_ADC_Init+0x114>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a77      	ldr	r2, [pc, #476]	; (800102c <HAL_ADC_Init+0x2ec>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d10f      	bne.n	8000e74 <HAL_ADC_Init+0x134>
 8000e54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e58:	f7ff ff38 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4873      	ldr	r0, [pc, #460]	; (800102c <HAL_ADC_Init+0x2ec>)
 8000e60:	f7ff ff34 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4323      	orrs	r3, r4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	e012      	b.n	8000e9a <HAL_ADC_Init+0x15a>
 8000e74:	486e      	ldr	r0, [pc, #440]	; (8001030 <HAL_ADC_Init+0x2f0>)
 8000e76:	f7ff ff29 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	486d      	ldr	r0, [pc, #436]	; (8001034 <HAL_ADC_Init+0x2f4>)
 8000e7e:	f7ff ff25 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e82:	4603      	mov	r3, r0
 8000e84:	431c      	orrs	r4, r3
 8000e86:	486c      	ldr	r0, [pc, #432]	; (8001038 <HAL_ADC_Init+0x2f8>)
 8000e88:	f7ff ff20 	bl	8000ccc <LL_ADC_IsEnabled>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d012      	beq.n	8000ec4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea6:	d004      	beq.n	8000eb2 <HAL_ADC_Init+0x172>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a5f      	ldr	r2, [pc, #380]	; (800102c <HAL_ADC_Init+0x2ec>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x176>
 8000eb2:	4a62      	ldr	r2, [pc, #392]	; (800103c <HAL_ADC_Init+0x2fc>)
 8000eb4:	e000      	b.n	8000eb8 <HAL_ADC_Init+0x178>
 8000eb6:	4a62      	ldr	r2, [pc, #392]	; (8001040 <HAL_ADC_Init+0x300>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f7ff fd68 	bl	8000994 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f5b      	ldrb	r3, [r3, #29]
 8000ec8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ece:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000ed4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000eda:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d106      	bne.n	8000f00 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	045b      	lsls	r3, r3, #17
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d009      	beq.n	8000f1c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <HAL_ADC_Init+0x304>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fee4 	bl	8000d18 <LL_ADC_INJ_IsConversionOngoing>
 8000f50:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d17f      	bne.n	8001058 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d17c      	bne.n	8001058 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d017      	beq.n	8000fc0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fa8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6911      	ldr	r1, [r2, #16]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000fbe:	e013      	b.n	8000fe8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d12a      	bne.n	8001048 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001008:	4311      	orrs	r1, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800100e:	4311      	orrs	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001014:	430a      	orrs	r2, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	e019      	b.n	8001058 <HAL_ADC_Init+0x318>
 8001024:	20000000 	.word	0x20000000
 8001028:	053e2d63 	.word	0x053e2d63
 800102c:	50000100 	.word	0x50000100
 8001030:	50000400 	.word	0x50000400
 8001034:	50000500 	.word	0x50000500
 8001038:	50000600 	.word	0x50000600
 800103c:	50000300 	.word	0x50000300
 8001040:	50000700 	.word	0x50000700
 8001044:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d10c      	bne.n	800107a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f023 010f 	bic.w	r1, r3, #15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
 8001078:	e007      	b.n	800108a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020f 	bic.w	r2, r2, #15
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	65da      	str	r2, [r3, #92]	; 0x5c
 800109a:	e007      	b.n	80010ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop

080010b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b6      	sub	sp, #216	; 0xd8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x24>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f000 bc13 	b.w	8001902 <HAL_ADC_ConfigChannel+0x84a>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe02 	bl	8000cf2 <LL_ADC_REG_IsConversionOngoing>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 83f3 	bne.w	80018dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6859      	ldr	r1, [r3, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	f7ff fd18 	bl	8000b38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fdf0 	bl	8000cf2 <LL_ADC_REG_IsConversionOngoing>
 8001112:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fdfc 	bl	8000d18 <LL_ADC_INJ_IsConversionOngoing>
 8001120:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001124:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 81d9 	bne.w	80014e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800112e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 81d4 	bne.w	80014e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001140:	d10f      	bne.n	8001162 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd1f 	bl	8000b90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fcd9 	bl	8000b12 <LL_ADC_SetSamplingTimeCommonConfig>
 8001160:	e00e      	b.n	8001180 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	461a      	mov	r2, r3
 8001170:	f7ff fd0e 	bl	8000b90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fcc9 	bl	8000b12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d022      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6919      	ldr	r1, [r3, #16]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011b2:	f7ff fc23 	bl	80009fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6919      	ldr	r1, [r3, #16]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	461a      	mov	r2, r3
 80011c4:	f7ff fc6f 	bl	8000aa6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_ADC_ConfigChannel+0x126>
 80011d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011dc:	e000      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x128>
 80011de:	2300      	movs	r3, #0
 80011e0:	461a      	mov	r2, r3
 80011e2:	f7ff fc7b 	bl	8000adc <LL_ADC_SetOffsetSaturation>
 80011e6:	e17b      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc28 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x15c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc1d 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	0e9b      	lsrs	r3, r3, #26
 800120e:	f003 021f 	and.w	r2, r3, #31
 8001212:	e01e      	b.n	8001252 <HAL_ADC_ConfigChannel+0x19a>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fc12 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800123a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001242:	2320      	movs	r3, #32
 8001244:	e004      	b.n	8001250 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <HAL_ADC_ConfigChannel+0x1b2>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	e018      	b.n	800129c <HAL_ADC_ConfigChannel+0x1e4>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800127e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800128e:	2320      	movs	r3, #32
 8001290:	e004      	b.n	800129c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fbe1 	bl	8000a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fbc5 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_ADC_ConfigChannel+0x222>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fbba 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	0e9b      	lsrs	r3, r3, #26
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	e01e      	b.n	8001318 <HAL_ADC_ConfigChannel+0x260>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fbaf 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e004      	b.n	8001316 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800130c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x278>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0e9b      	lsrs	r3, r3, #26
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	e018      	b.n	8001362 <HAL_ADC_ConfigChannel+0x2aa>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001344:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800134c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001354:	2320      	movs	r3, #32
 8001356:	e004      	b.n	8001362 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001362:	429a      	cmp	r2, r3
 8001364:	d106      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb7e 	bl	8000a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb62 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x2e8>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2102      	movs	r1, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fb57 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	0e9b      	lsrs	r3, r3, #26
 800139a:	f003 021f 	and.w	r2, r3, #31
 800139e:	e01e      	b.n	80013de <HAL_ADC_ConfigChannel+0x326>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb4c 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80013be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80013c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80013ce:	2320      	movs	r3, #32
 80013d0:	e004      	b.n	80013dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80013d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x33e>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0e9b      	lsrs	r3, r3, #26
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	e016      	b.n	8001424 <HAL_ADC_ConfigChannel+0x36c>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800140a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800140e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001416:	2320      	movs	r3, #32
 8001418:	e004      	b.n	8001424 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800141a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001424:	429a      	cmp	r2, r3
 8001426:	d106      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb1d 	bl	8000a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2103      	movs	r1, #3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fb01 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10a      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x3aa>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2103      	movs	r1, #3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff faf6 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	0e9b      	lsrs	r3, r3, #26
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	e017      	b.n	8001492 <HAL_ADC_ConfigChannel+0x3da>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff faeb 	bl	8000a44 <LL_ADC_GetOffsetChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800147a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800147c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800147e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001484:	2320      	movs	r3, #32
 8001486:	e003      	b.n	8001490 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x3f2>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0e9b      	lsrs	r3, r3, #26
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	e011      	b.n	80014ce <HAL_ADC_ConfigChannel+0x416>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80014bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80014c2:	2320      	movs	r3, #32
 80014c4:	e003      	b.n	80014ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80014c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d106      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	2103      	movs	r1, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fac8 	bl	8000a70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fbf1 	bl	8000ccc <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 813d 	bne.w	800176c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	461a      	mov	r2, r3
 8001500:	f7ff fb72 	bl	8000be8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4aa2      	ldr	r2, [pc, #648]	; (8001794 <HAL_ADC_ConfigChannel+0x6dc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 812e 	bne.w	800176c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x480>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0e9b      	lsrs	r3, r3, #26
 8001526:	3301      	adds	r3, #1
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2b09      	cmp	r3, #9
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e019      	b.n	800156c <HAL_ADC_ConfigChannel+0x4b4>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800154a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001550:	2320      	movs	r3, #32
 8001552:	e003      	b.n	800155c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2b09      	cmp	r3, #9
 8001564:	bf94      	ite	ls
 8001566:	2301      	movls	r3, #1
 8001568:	2300      	movhi	r3, #0
 800156a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800156c:	2b00      	cmp	r3, #0
 800156e:	d079      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <HAL_ADC_ConfigChannel+0x4d4>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	3301      	adds	r3, #1
 8001584:	069b      	lsls	r3, r3, #26
 8001586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158a:	e015      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x500>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800159a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80015a4:	2320      	movs	r3, #32
 80015a6:	e003      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80015a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	069b      	lsls	r3, r3, #26
 80015b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x520>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	3301      	adds	r3, #1
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	e017      	b.n	8001608 <HAL_ADC_ConfigChannel+0x550>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80015f0:	2320      	movs	r3, #32
 80015f2:	e003      	b.n	80015fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80015f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	ea42 0103 	orr.w	r1, r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_ADC_ConfigChannel+0x576>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0e9b      	lsrs	r3, r3, #26
 800161e:	3301      	adds	r3, #1
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	e018      	b.n	8001660 <HAL_ADC_ConfigChannel+0x5a8>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001646:	2320      	movs	r3, #32
 8001648:	e003      	b.n	8001652 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800164a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001660:	430b      	orrs	r3, r1
 8001662:	e07e      	b.n	8001762 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x5c8>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0e9b      	lsrs	r3, r3, #26
 8001676:	3301      	adds	r3, #1
 8001678:	069b      	lsls	r3, r3, #26
 800167a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800167e:	e015      	b.n	80016ac <HAL_ADC_ConfigChannel+0x5f4>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e003      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	069b      	lsls	r3, r3, #26
 80016a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x614>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0e9b      	lsrs	r3, r3, #26
 80016be:	3301      	adds	r3, #1
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	e017      	b.n	80016fc <HAL_ADC_ConfigChannel+0x644>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	61fb      	str	r3, [r7, #28]
  return result;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80016e4:	2320      	movs	r3, #32
 80016e6:	e003      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	ea42 0103 	orr.w	r1, r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x670>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	3301      	adds	r3, #1
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b1e      	subs	r3, #30
 8001720:	051b      	lsls	r3, r3, #20
 8001722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001726:	e01b      	b.n	8001760 <HAL_ADC_ConfigChannel+0x6a8>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	613b      	str	r3, [r7, #16]
  return result;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f003 021f 	and.w	r2, r3, #31
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	3b1e      	subs	r3, #30
 800175a:	051b      	lsls	r3, r3, #20
 800175c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001760:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff fa12 	bl	8000b90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_ADC_ConfigChannel+0x6e0>)
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80be 	beq.w	80018f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001782:	d004      	beq.n	800178e <HAL_ADC_ConfigChannel+0x6d6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_ADC_ConfigChannel+0x6e4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10a      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x6ec>
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001790:	e009      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x6ee>
 8001792:	bf00      	nop
 8001794:	407f0000 	.word	0x407f0000
 8001798:	80080000 	.word	0x80080000
 800179c:	50000100 	.word	0x50000100
 80017a0:	50000300 	.word	0x50000300
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_ADC_ConfigChannel+0x854>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f91a 	bl	80009e0 <LL_ADC_GetCommonPathInternalCh>
 80017ac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a56      	ldr	r2, [pc, #344]	; (8001910 <HAL_ADC_ConfigChannel+0x858>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d004      	beq.n	80017c4 <HAL_ADC_ConfigChannel+0x70c>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_ADC_ConfigChannel+0x85c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d13a      	bne.n	800183a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d134      	bne.n	800183a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d8:	d005      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x72e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_ADC_ConfigChannel+0x860>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f040 8085 	bne.w	80018f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ee:	d004      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x742>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a49      	ldr	r2, [pc, #292]	; (800191c <HAL_ADC_ConfigChannel+0x864>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x746>
 80017fa:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_ADC_ConfigChannel+0x868>)
 80017fc:	e000      	b.n	8001800 <HAL_ADC_ConfigChannel+0x748>
 80017fe:	4a43      	ldr	r2, [pc, #268]	; (800190c <HAL_ADC_ConfigChannel+0x854>)
 8001800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff f8d5 	bl	80009ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_ADC_ConfigChannel+0x86c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	4a44      	ldr	r2, [pc, #272]	; (8001928 <HAL_ADC_ConfigChannel+0x870>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800182a:	e002      	b.n	8001832 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3b01      	subs	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f9      	bne.n	800182c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001838:	e05a      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_ADC_ConfigChannel+0x874>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d125      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d11f      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <HAL_ADC_ConfigChannel+0x864>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d104      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x7ac>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_ADC_ConfigChannel+0x878>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d047      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186c:	d004      	beq.n	8001878 <HAL_ADC_ConfigChannel+0x7c0>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_ADC_ConfigChannel+0x864>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_ADC_ConfigChannel+0x7c4>
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_ADC_ConfigChannel+0x868>)
 800187a:	e000      	b.n	800187e <HAL_ADC_ConfigChannel+0x7c6>
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_ADC_ConfigChannel+0x854>)
 800187e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7ff f896 	bl	80009ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800188e:	e031      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_ADC_ConfigChannel+0x87c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12d      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800189a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d127      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_ADC_ConfigChannel+0x864>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x80c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_ADC_ConfigChannel+0x864>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x810>
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_ADC_ConfigChannel+0x868>)
 80018c6:	e000      	b.n	80018ca <HAL_ADC_ConfigChannel+0x812>
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_ADC_ConfigChannel+0x854>)
 80018ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff f870 	bl	80009ba <LL_ADC_SetCommonPathInternalCh>
 80018da:	e00c      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	f043 0220 	orr.w	r2, r3, #32
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018f0:	bf00      	nop
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80018fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001902:	4618      	mov	r0, r3
 8001904:	37d8      	adds	r7, #216	; 0xd8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	50000700 	.word	0x50000700
 8001910:	c3210000 	.word	0xc3210000
 8001914:	90c00010 	.word	0x90c00010
 8001918:	50000600 	.word	0x50000600
 800191c:	50000100 	.word	0x50000100
 8001920:	50000300 	.word	0x50000300
 8001924:	20000000 	.word	0x20000000
 8001928:	053e2d63 	.word	0x053e2d63
 800192c:	c7520000 	.word	0xc7520000
 8001930:	50000500 	.word	0x50000500
 8001934:	cb840000 	.word	0xcb840000

08001938 <LL_ADC_IsEnabled>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <LL_ADC_IsEnabled+0x18>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <LL_ADC_IsEnabled+0x1a>
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_REG_IsConversionOngoing>:
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b04      	cmp	r3, #4
 8001970:	d101      	bne.n	8001976 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b0a1      	sub	sp, #132	; 0x84
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800199e:	2302      	movs	r3, #2
 80019a0:	e0e7      	b.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80019aa:	2300      	movs	r3, #0
 80019ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80019ae:	2300      	movs	r3, #0
 80019b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ba:	d102      	bne.n	80019c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019bc:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	e009      	b.n	80019d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	e001      	b.n	80019d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10b      	bne.n	80019f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0be      	b.n	8001b72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffb1 	bl	800195e <LL_ADC_REG_IsConversionOngoing>
 80019fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffab 	bl	800195e <LL_ADC_REG_IsConversionOngoing>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80a0 	bne.w	8001b50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 809c 	bne.w	8001b50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a20:	d004      	beq.n	8001a2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a55      	ldr	r2, [pc, #340]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001a2e:	e000      	b.n	8001a32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a30:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001a32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d04b      	beq.n	8001ad4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a4e:	035b      	lsls	r3, r3, #13
 8001a50:	430b      	orrs	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a60:	d004      	beq.n	8001a6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10f      	bne.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001a6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a70:	f7ff ff62 	bl	8001938 <LL_ADC_IsEnabled>
 8001a74:	4604      	mov	r4, r0
 8001a76:	4841      	ldr	r0, [pc, #260]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001a78:	f7ff ff5e 	bl	8001938 <LL_ADC_IsEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e012      	b.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001a8c:	483c      	ldr	r0, [pc, #240]	; (8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001a8e:	f7ff ff53 	bl	8001938 <LL_ADC_IsEnabled>
 8001a92:	4604      	mov	r4, r0
 8001a94:	483b      	ldr	r0, [pc, #236]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001a96:	f7ff ff4f 	bl	8001938 <LL_ADC_IsEnabled>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	431c      	orrs	r4, r3
 8001a9e:	483c      	ldr	r0, [pc, #240]	; (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001aa0:	f7ff ff4a 	bl	8001938 <LL_ADC_IsEnabled>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4323      	orrs	r3, r4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d056      	beq.n	8001b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001abe:	f023 030f 	bic.w	r3, r3, #15
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	6811      	ldr	r1, [r2, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6892      	ldr	r2, [r2, #8]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ad2:	e047      	b.n	8001b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ade:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d10f      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001af4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001af8:	f7ff ff1e 	bl	8001938 <LL_ADC_IsEnabled>
 8001afc:	4604      	mov	r4, r0
 8001afe:	481f      	ldr	r0, [pc, #124]	; (8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001b00:	f7ff ff1a 	bl	8001938 <LL_ADC_IsEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4323      	orrs	r3, r4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e012      	b.n	8001b3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001b14:	481a      	ldr	r0, [pc, #104]	; (8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001b16:	f7ff ff0f 	bl	8001938 <LL_ADC_IsEnabled>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4819      	ldr	r0, [pc, #100]	; (8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001b1e:	f7ff ff0b 	bl	8001938 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	431c      	orrs	r4, r3
 8001b26:	481a      	ldr	r0, [pc, #104]	; (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001b28:	f7ff ff06 	bl	8001938 <LL_ADC_IsEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d012      	beq.n	8001b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b46:	f023 030f 	bic.w	r3, r3, #15
 8001b4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b4e:	e009      	b.n	8001b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	f043 0220 	orr.w	r2, r3, #32
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001b62:	e000      	b.n	8001b66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001b64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3784      	adds	r7, #132	; 0x84
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	50000100 	.word	0x50000100
 8001b80:	50000400 	.word	0x50000400
 8001b84:	50000500 	.word	0x50000500
 8001b88:	50000300 	.word	0x50000300
 8001b8c:	50000700 	.word	0x50000700
 8001b90:	50000600 	.word	0x50000600

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff40 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff33 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa4 	bl	8001cf0 <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dc2:	e15a      	b.n	800207a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 814c 	beq.w	8002074 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d017      	beq.n	8001e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d123      	bne.n	8001ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	6939      	ldr	r1, [r7, #16]
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80a6 	beq.w	8002074 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_GPIO_Init+0x2e4>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <HAL_GPIO_Init+0x2e4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6613      	str	r3, [r2, #96]	; 0x60
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_GPIO_Init+0x2e4>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f40:	4a56      	ldr	r2, [pc, #344]	; (800209c <HAL_GPIO_Init+0x2e8>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f6a:	d01f      	beq.n	8001fac <HAL_GPIO_Init+0x1f8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <HAL_GPIO_Init+0x2ec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d019      	beq.n	8001fa8 <HAL_GPIO_Init+0x1f4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <HAL_GPIO_Init+0x2f0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_GPIO_Init+0x1f0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <HAL_GPIO_Init+0x2f4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00d      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a49      	ldr	r2, [pc, #292]	; (80020ac <HAL_GPIO_Init+0x2f8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2fc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f94:	2305      	movs	r3, #5
 8001f96:	e00a      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001f98:	2306      	movs	r3, #6
 8001f9a:	e008      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001fac:	2300      	movs	r3, #0
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbe:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_GPIO_Init+0x2e8>)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff0:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800201a:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_GPIO_Init+0x300>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002044:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_GPIO_Init+0x300>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_GPIO_Init+0x300>)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f ae9d 	bne.w	8001dc4 <HAL_GPIO_Init+0x10>
  }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48000800 	.word	0x48000800
 80020a8:	48000c00 	.word	0x48000c00
 80020ac:	48001000 	.word	0x48001000
 80020b0:	48001400 	.word	0x48001400
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f806 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d141      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800213e:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d131      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002152:	4a46      	ldr	r2, [pc, #280]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002164:	4a41      	ldr	r2, [pc, #260]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2232      	movs	r2, #50	; 0x32
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a3f      	ldr	r2, [pc, #252]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	3301      	adds	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002182:	e002      	b.n	800218a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b01      	subs	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002196:	d102      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f2      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d158      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e057      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021c0:	e04d      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d141      	bne.n	800224e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d131      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021de:	4a23      	ldr	r2, [pc, #140]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2232      	movs	r2, #50	; 0x32
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9b      	lsrs	r3, r3, #18
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220e:	e002      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3b01      	subs	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d102      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f2      	bne.n	8002210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002236:	d112      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e011      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800224c:	e007      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40007000 	.word	0x40007000
 8002270:	20000000 	.word	0x20000000
 8002274:	431bde83 	.word	0x431bde83

08002278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002286:	6093      	str	r3, [r2, #8]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40007000 	.word	0x40007000

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e2fe      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b6:	4b97      	ldr	r3, [pc, #604]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c0:	4b94      	ldr	r3, [pc, #592]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3e>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2d9      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a84      	ldr	r2, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7b      	ldr	r2, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a74      	ldr	r2, [pc, #464]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fb14 	bl	800097c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fb10 	bl	800097c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e29e      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fb00 	bl	800097c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fafc 	bl	800097c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e28a      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4b60      	ldr	r3, [pc, #384]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d075      	beq.n	800249a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b8:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0x136>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_OscConfig+0x13c>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d11f      	bne.n	8002414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d4:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x154>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e25d      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	4946      	ldr	r1, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002400:	4b45      	ldr	r3, [pc, #276]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fa6d 	bl	80008e4 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e249      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe faa8 	bl	800097c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7fe faa4 	bl	800097c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e232      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002442:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	492d      	ldr	r1, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
 8002462:	e01a      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800246a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fa84 	bl	800097c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fa80 	bl	800097c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e20e      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1e0>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fa5d 	bl	800097c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fa59 	bl	800097c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1e7      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ef      	beq.n	80024c6 <HAL_RCC_OscConfig+0x22e>
 80024e6:	e020      	b.n	800252a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x27c>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fa40 	bl	800097c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fe:	e00d      	b.n	800251c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fa3c 	bl	800097c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d906      	bls.n	800251c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1ca      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800251c:	4b8c      	ldr	r3, [pc, #560]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ea      	bne.n	8002500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a6 	beq.w	8002684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800253c:	4b84      	ldr	r3, [pc, #528]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_OscConfig+0x2b4>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x2b6>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b7f      	ldr	r3, [pc, #508]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a7e      	ldr	r2, [pc, #504]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
 800255e:	4b7c      	ldr	r3, [pc, #496]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256e:	4b79      	ldr	r3, [pc, #484]	; (8002754 <HAL_RCC_OscConfig+0x4bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x4bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x4bc>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe f9f9 	bl	800097c <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe f9f5 	bl	800097c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e183      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x4bc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HAL_RCC_OscConfig+0x32e>
 80025b4:	4b66      	ldr	r3, [pc, #408]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	4a65      	ldr	r2, [pc, #404]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c4:	e024      	b.n	8002610 <HAL_RCC_OscConfig+0x378>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d110      	bne.n	80025f0 <HAL_RCC_OscConfig+0x358>
 80025ce:	4b60      	ldr	r3, [pc, #384]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ee:	e00f      	b.n	8002610 <HAL_RCC_OscConfig+0x378>
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d016      	beq.n	8002646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe f9b0 	bl	800097c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe f9ac 	bl	800097c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e138      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ed      	beq.n	8002620 <HAL_RCC_OscConfig+0x388>
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe f999 	bl	800097c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe f995 	bl	800097c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e121      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ed      	bne.n	800264e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002678:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a34      	ldr	r2, [pc, #208]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269e:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe f968 	bl	800097c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b0:	f7fe f964 	bl	800097c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0f2      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x418>
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe f94b 	bl	800097c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ea:	f7fe f947 	bl	800097c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0d5      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 80026fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80c9 	beq.w	80028a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b0c      	cmp	r3, #12
 800271e:	f000 8083 	beq.w	8002828 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d15e      	bne.n	80027e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe f921 	bl	800097c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	e00c      	b.n	8002758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe f91d 	bl	800097c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d905      	bls.n	8002758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ab      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
 8002750:	40021000 	.word	0x40021000
 8002754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ec      	bne.n	800273e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <HAL_RCC_OscConfig+0x61c>)
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a11      	ldr	r1, [r2, #32]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002774:	3a01      	subs	r2, #1
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0652      	lsls	r2, r2, #25
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800279e:	06d2      	lsls	r2, r2, #27
 80027a0:	430a      	orrs	r2, r1
 80027a2:	4943      	ldr	r1, [pc, #268]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a3d      	ldr	r2, [pc, #244]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe f8dc 	bl	800097c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe f8d8 	bl	800097c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e066      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x530>
 80027e6:	e05e      	b.n	80028a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 80027ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe f8c2 	bl	800097c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe f8be 	bl	800097c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e04c      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4924      	ldr	r1, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_RCC_OscConfig+0x620>)
 8002822:	4013      	ands	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
 8002826:	e03e      	b.n	80028a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e039      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCC_OscConfig+0x618>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	429a      	cmp	r2, r3
 8002846:	d12c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d123      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d11b      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d113      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	019f800c 	.word	0x019f800c
 80028b8:	feeefffc 	.word	0xfeeefffc

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e11e      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 020f 	bic.w	r2, r3, #15
 80028ea:	498c      	ldr	r1, [pc, #560]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b8a      	ldr	r3, [pc, #552]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e106      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d073      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d129      	bne.n	800296c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0f4      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002928:	f000 f966 	bl	8002bf8 <RCC_GetSysClockFreqFromPLLSource>
 800292c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a7c      	ldr	r2, [pc, #496]	; (8002b24 <HAL_RCC_ClockConfig+0x268>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d93f      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002936:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d033      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12f      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295e:	4a70      	ldr	r2, [pc, #448]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002964:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e024      	b.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0c6      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0be      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002994:	f000 f8ce 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a61      	ldr	r2, [pc, #388]	; (8002b24 <HAL_RCC_ClockConfig+0x268>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d909      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4957      	ldr	r1, [pc, #348]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fd ffd8 	bl	800097c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fd ffd4 	bl	800097c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e095      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a30:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4936      	ldr	r1, [pc, #216]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d105      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4a32      	ldr	r2, [pc, #200]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d21d      	bcs.n	8002aa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 020f 	bic.w	r2, r3, #15
 8002a74:	4929      	ldr	r1, [pc, #164]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a7c:	f7fd ff7e 	bl	800097c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fd ff7a 	bl	800097c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e03b      	b.n	8002b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1ed      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4917      	ldr	r1, [pc, #92]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	490f      	ldr	r1, [pc, #60]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae6:	f000 f825 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	490c      	ldr	r1, [pc, #48]	; (8002b28 <HAL_RCC_ClockConfig+0x26c>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x270>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd feea 	bl	80008e4 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	04c4b400 	.word	0x04c4b400
 8002b28:	08003ca4 	.word	0x08003ca4
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	e047      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e03e      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d136      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3301      	adds	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b88:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b92:	68d2      	ldr	r2, [r2, #12]
 8002b94:	0a12      	lsrs	r2, r2, #8
 8002b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
      break;
 8002ba0:	e00c      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	0a12      	lsrs	r2, r2, #8
 8002bb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
      break;
 8002bba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0e5b      	lsrs	r3, r3, #25
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e001      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bdc:	693b      	ldr	r3, [r7, #16]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	016e3600 	.word	0x016e3600

08002bf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d10c      	bne.n	8002c36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c26:	68d2      	ldr	r2, [r2, #12]
 8002c28:	0a12      	lsrs	r2, r2, #8
 8002c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
    break;
 8002c34:	e00c      	b.n	8002c50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	0a12      	lsrs	r2, r2, #8
 8002c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
    break;
 8002c4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0e5b      	lsrs	r3, r3, #25
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c6a:	687b      	ldr	r3, [r7, #4]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	016e3600 	.word	0x016e3600
 8002c80:	00f42400 	.word	0x00f42400

08002c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c90:	2300      	movs	r3, #0
 8002c92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8098 	beq.w	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cce:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a39      	ldr	r2, [pc, #228]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cda:	f7fd fe4f 	bl	800097c <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce0:	e009      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fd fe4b 	bl	800097c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d902      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ef      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d159      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01e      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d019      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fd fe0b 	bl	800097c <HAL_GetTick>
 8002d66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d68:	e00b      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fe07 	bl	800097c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d902      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ec      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dac:	e008      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	74bb      	strb	r3, [r7, #18]
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc0:	7c7b      	ldrb	r3, [r7, #17]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4ba7      	ldr	r3, [pc, #668]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4aa6      	ldr	r2, [pc, #664]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dde:	4ba1      	ldr	r3, [pc, #644]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f023 0203 	bic.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	499d      	ldr	r1, [pc, #628]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 020c 	bic.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4995      	ldr	r1, [pc, #596]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e22:	4b90      	ldr	r3, [pc, #576]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	498c      	ldr	r1, [pc, #560]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e44:	4b87      	ldr	r3, [pc, #540]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4984      	ldr	r1, [pc, #528]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e66:	4b7f      	ldr	r3, [pc, #508]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	497b      	ldr	r1, [pc, #492]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e88:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	4973      	ldr	r1, [pc, #460]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	496a      	ldr	r1, [pc, #424]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ecc:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4962      	ldr	r1, [pc, #392]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eee:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	4959      	ldr	r1, [pc, #356]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f10:	4b54      	ldr	r3, [pc, #336]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	4951      	ldr	r1, [pc, #324]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f32:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	4948      	ldr	r1, [pc, #288]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4940      	ldr	r1, [pc, #256]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	4932      	ldr	r1, [pc, #200]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	4924      	ldr	r1, [pc, #144]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	4916      	ldr	r1, [pc, #88]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800301a:	d105      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a10      	ldr	r2, [pc, #64]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003052:	d109      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a02      	ldr	r2, [pc, #8]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305e:	60d3      	str	r3, [r2, #12]
 8003060:	e002      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4926      	ldr	r1, [pc, #152]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003092:	d105      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	4918      	ldr	r1, [pc, #96]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d105      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	490a      	ldr	r1, [pc, #40]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003102:	d105      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800310a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800310e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003110:	7cbb      	ldrb	r3, [r7, #18]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e049      	b.n	80031c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd faf2 	bl	8000730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f000 fb3c 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e054      	b.n	8003292 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d01d      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <HAL_TIM_Base_Start_IT+0xdc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d115      	bne.n	800327c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_TIM_Base_Start_IT+0xec>)
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d015      	beq.n	800328e <HAL_TIM_Base_Start_IT+0xbe>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d011      	beq.n	800328e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	e008      	b.n	800328e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e000      	b.n	8003290 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40015000 	.word	0x40015000
 80032bc:	00010007 	.word	0x00010007

080032c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d020      	beq.n	8003324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0202 	mvn.w	r2, #2
 80032f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa48 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa3a 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa4b 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0204 	mvn.w	r2, #4
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa22 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa14 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fa25 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0208 	mvn.w	r2, #8
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2204      	movs	r2, #4
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9fc 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9ee 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f9ff 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01b      	beq.n	8003408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0210 	mvn.w	r2, #16
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2208      	movs	r2, #8
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f9d6 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9c8 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9d9 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0201 	mvn.w	r2, #1
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd f8ec 	bl	8000604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fbb1 	bl	8003bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00c      	beq.n	800347e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fba9 	bl	8003bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00c      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f993 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0220 	mvn.w	r2, #32
 80034be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fb71 	bl	8003ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb7d 	bl	8003be4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb75 	bl	8003bf8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800352a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb6d 	bl	8003c0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb65 	bl	8003c20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_TIM_ConfigClockSource+0x1c>
 8003578:	2302      	movs	r3, #2
 800357a:	e0f6      	b.n	800376a <HAL_TIM_ConfigClockSource+0x20a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800359a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800359e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_TIM_ConfigClockSource+0x214>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f000 80c1 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 80035bc:	4a6d      	ldr	r2, [pc, #436]	; (8003774 <HAL_TIM_ConfigClockSource+0x214>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f200 80c6 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 80035c4:	4a6c      	ldr	r2, [pc, #432]	; (8003778 <HAL_TIM_ConfigClockSource+0x218>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 80b9 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 80035cc:	4a6a      	ldr	r2, [pc, #424]	; (8003778 <HAL_TIM_ConfigClockSource+0x218>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f200 80be 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 80035d4:	4a69      	ldr	r2, [pc, #420]	; (800377c <HAL_TIM_ConfigClockSource+0x21c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f000 80b1 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 80035dc:	4a67      	ldr	r2, [pc, #412]	; (800377c <HAL_TIM_ConfigClockSource+0x21c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f200 80b6 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 80035e4:	4a66      	ldr	r2, [pc, #408]	; (8003780 <HAL_TIM_ConfigClockSource+0x220>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f000 80a9 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 80035ec:	4a64      	ldr	r2, [pc, #400]	; (8003780 <HAL_TIM_ConfigClockSource+0x220>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f200 80ae 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 80035f4:	4a63      	ldr	r2, [pc, #396]	; (8003784 <HAL_TIM_ConfigClockSource+0x224>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f000 80a1 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 80035fc:	4a61      	ldr	r2, [pc, #388]	; (8003784 <HAL_TIM_ConfigClockSource+0x224>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f200 80a6 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003604:	4a60      	ldr	r2, [pc, #384]	; (8003788 <HAL_TIM_ConfigClockSource+0x228>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f000 8099 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 800360c:	4a5e      	ldr	r2, [pc, #376]	; (8003788 <HAL_TIM_ConfigClockSource+0x228>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f200 809e 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003614:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003618:	f000 8091 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 800361c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003620:	f200 8096 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	f000 8089 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x1de>
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003630:	f200 808e 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003638:	d03e      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x158>
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363e:	f200 8087 	bhi.w	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003646:	f000 8086 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1f6>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364e:	d87f      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003650:	2b70      	cmp	r3, #112	; 0x70
 8003652:	d01a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x12a>
 8003654:	2b70      	cmp	r3, #112	; 0x70
 8003656:	d87b      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003658:	2b60      	cmp	r3, #96	; 0x60
 800365a:	d050      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x19e>
 800365c:	2b60      	cmp	r3, #96	; 0x60
 800365e:	d877      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003660:	2b50      	cmp	r3, #80	; 0x50
 8003662:	d03c      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x17e>
 8003664:	2b50      	cmp	r3, #80	; 0x50
 8003666:	d873      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d058      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x1be>
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d86f      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003670:	2b30      	cmp	r3, #48	; 0x30
 8003672:	d064      	beq.n	800373e <HAL_TIM_ConfigClockSource+0x1de>
 8003674:	2b30      	cmp	r3, #48	; 0x30
 8003676:	d86b      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d060      	beq.n	800373e <HAL_TIM_ConfigClockSource+0x1de>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d867      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05c      	beq.n	800373e <HAL_TIM_ConfigClockSource+0x1de>
 8003684:	2b10      	cmp	r3, #16
 8003686:	d05a      	beq.n	800373e <HAL_TIM_ConfigClockSource+0x1de>
 8003688:	e062      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800369a:	f000 f9cf 	bl	8003a3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	609a      	str	r2, [r3, #8]
      break;
 80036b6:	e04f      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	f000 f9b8 	bl	8003a3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036da:	609a      	str	r2, [r3, #8]
      break;
 80036dc:	e03c      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 f92a 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2150      	movs	r1, #80	; 0x50
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f983 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 80036fc:	e02c      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	461a      	mov	r2, r3
 800370c:	f000 f949 	bl	80039a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2160      	movs	r1, #96	; 0x60
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f973 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800371c:	e01c      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	461a      	mov	r2, r3
 800372c:	f000 f90a 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f963 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800373c:	e00c      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f000 f95a 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 800374e:	e003      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e000      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	00100070 	.word	0x00100070
 8003778:	00100060 	.word	0x00100060
 800377c:	00100050 	.word	0x00100050
 8003780:	00100040 	.word	0x00100040
 8003784:	00100030 	.word	0x00100030
 8003788:	00100020 	.word	0x00100020

0800378c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <TIM_Base_SetConfig+0x144>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d017      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d013      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a49      	ldr	r2, [pc, #292]	; (8003924 <TIM_Base_SetConfig+0x148>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00f      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a48      	ldr	r2, [pc, #288]	; (8003928 <TIM_Base_SetConfig+0x14c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a47      	ldr	r2, [pc, #284]	; (800392c <TIM_Base_SetConfig+0x150>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a46      	ldr	r2, [pc, #280]	; (8003930 <TIM_Base_SetConfig+0x154>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0x48>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a45      	ldr	r2, [pc, #276]	; (8003934 <TIM_Base_SetConfig+0x158>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a39      	ldr	r2, [pc, #228]	; (8003920 <TIM_Base_SetConfig+0x144>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d023      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d01f      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a36      	ldr	r2, [pc, #216]	; (8003924 <TIM_Base_SetConfig+0x148>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01b      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a35      	ldr	r2, [pc, #212]	; (8003928 <TIM_Base_SetConfig+0x14c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a34      	ldr	r2, [pc, #208]	; (800392c <TIM_Base_SetConfig+0x150>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a33      	ldr	r2, [pc, #204]	; (8003930 <TIM_Base_SetConfig+0x154>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a33      	ldr	r2, [pc, #204]	; (8003938 <TIM_Base_SetConfig+0x15c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a32      	ldr	r2, [pc, #200]	; (800393c <TIM_Base_SetConfig+0x160>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a31      	ldr	r2, [pc, #196]	; (8003940 <TIM_Base_SetConfig+0x164>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2c      	ldr	r2, [pc, #176]	; (8003934 <TIM_Base_SetConfig+0x158>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <TIM_Base_SetConfig+0x144>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <TIM_Base_SetConfig+0x110>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <TIM_Base_SetConfig+0x154>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00f      	beq.n	80038ec <TIM_Base_SetConfig+0x110>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <TIM_Base_SetConfig+0x15c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00b      	beq.n	80038ec <TIM_Base_SetConfig+0x110>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_Base_SetConfig+0x160>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <TIM_Base_SetConfig+0x110>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a18      	ldr	r2, [pc, #96]	; (8003940 <TIM_Base_SetConfig+0x164>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0x110>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <TIM_Base_SetConfig+0x158>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d103      	bne.n	80038f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f023 0201 	bic.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]
  }
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40013400 	.word	0x40013400
 8003934:	40015000 	.word	0x40015000
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0210 	bic.w	r2, r3, #16
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f043 0307 	orr.w	r3, r3, #7
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e074      	b.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d01d      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10c      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40015000 	.word	0x40015000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40014000 	.word	0x40014000

08003ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <memset>:
 8003c34:	4402      	add	r2, r0
 8003c36:	4603      	mov	r3, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4d0d      	ldr	r5, [pc, #52]	; (8003c7c <__libc_init_array+0x38>)
 8003c48:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <__libc_init_array+0x3c>)
 8003c4a:	1b64      	subs	r4, r4, r5
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	2600      	movs	r6, #0
 8003c50:	42a6      	cmp	r6, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	4d0b      	ldr	r5, [pc, #44]	; (8003c84 <__libc_init_array+0x40>)
 8003c56:	4c0c      	ldr	r4, [pc, #48]	; (8003c88 <__libc_init_array+0x44>)
 8003c58:	f000 f818 	bl	8003c8c <_init>
 8003c5c:	1b64      	subs	r4, r4, r5
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	2600      	movs	r6, #0
 8003c62:	42a6      	cmp	r6, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6c:	4798      	blx	r3
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c76:	4798      	blx	r3
 8003c78:	3601      	adds	r6, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	08003cb4 	.word	0x08003cb4
 8003c80:	08003cb4 	.word	0x08003cb4
 8003c84:	08003cb4 	.word	0x08003cb4
 8003c88:	08003cb8 	.word	0x08003cb8

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
