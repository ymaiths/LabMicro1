
LabMicro1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d2c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f14  08005f14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f1c  08005f1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000010  08005f34  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005f34  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112e5  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002436  00000000  00000000  00031368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  000337a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d82  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d9e  00000000  00000000  000356a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127c5  00000000  00000000  0005c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001085e0  00000000  00000000  0006ec05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c6c  00000000  00000000  001771e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017be54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005eec 	.word	0x08005eec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005eec 	.word	0x08005eec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2uiz>:
 8000590:	004a      	lsls	r2, r1, #1
 8000592:	d211      	bcs.n	80005b8 <__aeabi_d2uiz+0x28>
 8000594:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000598:	d211      	bcs.n	80005be <__aeabi_d2uiz+0x2e>
 800059a:	d50d      	bpl.n	80005b8 <__aeabi_d2uiz+0x28>
 800059c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005a4:	d40e      	bmi.n	80005c4 <__aeabi_d2uiz+0x34>
 80005a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005b2:	fa23 f002 	lsr.w	r0, r3, r2
 80005b6:	4770      	bx	lr
 80005b8:	f04f 0000 	mov.w	r0, #0
 80005bc:	4770      	bx	lr
 80005be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005c2:	d102      	bne.n	80005ca <__aeabi_d2uiz+0x3a>
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr

080005d0 <__aeabi_uldivmod>:
 80005d0:	b953      	cbnz	r3, 80005e8 <__aeabi_uldivmod+0x18>
 80005d2:	b94a      	cbnz	r2, 80005e8 <__aeabi_uldivmod+0x18>
 80005d4:	2900      	cmp	r1, #0
 80005d6:	bf08      	it	eq
 80005d8:	2800      	cmpeq	r0, #0
 80005da:	bf1c      	itt	ne
 80005dc:	f04f 31ff 	movne.w	r1, #4294967295
 80005e0:	f04f 30ff 	movne.w	r0, #4294967295
 80005e4:	f000 b970 	b.w	80008c8 <__aeabi_idiv0>
 80005e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005f0:	f000 f806 	bl	8000600 <__udivmoddi4>
 80005f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr

08000600 <__udivmoddi4>:
 8000600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000604:	9e08      	ldr	r6, [sp, #32]
 8000606:	460d      	mov	r5, r1
 8000608:	4604      	mov	r4, r0
 800060a:	460f      	mov	r7, r1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d14a      	bne.n	80006a6 <__udivmoddi4+0xa6>
 8000610:	428a      	cmp	r2, r1
 8000612:	4694      	mov	ip, r2
 8000614:	d965      	bls.n	80006e2 <__udivmoddi4+0xe2>
 8000616:	fab2 f382 	clz	r3, r2
 800061a:	b143      	cbz	r3, 800062e <__udivmoddi4+0x2e>
 800061c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000620:	f1c3 0220 	rsb	r2, r3, #32
 8000624:	409f      	lsls	r7, r3
 8000626:	fa20 f202 	lsr.w	r2, r0, r2
 800062a:	4317      	orrs	r7, r2
 800062c:	409c      	lsls	r4, r3
 800062e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000632:	fa1f f58c 	uxth.w	r5, ip
 8000636:	fbb7 f1fe 	udiv	r1, r7, lr
 800063a:	0c22      	lsrs	r2, r4, #16
 800063c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000640:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000644:	fb01 f005 	mul.w	r0, r1, r5
 8000648:	4290      	cmp	r0, r2
 800064a:	d90a      	bls.n	8000662 <__udivmoddi4+0x62>
 800064c:	eb1c 0202 	adds.w	r2, ip, r2
 8000650:	f101 37ff 	add.w	r7, r1, #4294967295
 8000654:	f080 811c 	bcs.w	8000890 <__udivmoddi4+0x290>
 8000658:	4290      	cmp	r0, r2
 800065a:	f240 8119 	bls.w	8000890 <__udivmoddi4+0x290>
 800065e:	3902      	subs	r1, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a12      	subs	r2, r2, r0
 8000664:	b2a4      	uxth	r4, r4
 8000666:	fbb2 f0fe 	udiv	r0, r2, lr
 800066a:	fb0e 2210 	mls	r2, lr, r0, r2
 800066e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000672:	fb00 f505 	mul.w	r5, r0, r5
 8000676:	42a5      	cmp	r5, r4
 8000678:	d90a      	bls.n	8000690 <__udivmoddi4+0x90>
 800067a:	eb1c 0404 	adds.w	r4, ip, r4
 800067e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000682:	f080 8107 	bcs.w	8000894 <__udivmoddi4+0x294>
 8000686:	42a5      	cmp	r5, r4
 8000688:	f240 8104 	bls.w	8000894 <__udivmoddi4+0x294>
 800068c:	4464      	add	r4, ip
 800068e:	3802      	subs	r0, #2
 8000690:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	2100      	movs	r1, #0
 8000698:	b11e      	cbz	r6, 80006a2 <__udivmoddi4+0xa2>
 800069a:	40dc      	lsrs	r4, r3
 800069c:	2300      	movs	r3, #0
 800069e:	e9c6 4300 	strd	r4, r3, [r6]
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d908      	bls.n	80006bc <__udivmoddi4+0xbc>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	f000 80ed 	beq.w	800088a <__udivmoddi4+0x28a>
 80006b0:	2100      	movs	r1, #0
 80006b2:	e9c6 0500 	strd	r0, r5, [r6]
 80006b6:	4608      	mov	r0, r1
 80006b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006bc:	fab3 f183 	clz	r1, r3
 80006c0:	2900      	cmp	r1, #0
 80006c2:	d149      	bne.n	8000758 <__udivmoddi4+0x158>
 80006c4:	42ab      	cmp	r3, r5
 80006c6:	d302      	bcc.n	80006ce <__udivmoddi4+0xce>
 80006c8:	4282      	cmp	r2, r0
 80006ca:	f200 80f8 	bhi.w	80008be <__udivmoddi4+0x2be>
 80006ce:	1a84      	subs	r4, r0, r2
 80006d0:	eb65 0203 	sbc.w	r2, r5, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	4617      	mov	r7, r2
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d0e2      	beq.n	80006a2 <__udivmoddi4+0xa2>
 80006dc:	e9c6 4700 	strd	r4, r7, [r6]
 80006e0:	e7df      	b.n	80006a2 <__udivmoddi4+0xa2>
 80006e2:	b902      	cbnz	r2, 80006e6 <__udivmoddi4+0xe6>
 80006e4:	deff      	udf	#255	; 0xff
 80006e6:	fab2 f382 	clz	r3, r2
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f040 8090 	bne.w	8000810 <__udivmoddi4+0x210>
 80006f0:	1a8a      	subs	r2, r1, r2
 80006f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f6:	fa1f fe8c 	uxth.w	lr, ip
 80006fa:	2101      	movs	r1, #1
 80006fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000700:	fb07 2015 	mls	r0, r7, r5, r2
 8000704:	0c22      	lsrs	r2, r4, #16
 8000706:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800070a:	fb0e f005 	mul.w	r0, lr, r5
 800070e:	4290      	cmp	r0, r2
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0x124>
 8000712:	eb1c 0202 	adds.w	r2, ip, r2
 8000716:	f105 38ff 	add.w	r8, r5, #4294967295
 800071a:	d202      	bcs.n	8000722 <__udivmoddi4+0x122>
 800071c:	4290      	cmp	r0, r2
 800071e:	f200 80cb 	bhi.w	80008b8 <__udivmoddi4+0x2b8>
 8000722:	4645      	mov	r5, r8
 8000724:	1a12      	subs	r2, r2, r0
 8000726:	b2a4      	uxth	r4, r4
 8000728:	fbb2 f0f7 	udiv	r0, r2, r7
 800072c:	fb07 2210 	mls	r2, r7, r0, r2
 8000730:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000734:	fb0e fe00 	mul.w	lr, lr, r0
 8000738:	45a6      	cmp	lr, r4
 800073a:	d908      	bls.n	800074e <__udivmoddi4+0x14e>
 800073c:	eb1c 0404 	adds.w	r4, ip, r4
 8000740:	f100 32ff 	add.w	r2, r0, #4294967295
 8000744:	d202      	bcs.n	800074c <__udivmoddi4+0x14c>
 8000746:	45a6      	cmp	lr, r4
 8000748:	f200 80bb 	bhi.w	80008c2 <__udivmoddi4+0x2c2>
 800074c:	4610      	mov	r0, r2
 800074e:	eba4 040e 	sub.w	r4, r4, lr
 8000752:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000756:	e79f      	b.n	8000698 <__udivmoddi4+0x98>
 8000758:	f1c1 0720 	rsb	r7, r1, #32
 800075c:	408b      	lsls	r3, r1
 800075e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000762:	ea4c 0c03 	orr.w	ip, ip, r3
 8000766:	fa05 f401 	lsl.w	r4, r5, r1
 800076a:	fa20 f307 	lsr.w	r3, r0, r7
 800076e:	40fd      	lsrs	r5, r7
 8000770:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000774:	4323      	orrs	r3, r4
 8000776:	fbb5 f8f9 	udiv	r8, r5, r9
 800077a:	fa1f fe8c 	uxth.w	lr, ip
 800077e:	fb09 5518 	mls	r5, r9, r8, r5
 8000782:	0c1c      	lsrs	r4, r3, #16
 8000784:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000788:	fb08 f50e 	mul.w	r5, r8, lr
 800078c:	42a5      	cmp	r5, r4
 800078e:	fa02 f201 	lsl.w	r2, r2, r1
 8000792:	fa00 f001 	lsl.w	r0, r0, r1
 8000796:	d90b      	bls.n	80007b0 <__udivmoddi4+0x1b0>
 8000798:	eb1c 0404 	adds.w	r4, ip, r4
 800079c:	f108 3aff 	add.w	sl, r8, #4294967295
 80007a0:	f080 8088 	bcs.w	80008b4 <__udivmoddi4+0x2b4>
 80007a4:	42a5      	cmp	r5, r4
 80007a6:	f240 8085 	bls.w	80008b4 <__udivmoddi4+0x2b4>
 80007aa:	f1a8 0802 	sub.w	r8, r8, #2
 80007ae:	4464      	add	r4, ip
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	b29d      	uxth	r5, r3
 80007b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80007b8:	fb09 4413 	mls	r4, r9, r3, r4
 80007bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80007c4:	45a6      	cmp	lr, r4
 80007c6:	d908      	bls.n	80007da <__udivmoddi4+0x1da>
 80007c8:	eb1c 0404 	adds.w	r4, ip, r4
 80007cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80007d0:	d26c      	bcs.n	80008ac <__udivmoddi4+0x2ac>
 80007d2:	45a6      	cmp	lr, r4
 80007d4:	d96a      	bls.n	80008ac <__udivmoddi4+0x2ac>
 80007d6:	3b02      	subs	r3, #2
 80007d8:	4464      	add	r4, ip
 80007da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007de:	fba3 9502 	umull	r9, r5, r3, r2
 80007e2:	eba4 040e 	sub.w	r4, r4, lr
 80007e6:	42ac      	cmp	r4, r5
 80007e8:	46c8      	mov	r8, r9
 80007ea:	46ae      	mov	lr, r5
 80007ec:	d356      	bcc.n	800089c <__udivmoddi4+0x29c>
 80007ee:	d053      	beq.n	8000898 <__udivmoddi4+0x298>
 80007f0:	b156      	cbz	r6, 8000808 <__udivmoddi4+0x208>
 80007f2:	ebb0 0208 	subs.w	r2, r0, r8
 80007f6:	eb64 040e 	sbc.w	r4, r4, lr
 80007fa:	fa04 f707 	lsl.w	r7, r4, r7
 80007fe:	40ca      	lsrs	r2, r1
 8000800:	40cc      	lsrs	r4, r1
 8000802:	4317      	orrs	r7, r2
 8000804:	e9c6 7400 	strd	r7, r4, [r6]
 8000808:	4618      	mov	r0, r3
 800080a:	2100      	movs	r1, #0
 800080c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000810:	f1c3 0120 	rsb	r1, r3, #32
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	fa20 f201 	lsr.w	r2, r0, r1
 800081c:	fa25 f101 	lsr.w	r1, r5, r1
 8000820:	409d      	lsls	r5, r3
 8000822:	432a      	orrs	r2, r5
 8000824:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000828:	fa1f fe8c 	uxth.w	lr, ip
 800082c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000830:	fb07 1510 	mls	r5, r7, r0, r1
 8000834:	0c11      	lsrs	r1, r2, #16
 8000836:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800083a:	fb00 f50e 	mul.w	r5, r0, lr
 800083e:	428d      	cmp	r5, r1
 8000840:	fa04 f403 	lsl.w	r4, r4, r3
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x258>
 8000846:	eb1c 0101 	adds.w	r1, ip, r1
 800084a:	f100 38ff 	add.w	r8, r0, #4294967295
 800084e:	d22f      	bcs.n	80008b0 <__udivmoddi4+0x2b0>
 8000850:	428d      	cmp	r5, r1
 8000852:	d92d      	bls.n	80008b0 <__udivmoddi4+0x2b0>
 8000854:	3802      	subs	r0, #2
 8000856:	4461      	add	r1, ip
 8000858:	1b49      	subs	r1, r1, r5
 800085a:	b292      	uxth	r2, r2
 800085c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000860:	fb07 1115 	mls	r1, r7, r5, r1
 8000864:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000868:	fb05 f10e 	mul.w	r1, r5, lr
 800086c:	4291      	cmp	r1, r2
 800086e:	d908      	bls.n	8000882 <__udivmoddi4+0x282>
 8000870:	eb1c 0202 	adds.w	r2, ip, r2
 8000874:	f105 38ff 	add.w	r8, r5, #4294967295
 8000878:	d216      	bcs.n	80008a8 <__udivmoddi4+0x2a8>
 800087a:	4291      	cmp	r1, r2
 800087c:	d914      	bls.n	80008a8 <__udivmoddi4+0x2a8>
 800087e:	3d02      	subs	r5, #2
 8000880:	4462      	add	r2, ip
 8000882:	1a52      	subs	r2, r2, r1
 8000884:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000888:	e738      	b.n	80006fc <__udivmoddi4+0xfc>
 800088a:	4631      	mov	r1, r6
 800088c:	4630      	mov	r0, r6
 800088e:	e708      	b.n	80006a2 <__udivmoddi4+0xa2>
 8000890:	4639      	mov	r1, r7
 8000892:	e6e6      	b.n	8000662 <__udivmoddi4+0x62>
 8000894:	4610      	mov	r0, r2
 8000896:	e6fb      	b.n	8000690 <__udivmoddi4+0x90>
 8000898:	4548      	cmp	r0, r9
 800089a:	d2a9      	bcs.n	80007f0 <__udivmoddi4+0x1f0>
 800089c:	ebb9 0802 	subs.w	r8, r9, r2
 80008a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008a4:	3b01      	subs	r3, #1
 80008a6:	e7a3      	b.n	80007f0 <__udivmoddi4+0x1f0>
 80008a8:	4645      	mov	r5, r8
 80008aa:	e7ea      	b.n	8000882 <__udivmoddi4+0x282>
 80008ac:	462b      	mov	r3, r5
 80008ae:	e794      	b.n	80007da <__udivmoddi4+0x1da>
 80008b0:	4640      	mov	r0, r8
 80008b2:	e7d1      	b.n	8000858 <__udivmoddi4+0x258>
 80008b4:	46d0      	mov	r8, sl
 80008b6:	e77b      	b.n	80007b0 <__udivmoddi4+0x1b0>
 80008b8:	3d02      	subs	r5, #2
 80008ba:	4462      	add	r2, ip
 80008bc:	e732      	b.n	8000724 <__udivmoddi4+0x124>
 80008be:	4608      	mov	r0, r1
 80008c0:	e70a      	b.n	80006d8 <__udivmoddi4+0xd8>
 80008c2:	4464      	add	r4, ip
 80008c4:	3802      	subs	r0, #2
 80008c6:	e742      	b.n	800074e <__udivmoddi4+0x14e>

080008c8 <__aeabi_idiv0>:
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 fdff 	bl	80014d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f876 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 fa98 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 80008e0:	f000 fa6c 	bl	8000dbc <MX_DMA_Init>
  MX_ADC1_Init();
 80008e4:	f000 f8bc 	bl	8000a60 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008e8:	f000 f9a2 	bl	8000c30 <MX_TIM3_Init>
  MX_TIM2_Init();
 80008ec:	f000 f952 	bl	8000b94 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008f0:	f000 f9ec 	bl	8000ccc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008f4:	482b      	ldr	r0, [pc, #172]	; (80009a4 <main+0xd8>)
 80008f6:	f003 ffc3 	bl	8004880 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim3);

  HAL_ADC_Start_DMA(&hadc1, poten, 300);
 80008fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008fe:	492a      	ldr	r1, [pc, #168]	; (80009a8 <main+0xdc>)
 8000900:	482a      	ldr	r0, [pc, #168]	; (80009ac <main+0xe0>)
 8000902:	f001 fa33 	bl	8001d6c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000906:	482a      	ldr	r0, [pc, #168]	; (80009b0 <main+0xe4>)
 8000908:	f003 ff4a 	bl	80047a0 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim4);
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <main+0xe8>)
 800090e:	f003 ff47 	bl	80047a0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4827      	ldr	r0, [pc, #156]	; (80009b4 <main+0xe8>)
 8000916:	f004 f88d 	bl	8004a34 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <main+0xd8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000920:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <main+0xec>)
 8000922:	6013      	str	r3, [r2, #0]
	  rawtim3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <main+0xe4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	b29b      	uxth	r3, r3
 800092c:	4a23      	ldr	r2, [pc, #140]	; (80009bc <main+0xf0>)
 800092e:	8013      	strh	r3, [r2, #0]
	  //HAL_Delay(1000);
	  sumTim2 = rawtim2+(roundtim2*(4294967295));
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <main+0xec>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	617a      	str	r2, [r7, #20]
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <main+0xf4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2200      	movs	r2, #0
 8000940:	4698      	mov	r8, r3
 8000942:	4691      	mov	r9, r2
 8000944:	4642      	mov	r2, r8
 8000946:	464b      	mov	r3, r9
 8000948:	f04f 0000 	mov.w	r0, #0
 800094c:	f04f 0100 	mov.w	r1, #0
 8000950:	07d9      	lsls	r1, r3, #31
 8000952:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8000956:	07d0      	lsls	r0, r2, #31
 8000958:	4602      	mov	r2, r0
 800095a:	460b      	mov	r3, r1
 800095c:	ebb2 0408 	subs.w	r4, r2, r8
 8000960:	eb63 0509 	sbc.w	r5, r3, r9
 8000964:	1923      	adds	r3, r4, r4
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	eb45 0305 	adc.w	r3, r5, r5
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000972:	eb14 0a08 	adds.w	sl, r4, r8
 8000976:	eb45 0b09 	adc.w	fp, r5, r9
 800097a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800097e:	460b      	mov	r3, r1
 8000980:	eb13 030a 	adds.w	r3, r3, sl
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4613      	mov	r3, r2
 8000988:	eb43 030b 	adc.w	r3, r3, fp
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <main+0xf8>)
 8000994:	e9c3 0100 	strd	r0, r1, [r3]
	  Average();
 8000998:	f000 fac0 	bl	8000f1c <Average>

	  Servo();
 800099c:	f000 fb48 	bl	8001030 <Servo>
	  rawtim2 = __HAL_TIM_GET_COUNTER(&htim2);
 80009a0:	e7bb      	b.n	800091a <main+0x4e>
 80009a2:	bf00      	nop
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	200001e4 	.word	0x200001e4
 80009ac:	2000002c 	.word	0x2000002c
 80009b0:	20000144 	.word	0x20000144
 80009b4:	20000190 	.word	0x20000190
 80009b8:	200001e0 	.word	0x200001e0
 80009bc:	200001dc 	.word	0x200001dc
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000448 	.word	0x20000448

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	2238      	movs	r2, #56	; 0x38
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fa5c 	bl	8005e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ee:	f002 fe87 	bl	8003700 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000a0c:	234b      	movs	r3, #75	; 0x4b
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 ff21 	bl	8003868 <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a2c:	f000 fb88 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	230f      	movs	r3, #15
 8000a32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	2303      	movs	r3, #3
 8000a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fa1f 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a54:	f000 fb74 	bl	8001140 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2220      	movs	r2, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 fa0b 	bl	8005e94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000a80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000a88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ac8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000aee:	f000 ff81 	bl	80019f4 <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000af8:	f000 fb22 	bl	8001140 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	481f      	ldr	r0, [pc, #124]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000b08:	f001 ffb2 	bl	8002a70 <HAL_ADCEx_MultiModeConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000b12:	f000 fb15 	bl	8001140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_ADC1_Init+0x128>)
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b22:	237f      	movs	r3, #127	; 0x7f
 8000b24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b26:	2304      	movs	r3, #4
 8000b28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000b34:	f001 fa0c 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000b3e:	f000 faff 	bl	8001140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_ADC1_Init+0x12c>)
 8000b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b46:	230c      	movs	r3, #12
 8000b48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000b50:	f001 f9fe 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000b5a:	f000 faf1 	bl	8001140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_ADC1_Init+0x130>)
 8000b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b62:	2312      	movs	r3, #18
 8000b64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_ADC1_Init+0x124>)
 8000b6c:	f001 f9f0 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000b76:	f000 fae3 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000002c 	.word	0x2000002c
 8000b88:	04300002 	.word	0x04300002
 8000b8c:	08600004 	.word	0x08600004
 8000b90:	3ef08000 	.word	0x3ef08000

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bbc:	2295      	movs	r2, #149	; 0x95
 8000bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bdc:	f003 fd88 	bl	80046f0 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000be6:	f000 faab 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bf8:	f004 fa92 	bl	8005120 <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c02:	f000 fa9d 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000c14:	f005 f862 	bl	8005cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c1e:	f000 fa8f 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000f8 	.word	0x200000f8

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14999;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c56:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c64:	2209      	movs	r2, #9
 8000c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c76:	f003 fd3b 	bl	80046f0 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c80:	f000 fa5e 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c92:	f004 fa45 	bl	8005120 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c9c:	f000 fa50 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000cae:	f005 f815 	bl	8005cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 fa42 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000144 	.word	0x20000144
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <MX_TIM4_Init+0xec>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 149;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d06:	2295      	movs	r2, #149	; 0x95
 8000d08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d12:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d24:	4823      	ldr	r0, [pc, #140]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d26:	f003 fce3 	bl	80046f0 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d30:	f000 fa06 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d42:	f004 f9ed 	bl	8005120 <HAL_TIM_ConfigClockSource>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d4c:	f000 f9f8 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d52:	f003 fe0d 	bl	8004970 <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 f9f0 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d70:	f004 ffb4 	bl	8005cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d7a:	f000 f9e1 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7e:	2360      	movs	r3, #96	; 0x60
 8000d80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000d98:	f004 f8ae 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000da2:	f000 f9cd 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <MX_TIM4_Init+0xe8>)
 8000da8:	f000 fadc 	bl	8001364 <HAL_TIM_MspPostInit>

}
 8000dac:	bf00      	nop
 8000dae:	3738      	adds	r7, #56	; 0x38
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000190 	.word	0x20000190
 8000db8:	40000800 	.word	0x40000800

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_DMA_Init+0x50>)
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <MX_DMA_Init+0x50>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6493      	str	r3, [r2, #72]	; 0x48
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_DMA_Init+0x50>)
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DMA_Init+0x50>)
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <MX_DMA_Init+0x50>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6493      	str	r3, [r2, #72]	; 0x48
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DMA_Init+0x50>)
 8000de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200b      	movs	r0, #11
 8000df8:	f002 f81d 	bl	8002e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dfc:	200b      	movs	r0, #11
 8000dfe:	f002 f834 	bl	8002e6a <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f002 fbfb 	bl	8003688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_GPIO_Init+0xd8>)
 8000eaa:	f002 fa6b 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f002 fa5c 	bl	8003384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2028      	movs	r0, #40	; 0x28
 8000ed2:	f001 ffb0 	bl	8002e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ed6:	2028      	movs	r0, #40	; 0x28
 8000ed8:	f001 ffc7 	bl	8002e6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000800 	.word	0x48000800

08000eec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d104      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		roundtim2 = roundtim2 + 1;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f04:	6013      	str	r3, [r2, #0]
	}
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200000f8 	.word	0x200000f8
 8000f18:	20000000 	.word	0x20000000

08000f1c <Average>:

void Average(){
 8000f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f20:	b08e      	sub	sp, #56	; 0x38
 8000f22:	af00      	add	r7, sp, #0
	uint64_t sumPoten[3] = {0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]
	for (int i = 0;i<297;i+=3){
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
 8000f3a:	e03f      	b.n	8000fbc <Average+0xa0>
		sumPoten[0] = sumPoten[0]+poten[i];
 8000f3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f40:	4a36      	ldr	r2, [pc, #216]	; (800101c <Average+0x100>)
 8000f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	4615      	mov	r5, r2
 8000f50:	1903      	adds	r3, r0, r4
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	eb41 0305 	adc.w	r3, r1, r5
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		sumPoten[1] = sumPoten[1]+poten[i+1];
 8000f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <Average+0x100>)
 8000f6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	4698      	mov	r8, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	eb10 0308 	adds.w	r3, r0, r8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	eb41 0309 	adc.w	r3, r1, r9
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f88:	e9c7 2308 	strd	r2, r3, [r7, #32]
		sumPoten[2] = sumPoten[2]+poten[i+2];
 8000f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f92:	1c9a      	adds	r2, r3, #2
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <Average+0x100>)
 8000f96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	469a      	mov	sl, r3
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	eb10 030a 	adds.w	r3, r0, sl
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	eb41 030b 	adc.w	r3, r1, fp
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (int i = 0;i<297;i+=3){
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	3303      	adds	r3, #3
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000fc2:	ddbb      	ble.n	8000f3c <Average+0x20>
	}
	avPoten1 = sumPoten[0]/100;
 8000fc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fc8:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	f7ff fafe 	bl	80005d0 <__aeabi_uldivmod>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <Average+0x104>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	avPoten2 = sumPoten[1]/100;
 8000fde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fe2:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	f7ff faf1 	bl	80005d0 <__aeabi_uldivmod>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <Average+0x108>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	avPoten3 = sumPoten[2]/100;
 8000ff8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ffc:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	f7ff fae4 	bl	80005d0 <__aeabi_uldivmod>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	b292      	uxth	r2, r2
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <Average+0x10c>)
 8001010:	801a      	strh	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800101c:	200001e4 	.word	0x200001e4
 8001020:	2000043c 	.word	0x2000043c
 8001024:	2000043e 	.word	0x2000043e
 8001028:	20000440 	.word	0x20000440
 800102c:	00000000 	.word	0x00000000

08001030 <Servo>:

void Servo(){
 8001030:	b598      	push	{r3, r4, r7, lr}
 8001032:	af00      	add	r7, sp, #0
	percentPoten1 = avPoten1*100/4095;
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <Servo+0xf0>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <Servo+0xf4>)
 8001042:	fb82 1203 	smull	r1, r2, r2, r3
 8001046:	441a      	add	r2, r3
 8001048:	12d2      	asrs	r2, r2, #11
 800104a:	17db      	asrs	r3, r3, #31
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <Servo+0xf8>)
 8001052:	801a      	strh	r2, [r3, #0]
//	} else {
//		check = 4;
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
//	}

	if (percentPoten1 <= 25){
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <Servo+0xf8>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b19      	cmp	r3, #25
 800105a:	d806      	bhi.n	800106a <Servo+0x3a>
		a = 500;
 800105c:	4933      	ldr	r1, [pc, #204]	; (800112c <Servo+0xfc>)
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <Servo+0x100>)
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
 8001068:	e047      	b.n	80010fa <Servo+0xca>
	} else if( percentPoten1 <= 50 && percentPoten1 >= 25 ){
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <Servo+0xf8>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b32      	cmp	r3, #50	; 0x32
 8001070:	d81c      	bhi.n	80010ac <Servo+0x7c>
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <Servo+0xf8>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b18      	cmp	r3, #24
 8001078:	d918      	bls.n	80010ac <Servo+0x7c>
		a = (avPoten2*2000/4095)+500;
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <Servo+0x104>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <Servo+0xf4>)
 800108a:	fb82 1203 	smull	r1, r2, r2, r3
 800108e:	441a      	add	r2, r3
 8001090:	12d2      	asrs	r2, r2, #11
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa0e 	bl	80004bc <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4921      	ldr	r1, [pc, #132]	; (800112c <Servo+0xfc>)
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
 80010aa:	e026      	b.n	80010fa <Servo+0xca>
	} else if( percentPoten1 <= 75 && percentPoten1 >= 50 ){
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <Servo+0xf8>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b4b      	cmp	r3, #75	; 0x4b
 80010b2:	d81c      	bhi.n	80010ee <Servo+0xbe>
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <Servo+0xf8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b31      	cmp	r3, #49	; 0x31
 80010ba:	d918      	bls.n	80010ee <Servo+0xbe>
		a = (avPoten3*2000/4095)+500;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <Servo+0x108>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <Servo+0xf4>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	441a      	add	r2, r3
 80010d2:	12d2      	asrs	r2, r2, #11
 80010d4:	17db      	asrs	r3, r3, #31
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9ed 	bl	80004bc <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4911      	ldr	r1, [pc, #68]	; (800112c <Servo+0xfc>)
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
 80010ec:	e005      	b.n	80010fa <Servo+0xca>
	} else {
		a = 2500;
 80010ee:	490f      	ldr	r1, [pc, #60]	; (800112c <Servo+0xfc>)
 80010f0:	a309      	add	r3, pc, #36	; (adr r3, 8001118 <Servo+0xe8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]
	}

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, a);
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <Servo+0xfc>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <Servo+0x10c>)
 8001102:	680c      	ldr	r4, [r1, #0]
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fa42 	bl	8000590 <__aeabi_d2uiz>
 800110c:	4603      	mov	r3, r0
 800110e:	6363      	str	r3, [r4, #52]	; 0x34
//	}
//	else
//	{
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2000);
//	}
}
 8001110:	bf00      	nop
 8001112:	bd98      	pop	{r3, r4, r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	00000000 	.word	0x00000000
 800111c:	40a38800 	.word	0x40a38800
 8001120:	2000043c 	.word	0x2000043c
 8001124:	80080081 	.word	0x80080081
 8001128:	20000450 	.word	0x20000450
 800112c:	20000458 	.word	0x20000458
 8001130:	407f4000 	.word	0x407f4000
 8001134:	2000043e 	.word	0x2000043e
 8001138:	20000440 	.word	0x20000440
 800113c:	20000144 	.word	0x20000144

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x44>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_MspInit+0x44>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x44>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x44>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x44>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6593      	str	r3, [r2, #88]	; 0x58
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x44>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001182:	f002 fb61 	bl	8003848 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0a0      	sub	sp, #128	; 0x80
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	2254      	movs	r2, #84	; 0x54
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fe6d 	bl	8005e94 <memset>
  if(hadc->Instance==ADC1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c2:	d177      	bne.n	80012b4 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f83d 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011e0:	f7ff ffae 	bl	8001140 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_ADC_MspInit+0x128>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_ADC_MspInit+0x128>)
 80011ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_ADC_MspInit+0x128>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <HAL_ADC_MspInit+0x128>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_ADC_MspInit+0x128>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_ADC_MspInit+0x128>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ADC_MspInit+0x128>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_ADC_MspInit+0x128>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_ADC_MspInit+0x128>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122c:	2303      	movs	r3, #3
 800122e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f002 f89f 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001246:	2301      	movs	r3, #1
 8001248:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001256:	4619      	mov	r1, r3
 8001258:	4819      	ldr	r0, [pc, #100]	; (80012c0 <HAL_ADC_MspInit+0x12c>)
 800125a:	f002 f893 	bl	8003384 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_ADC_MspInit+0x134>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001266:	2205      	movs	r2, #5
 8001268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 800127e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 800128e:	2220      	movs	r2, #32
 8001290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 800129a:	f001 fe01 	bl	8002ea0 <HAL_DMA_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80012a4:	f7ff ff4c 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_ADC_MspInit+0x130>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3780      	adds	r7, #128	; 0x80
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400
 80012c4:	20000098 	.word	0x20000098
 80012c8:	40020008 	.word	0x40020008

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012dc:	d114      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201c      	movs	r0, #28
 80012fc:	f001 fd9b 	bl	8002e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f001 fdb2 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001306:	e022      	b.n	800134e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <HAL_TIM_Base_MspInit+0x90>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
}
 800132a:	e010      	b.n	800134e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_TIM_Base_MspInit+0x94>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10b      	bne.n	800134e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6593      	str	r3, [r2, #88]	; 0x58
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_TIM_Base_MspInit+0x8c>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40000400 	.word	0x40000400
 8001360:	40000800 	.word	0x40000800

08001364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_TIM_MspPostInit+0x64>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11b      	bne.n	80013be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_TIM_MspPostInit+0x68>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_TIM_MspPostInit+0x68>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_TIM_MspPostInit+0x68>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139e:	2340      	movs	r3, #64	; 0x40
 80013a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_TIM_MspPostInit+0x6c>)
 80013ba:	f001 ffe3 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40000800 	.word	0x40000800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000400 	.word	0x48000400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f8ac 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <DMA1_Channel1_IRQHandler+0x10>)
 800142e:	f001 fe5a 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000098 	.word	0x20000098

0800143c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM2_IRQHandler+0x10>)
 8001442:	f003 fc09 	bl	8004c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000f8 	.word	0x200000f8

08001450 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001454:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001458:	f002 f92e 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff ffea 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 fcf7 	bl	8005ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fa09 	bl	80008cc <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014c8:	08005f24 	.word	0x08005f24
  ldr r2, =_sbss
 80014cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014d0:	20000464 	.word	0x20000464

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>

080014d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f001 fc9d 	bl	8002e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f80e 	bl	8001508 <HAL_InitTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	e001      	b.n	80014fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f8:	f7ff fe28 	bl	800114c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fc:	79fb      	ldrb	r3, [r7, #7]

}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_InitTick+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d022      	beq.n	8001562 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_InitTick+0x6c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fca8 	bl	8002e86 <HAL_SYSTICK_Config>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d809      	bhi.n	8001556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001542:	2200      	movs	r2, #0
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	f001 fc74 	bl	8002e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e007      	b.n	8001566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e004      	b.n	8001566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000004 	.word	0x20000004
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000460 	.word	0x20000460
 800159c:	2000000c 	.word	0x2000000c

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000460 	.word	0x20000460

080015b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3360      	adds	r3, #96	; 0x60
 8001632:	461a      	mov	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LL_ADC_SetOffset+0x44>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	4313      	orrs	r3, r2
 8001650:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	03fff000 	.word	0x03fff000

08001668 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3360      	adds	r3, #96	; 0x60
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3360      	adds	r3, #96	; 0x60
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3360      	adds	r3, #96	; 0x60
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	615a      	str	r2, [r3, #20]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3330      	adds	r3, #48	; 0x30
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	211f      	movs	r1, #31
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 011f 	and.w	r1, r3, #31
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017da:	b480      	push	{r7}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3314      	adds	r3, #20
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	0e5b      	lsrs	r3, r3, #25
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0d1b      	lsrs	r3, r3, #20
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2107      	movs	r1, #7
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	0d1b      	lsrs	r3, r3, #20
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0318 	and.w	r3, r3, #24
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001854:	40d9      	lsrs	r1, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	400b      	ands	r3, r1
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	431a      	orrs	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	0007ffff 	.word	0x0007ffff

08001878 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 031f 	and.w	r3, r3, #31
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6093      	str	r3, [r2, #8]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800191c:	d101      	bne.n	8001922 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <LL_ADC_IsEnabled+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_IsEnabled+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001992:	f043 0204 	orr.w	r2, r3, #4
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d101      	bne.n	80019be <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d101      	bne.n	80019e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1a9      	b.n	8001d62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fbb9 	bl	8001194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff3f 	bl	80018b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff25 	bl	8001894 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff5a 	bl	8001908 <LL_ADC_IsInternalRegulatorEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff3e 	bl	80018e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a64:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_ADC_Init+0x2e4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	4a9c      	ldr	r2, [pc, #624]	; (8001cdc <HAL_ADC_Init+0x2e8>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff3c 	bl	8001908 <LL_ADC_IsInternalRegulatorEnabled>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	f043 0210 	orr.w	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff75 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 8142 	bne.w	8001d50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 813e 	bne.w	8001d50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff35 	bl	8001958 <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d141      	bne.n	8001b78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_Init+0x114>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a77      	ldr	r2, [pc, #476]	; (8001ce0 <HAL_ADC_Init+0x2ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_ADC_Init+0x134>
 8001b08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b0c:	f7ff ff24 	bl	8001958 <LL_ADC_IsEnabled>
 8001b10:	4604      	mov	r4, r0
 8001b12:	4873      	ldr	r0, [pc, #460]	; (8001ce0 <HAL_ADC_Init+0x2ec>)
 8001b14:	f7ff ff20 	bl	8001958 <LL_ADC_IsEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4323      	orrs	r3, r4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e012      	b.n	8001b4e <HAL_ADC_Init+0x15a>
 8001b28:	486e      	ldr	r0, [pc, #440]	; (8001ce4 <HAL_ADC_Init+0x2f0>)
 8001b2a:	f7ff ff15 	bl	8001958 <LL_ADC_IsEnabled>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	486d      	ldr	r0, [pc, #436]	; (8001ce8 <HAL_ADC_Init+0x2f4>)
 8001b32:	f7ff ff11 	bl	8001958 <LL_ADC_IsEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	486c      	ldr	r0, [pc, #432]	; (8001cec <HAL_ADC_Init+0x2f8>)
 8001b3c:	f7ff ff0c 	bl	8001958 <LL_ADC_IsEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4323      	orrs	r3, r4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_Init+0x172>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <HAL_ADC_Init+0x2ec>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x176>
 8001b66:	4a62      	ldr	r2, [pc, #392]	; (8001cf0 <HAL_ADC_Init+0x2fc>)
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_Init+0x178>
 8001b6a:	4a62      	ldr	r2, [pc, #392]	; (8001cf4 <HAL_ADC_Init+0x300>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff fd20 	bl	80015b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7f5b      	ldrb	r3, [r3, #29]
 8001b7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	045b      	lsls	r3, r3, #17
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <HAL_ADC_Init+0x304>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fee4 	bl	80019cc <LL_ADC_INJ_IsConversionOngoing>
 8001c04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d17f      	bne.n	8001d0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d17c      	bne.n	8001d0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d017      	beq.n	8001c74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6911      	ldr	r1, [r2, #16]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c72:	e013      	b.n	8001c9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12a      	bne.n	8001cfc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	e019      	b.n	8001d0c <HAL_ADC_Init+0x318>
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	053e2d63 	.word	0x053e2d63
 8001ce0:	50000100 	.word	0x50000100
 8001ce4:	50000400 	.word	0x50000400
 8001ce8:	50000500 	.word	0x50000500
 8001cec:	50000600 	.word	0x50000600
 8001cf0:	50000300 	.word	0x50000300
 8001cf4:	50000700 	.word	0x50000700
 8001cf8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10c      	bne.n	8001d2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f023 010f 	bic.w	r1, r3, #15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2c:	e007      	b.n	8001d3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 020f 	bic.w	r2, r2, #15
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d4e:	e007      	b.n	8001d60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f043 0210 	orr.w	r2, r3, #16
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop

08001d6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d80:	d004      	beq.n	8001d8c <HAL_ADC_Start_DMA+0x20>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <HAL_ADC_Start_DMA+0x184>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_Start_DMA+0x24>
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_ADC_Start_DMA+0x188>)
 8001d8e:	e000      	b.n	8001d92 <HAL_ADC_Start_DMA+0x26>
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_ADC_Start_DMA+0x18c>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fd70 	bl	8001878 <LL_ADC_GetMultimode>
 8001d98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fe01 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 809b 	bne.w	8001ee2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_Start_DMA+0x4e>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e096      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x17c>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_ADC_Start_DMA+0x190>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d008      	beq.n	8001dde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d002      	beq.n	8001dde <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b09      	cmp	r3, #9
 8001ddc:	d17a      	bne.n	8001ed4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fcf6 	bl	80027d0 <ADC_Enable>
 8001de4:	4603      	mov	r3, r0
 8001de6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d16d      	bne.n	8001eca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <HAL_ADC_Start_DMA+0x184>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_ADC_Start_DMA+0xb4>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <HAL_ADC_Start_DMA+0x194>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d002      	beq.n	8001e1c <HAL_ADC_Start_DMA+0xb0>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e003      	b.n	8001e24 <HAL_ADC_Start_DMA+0xb8>
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_ADC_Start_DMA+0x198>)
 8001e1e:	e001      	b.n	8001e24 <HAL_ADC_Start_DMA+0xb8>
 8001e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d002      	beq.n	8001e32 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	f023 0206 	bic.w	r2, r3, #6
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	661a      	str	r2, [r3, #96]	; 0x60
 8001e56:	e002      	b.n	8001e5e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <HAL_ADC_Start_DMA+0x19c>)
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_ADC_Start_DMA+0x1a0>)
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_ADC_Start_DMA+0x1a4>)
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	221c      	movs	r2, #28
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0210 	orr.w	r2, r2, #16
 8001e94:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3340      	adds	r3, #64	; 0x40
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f001 f89b 	bl	8002ff0 <HAL_DMA_Start_IT>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fd5b 	bl	800197e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ec8:	e00d      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001ed2:	e008      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001ee0:	e001      	b.n	8001ee6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	50000100 	.word	0x50000100
 8001ef4:	50000300 	.word	0x50000300
 8001ef8:	50000700 	.word	0x50000700
 8001efc:	50000600 	.word	0x50000600
 8001f00:	50000500 	.word	0x50000500
 8001f04:	50000400 	.word	0x50000400
 8001f08:	080028fd 	.word	0x080028fd
 8001f0c:	080029d5 	.word	0x080029d5
 8001f10:	080029f1 	.word	0x080029f1

08001f14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0b6      	sub	sp, #216	; 0xd8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x24>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f000 bc13 	b.w	800279a <HAL_ADC_ConfigChannel+0x84a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fd10 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 83f3 	bne.w	8002774 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7ff fbf1 	bl	8001782 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fcfe 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001faa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fd0a 	bl	80019cc <LL_ADC_INJ_IsConversionOngoing>
 8001fb8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 81d9 	bne.w	8002378 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 81d4 	bne.w	8002378 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd8:	d10f      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7ff fbf8 	bl	80017da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fb9f 	bl	8001736 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ff8:	e00e      	b.n	8002018 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff fbe7 	bl	80017da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fb8f 	bl	8001736 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d022      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800204a:	f7ff fae9 	bl	8001620 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	461a      	mov	r2, r3
 800205c:	f7ff fb35 	bl	80016ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800206c:	2b01      	cmp	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x126>
 8002070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x128>
 8002076:	2300      	movs	r3, #0
 8002078:	461a      	mov	r2, r3
 800207a:	f7ff fb41 	bl	8001700 <LL_ADC_SetOffsetSaturation>
 800207e:	e17b      	b.n	8002378 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff faee 	bl	8001668 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x15c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fae3 	bl	8001668 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	e01e      	b.n	80020ea <HAL_ADC_ConfigChannel+0x19a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fad8 	bl	8001668 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80020de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x1b2>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e018      	b.n	8002134 <HAL_ADC_ConfigChannel+0x1e4>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800211a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800211e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e004      	b.n	8002134 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800212a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff faa7 	bl	8001694 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fa8b 	bl	8001668 <LL_ADC_GetOffsetChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x222>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa80 	bl	8001668 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x260>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fa75 	bl	8001668 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80021a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x278>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0e9b      	lsrs	r3, r3, #26
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	e018      	b.n	80021fa <HAL_ADC_ConfigChannel+0x2aa>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e004      	b.n	80021fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80021f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d106      	bne.n	800220c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa44 	bl	8001694 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2102      	movs	r1, #2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fa28 	bl	8001668 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x2e8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2102      	movs	r1, #2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fa1d 	bl	8001668 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	e01e      	b.n	8002276 <HAL_ADC_ConfigChannel+0x326>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2102      	movs	r1, #2
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fa12 	bl	8001668 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800225a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800225e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800226a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_ConfigChannel+0x33e>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	e016      	b.n	80022bc <HAL_ADC_ConfigChannel+0x36c>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80022a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80022a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e004      	b.n	80022bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2102      	movs	r1, #2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f9e3 	bl	8001694 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2103      	movs	r1, #3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f9c7 	bl	8001668 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x3aa>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2103      	movs	r1, #3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f9bc 	bl	8001668 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	0e9b      	lsrs	r3, r3, #26
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	e017      	b.n	800232a <HAL_ADC_ConfigChannel+0x3da>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2103      	movs	r1, #3
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f9b1 	bl	8001668 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002314:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x3f2>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	e011      	b.n	8002366 <HAL_ADC_ConfigChannel+0x416>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002352:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800235e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002366:	429a      	cmp	r2, r3
 8002368:	d106      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	2103      	movs	r1, #3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f98e 	bl	8001694 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff faeb 	bl	8001958 <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 813d 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6819      	ldr	r1, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f7ff fa4a 	bl	8001830 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4aa2      	ldr	r2, [pc, #648]	; (800262c <HAL_ADC_ConfigChannel+0x6dc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	f040 812e 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x480>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	bf94      	ite	ls
 80023c8:	2301      	movls	r3, #1
 80023ca:	2300      	movhi	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e019      	b.n	8002404 <HAL_ADC_ConfigChannel+0x4b4>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e003      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80023ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	bf94      	ite	ls
 80023fe:	2301      	movls	r3, #1
 8002400:	2300      	movhi	r3, #0
 8002402:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	2b00      	cmp	r3, #0
 8002406:	d079      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x4d4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002422:	e015      	b.n	8002450 <HAL_ADC_ConfigChannel+0x500>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x520>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	e017      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x550>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	ea42 0103 	orr.w	r1, r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x576>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	e018      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x5a8>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80024de:	2320      	movs	r3, #32
 80024e0:	e003      	b.n	80024ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f8:	430b      	orrs	r3, r1
 80024fa:	e07e      	b.n	80025fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x5c8>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	069b      	lsls	r3, r3, #26
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	e015      	b.n	8002544 <HAL_ADC_ConfigChannel+0x5f4>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x614>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	e017      	b.n	8002594 <HAL_ADC_ConfigChannel+0x644>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	61fb      	str	r3, [r7, #28]
  return result;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	ea42 0103 	orr.w	r1, r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x670>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	3b1e      	subs	r3, #30
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025be:	e01b      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	613b      	str	r3, [r7, #16]
  return result;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 021f 	and.w	r2, r3, #31
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	3b1e      	subs	r3, #30
 80025f2:	051b      	lsls	r3, r3, #20
 80025f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fe:	4619      	mov	r1, r3
 8002600:	f7ff f8eb 	bl	80017da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_ADC_ConfigChannel+0x6e0>)
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80be 	beq.w	800278e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x6d6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_ADC_ConfigChannel+0x6e4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10a      	bne.n	800263c <HAL_ADC_ConfigChannel+0x6ec>
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_ADC_ConfigChannel+0x6e8>)
 8002628:	e009      	b.n	800263e <HAL_ADC_ConfigChannel+0x6ee>
 800262a:	bf00      	nop
 800262c:	407f0000 	.word	0x407f0000
 8002630:	80080000 	.word	0x80080000
 8002634:	50000100 	.word	0x50000100
 8002638:	50000300 	.word	0x50000300
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_ADC_ConfigChannel+0x854>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe ffe0 	bl	8001604 <LL_ADC_GetCommonPathInternalCh>
 8002644:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_ADC_ConfigChannel+0x858>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_ADC_ConfigChannel+0x70c>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_ADC_ConfigChannel+0x85c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d13a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800265c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d134      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002670:	d005      	beq.n	800267e <HAL_ADC_ConfigChannel+0x72e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4e      	ldr	r2, [pc, #312]	; (80027b0 <HAL_ADC_ConfigChannel+0x860>)
 8002678:	4293      	cmp	r3, r2
 800267a:	f040 8085 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x742>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_ADC_ConfigChannel+0x864>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x746>
 8002692:	4a49      	ldr	r2, [pc, #292]	; (80027b8 <HAL_ADC_ConfigChannel+0x868>)
 8002694:	e000      	b.n	8002698 <HAL_ADC_ConfigChannel+0x748>
 8002696:	4a43      	ldr	r2, [pc, #268]	; (80027a4 <HAL_ADC_ConfigChannel+0x854>)
 8002698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800269c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f7fe ff9b 	bl	80015de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a8:	4b44      	ldr	r3, [pc, #272]	; (80027bc <HAL_ADC_ConfigChannel+0x86c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	4a44      	ldr	r2, [pc, #272]	; (80027c0 <HAL_ADC_ConfigChannel+0x870>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d0:	e05a      	b.n	8002788 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <HAL_ADC_ConfigChannel+0x874>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d125      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11f      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_ADC_ConfigChannel+0x864>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d104      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x7ac>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_ADC_ConfigChannel+0x878>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d047      	beq.n	800278c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002704:	d004      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x7c0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <HAL_ADC_ConfigChannel+0x864>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x7c4>
 8002710:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_ADC_ConfigChannel+0x868>)
 8002712:	e000      	b.n	8002716 <HAL_ADC_ConfigChannel+0x7c6>
 8002714:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <HAL_ADC_ConfigChannel+0x854>)
 8002716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f7fe ff5c 	bl	80015de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002726:	e031      	b.n	800278c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <HAL_ADC_ConfigChannel+0x87c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d12d      	bne.n	800278e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d127      	bne.n	800278e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_ADC_ConfigChannel+0x864>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002750:	d004      	beq.n	800275c <HAL_ADC_ConfigChannel+0x80c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_ADC_ConfigChannel+0x864>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x810>
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_ADC_ConfigChannel+0x868>)
 800275e:	e000      	b.n	8002762 <HAL_ADC_ConfigChannel+0x812>
 8002760:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_ADC_ConfigChannel+0x854>)
 8002762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7fe ff36 	bl	80015de <LL_ADC_SetCommonPathInternalCh>
 8002772:	e00c      	b.n	800278e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002786:	e002      	b.n	800278e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800278c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002796:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800279a:	4618      	mov	r0, r3
 800279c:	37d8      	adds	r7, #216	; 0xd8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	50000700 	.word	0x50000700
 80027a8:	c3210000 	.word	0xc3210000
 80027ac:	90c00010 	.word	0x90c00010
 80027b0:	50000600 	.word	0x50000600
 80027b4:	50000100 	.word	0x50000100
 80027b8:	50000300 	.word	0x50000300
 80027bc:	20000004 	.word	0x20000004
 80027c0:	053e2d63 	.word	0x053e2d63
 80027c4:	c7520000 	.word	0xc7520000
 80027c8:	50000500 	.word	0x50000500
 80027cc:	cb840000 	.word	0xcb840000

080027d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f8b9 	bl	8001958 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d176      	bne.n	80028da <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <ADC_Enable+0x114>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e062      	b.n	80028dc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f888 	bl	8001930 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d004      	beq.n	8002834 <ADC_Enable+0x64>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <ADC_Enable+0x118>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <ADC_Enable+0x68>
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <ADC_Enable+0x11c>)
 8002836:	e000      	b.n	800283a <ADC_Enable+0x6a>
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <ADC_Enable+0x120>)
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fee2 	bl	8001604 <LL_ADC_GetCommonPathInternalCh>
 8002840:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <ADC_Enable+0x124>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <ADC_Enable+0x128>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002864:	e002      	b.n	800286c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002872:	f7fe fe95 	bl	80015a0 <HAL_GetTick>
 8002876:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002878:	e028      	b.n	80028cc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f86a 	bl	8001958 <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f84e 	bl	8001930 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002894:	f7fe fe84 	bl	80015a0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d914      	bls.n	80028cc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00d      	beq.n	80028cc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f043 0210 	orr.w	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e007      	b.n	80028dc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d1cf      	bne.n	800287a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	8000003f 	.word	0x8000003f
 80028e8:	50000100 	.word	0x50000100
 80028ec:	50000300 	.word	0x50000300
 80028f0:	50000700 	.word	0x50000700
 80028f4:	20000004 	.word	0x20000004
 80028f8:	053e2d63 	.word	0x053e2d63

080028fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002912:	2b00      	cmp	r3, #0
 8002914:	d14b      	bne.n	80029ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d021      	beq.n	8002974 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe ff11 	bl	800175c <LL_ADC_REG_IsTriggerSourceSWStart>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d032      	beq.n	80029a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12b      	bne.n	80029a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11f      	bne.n	80029a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c
 8002972:	e018      	b.n	80029a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff fab4 	bl	8001f14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ac:	e00e      	b.n	80029cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff fabe 	bl	8001f3c <HAL_ADC_ErrorCallback>
}
 80029c0:	e004      	b.n	80029cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff faa0 	bl	8001f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	f043 0204 	orr.w	r2, r3, #4
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fa90 	bl	8001f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LL_ADC_IsEnabled>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <LL_ADC_IsEnabled+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_ADC_IsEnabled+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b0a1      	sub	sp, #132	; 0x84
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0e7      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a96:	2300      	movs	r3, #0
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa6:	d102      	bne.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002aa8:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	e009      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d102      	bne.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	e001      	b.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0be      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ffb1 	bl	8002a4a <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ffab 	bl	8002a4a <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 80a0 	bne.w	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 809c 	bne.w	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a55      	ldr	r2, [pc, #340]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b1a:	e000      	b.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d04b      	beq.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b3a:	035b      	lsls	r3, r3, #13
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10f      	bne.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b5c:	f7ff ff62 	bl	8002a24 <LL_ADC_IsEnabled>
 8002b60:	4604      	mov	r4, r0
 8002b62:	4841      	ldr	r0, [pc, #260]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b64:	f7ff ff5e 	bl	8002a24 <LL_ADC_IsEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4323      	orrs	r3, r4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e012      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b78:	483c      	ldr	r0, [pc, #240]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b7a:	f7ff ff53 	bl	8002a24 <LL_ADC_IsEnabled>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	483b      	ldr	r0, [pc, #236]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b82:	f7ff ff4f 	bl	8002a24 <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	431c      	orrs	r4, r3
 8002b8a:	483c      	ldr	r0, [pc, #240]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b8c:	f7ff ff4a 	bl	8002a24 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d056      	beq.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002baa:	f023 030f 	bic.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6811      	ldr	r1, [r2, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	6892      	ldr	r2, [r2, #8]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bbc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bbe:	e047      	b.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd4:	d004      	beq.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10f      	bne.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002be0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002be4:	f7ff ff1e 	bl	8002a24 <LL_ADC_IsEnabled>
 8002be8:	4604      	mov	r4, r0
 8002bea:	481f      	ldr	r0, [pc, #124]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bec:	f7ff ff1a 	bl	8002a24 <LL_ADC_IsEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4323      	orrs	r3, r4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e012      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c00:	481a      	ldr	r0, [pc, #104]	; (8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c02:	f7ff ff0f 	bl	8002a24 <LL_ADC_IsEnabled>
 8002c06:	4604      	mov	r4, r0
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c0a:	f7ff ff0b 	bl	8002a24 <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	431c      	orrs	r4, r3
 8002c12:	481a      	ldr	r0, [pc, #104]	; (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c14:	f7ff ff06 	bl	8002a24 <LL_ADC_IsEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c32:	f023 030f 	bic.w	r3, r3, #15
 8002c36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3a:	e009      	b.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c4e:	e000      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3784      	adds	r7, #132	; 0x84
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	50000100 	.word	0x50000100
 8002c6c:	50000400 	.word	0x50000400
 8002c70:	50000500 	.word	0x50000500
 8002c74:	50000300 	.word	0x50000300
 8002c78:	50000700 	.word	0x50000700
 8002c7c:	50000600 	.word	0x50000600

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db0b      	blt.n	8002d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <__NVIC_EnableIRQ+0x38>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db0a      	blt.n	8002d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <__NVIC_SetPriority+0x4c>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d48:	e00a      	b.n	8002d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <__NVIC_SetPriority+0x50>)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3b04      	subs	r3, #4
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1c3 0307 	rsb	r3, r3, #7
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf28      	it	cs
 8002d92:	2304      	movcs	r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <NVIC_EncodePriority+0x30>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3b03      	subs	r3, #3
 8002da2:	e000      	b.n	8002da6 <NVIC_EncodePriority+0x32>
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4313      	orrs	r3, r2
         );
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dec:	d301      	bcc.n	8002df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <SysTick_Config+0x40>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f7ff ff8e 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SysTick_Config+0x40>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <SysTick_Config+0x40>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff29 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff40 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff90 	bl	8002d74 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5f 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff33 	bl	8002ce4 <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffa4 	bl	8002ddc <SysTick_Config>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e08d      	b.n	8002fce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_DMA_Init+0x138>)
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d80f      	bhi.n	8002ede <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <HAL_DMA_Init+0x13c>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_DMA_Init+0x140>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <HAL_DMA_Init+0x144>)
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
 8002edc:	e00e      	b.n	8002efc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_DMA_Init+0x148>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a3d      	ldr	r2, [pc, #244]	; (8002fe0 <HAL_DMA_Init+0x140>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <HAL_DMA_Init+0x14c>)
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9b6 	bl	80032c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f5c:	d102      	bne.n	8002f64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_DMA_Init+0x104>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d80c      	bhi.n	8002fa4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9d6 	bl	800333c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e008      	b.n	8002fb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40020407 	.word	0x40020407
 8002fdc:	bffdfff8 	.word	0xbffdfff8
 8002fe0:	cccccccd 	.word	0xcccccccd
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	bffdfbf8 	.word	0xbffdfbf8
 8002fec:	40020400 	.word	0x40020400

08002ff0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_DMA_Start_IT+0x20>
 800300c:	2302      	movs	r3, #2
 800300e:	e066      	b.n	80030de <HAL_DMA_Start_IT+0xee>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d155      	bne.n	80030d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f8fb 	bl	8003244 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 020e 	orr.w	r2, r2, #14
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e00f      	b.n	8003088 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 020a 	orr.w	r2, r2, #10
 8003086:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e005      	b.n	80030dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2204      	movs	r2, #4
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d026      	beq.n	8003160 <HAL_DMA_IRQHandler+0x7a>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d021      	beq.n	8003160 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2104      	movs	r1, #4
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d071      	beq.n	800323a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800315e:	e06c      	b.n	800323a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2202      	movs	r2, #2
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02e      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d029      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020a 	bic.w	r2, r2, #10
 800319a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2102      	movs	r1, #2
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d038      	beq.n	800323a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031d0:	e033      	b.n	800323a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2208      	movs	r2, #8
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02a      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d025      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 020e 	bic.w	r2, r2, #14
 80031fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800323a:	bf00      	nop
 800323c:	bf00      	nop
}
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800325a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d108      	bne.n	80032a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032a2:	e007      	b.n	80032b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d802      	bhi.n	80032da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e001      	b.n	80032de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3b08      	subs	r3, #8
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800330a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2201      	movs	r2, #1
 8003314:	409a      	lsls	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	651a      	str	r2, [r3, #80]	; 0x50
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40020407 	.word	0x40020407
 800332c:	40020800 	.word	0x40020800
 8003330:	40020820 	.word	0x40020820
 8003334:	cccccccd 	.word	0xcccccccd
 8003338:	40020880 	.word	0x40020880

0800333c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800335e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2201      	movs	r2, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	1000823f 	.word	0x1000823f
 8003380:	40020940 	.word	0x40020940

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003392:	e15a      	b.n	800364a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 814c 	beq.w	8003644 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d130      	bne.n	8003426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fa:	2201      	movs	r2, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0201 	and.w	r2, r3, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d017      	beq.n	8003462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d123      	bne.n	80034b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	6939      	ldr	r1, [r7, #16]
 80034b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a6 	beq.w	8003644 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f8:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <HAL_GPIO_Init+0x2e4>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	4a5a      	ldr	r2, [pc, #360]	; (8003668 <HAL_GPIO_Init+0x2e4>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6613      	str	r3, [r2, #96]	; 0x60
 8003504:	4b58      	ldr	r3, [pc, #352]	; (8003668 <HAL_GPIO_Init+0x2e4>)
 8003506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003510:	4a56      	ldr	r2, [pc, #344]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800353a:	d01f      	beq.n	800357c <HAL_GPIO_Init+0x1f8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4c      	ldr	r2, [pc, #304]	; (8003670 <HAL_GPIO_Init+0x2ec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d019      	beq.n	8003578 <HAL_GPIO_Init+0x1f4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4b      	ldr	r2, [pc, #300]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_GPIO_Init+0x1f0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <HAL_GPIO_Init+0x2f4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00d      	beq.n	8003570 <HAL_GPIO_Init+0x1ec>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a49      	ldr	r2, [pc, #292]	; (800367c <HAL_GPIO_Init+0x2f8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x1e8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_GPIO_Init+0x2fc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_GPIO_Init+0x1e4>
 8003564:	2305      	movs	r3, #5
 8003566:	e00a      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 8003568:	2306      	movs	r3, #6
 800356a:	e008      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 800356c:	2304      	movs	r3, #4
 800356e:	e006      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 8003570:	2303      	movs	r3, #3
 8003572:	e004      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 8003574:	2302      	movs	r3, #2
 8003576:	e002      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_GPIO_Init+0x1fa>
 800357c:	2300      	movs	r3, #0
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	f002 0203 	and.w	r2, r2, #3
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	4093      	lsls	r3, r2
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800358e:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_GPIO_Init+0x300>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c0:	4a30      	ldr	r2, [pc, #192]	; (8003684 <HAL_GPIO_Init+0x300>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_GPIO_Init+0x300>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_GPIO_Init+0x300>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_GPIO_Init+0x300>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_GPIO_Init+0x300>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_GPIO_Init+0x300>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_GPIO_Init+0x300>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f ae9d 	bne.w	8003394 <HAL_GPIO_Init+0x10>
  }
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	48001400 	.word	0x48001400
 8003684:	40010400 	.word	0x40010400

08003688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
 8003694:	4613      	mov	r3, r2
 8003696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f806 	bl	80036e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010400 	.word	0x40010400

080036e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d141      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800370e:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d131      	bne.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003722:	4a46      	ldr	r2, [pc, #280]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003734:	4a41      	ldr	r2, [pc, #260]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2232      	movs	r2, #50	; 0x32
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	4a3f      	ldr	r2, [pc, #252]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	0c9b      	lsrs	r3, r3, #18
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003752:	e002      	b.n	800375a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375a:	4b38      	ldr	r3, [pc, #224]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d102      	bne.n	800376e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f2      	bne.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377a:	d158      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e057      	b.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003790:	e04d      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d141      	bne.n	800381e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d131      	bne.n	800380c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ae:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2232      	movs	r2, #50	; 0x32
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	0c9b      	lsrs	r3, r3, #18
 80037da:	3301      	adds	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037de:	e002      	b.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d102      	bne.n	80037fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f2      	bne.n	80037e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003806:	d112      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e011      	b.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800381c:	e007      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40007000 	.word	0x40007000
 8003840:	20000004 	.word	0x20000004
 8003844:	431bde83 	.word	0x431bde83

08003848 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003856:	6093      	str	r3, [r2, #8]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40007000 	.word	0x40007000

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e2fe      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003886:	4b97      	ldr	r3, [pc, #604]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003890:	4b94      	ldr	r3, [pc, #592]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_OscConfig+0x3e>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e2d9      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a84      	ldr	r2, [pc, #528]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b7f      	ldr	r3, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7e      	ldr	r2, [pc, #504]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b7c      	ldr	r3, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7b      	ldr	r2, [pc, #492]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b78      	ldr	r3, [pc, #480]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a77      	ldr	r2, [pc, #476]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a74      	ldr	r2, [pc, #464]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fe3e 	bl	80015a0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd fe3a 	bl	80015a0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e29e      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fe2a 	bl	80015a0 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7fd fe26 	bl	80015a0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e28a      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003962:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397e:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003988:	4b56      	ldr	r3, [pc, #344]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d102      	bne.n	800399e <HAL_RCC_OscConfig+0x136>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_OscConfig+0x13c>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d11f      	bne.n	80039e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_OscConfig+0x154>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e25d      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	4946      	ldr	r1, [pc, #280]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039d0:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fd97 	bl	8001508 <HAL_InitTick>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d043      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e249      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d023      	beq.n	8003a34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ec:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3c      	ldr	r2, [pc, #240]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fdd2 	bl	80015a0 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd fdce 	bl	80015a0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e232      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a12:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	492d      	ldr	r1, [pc, #180]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 8003a32:	e01a      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fdae 	bl	80015a0 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd fdaa 	bl	80015a0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e20e      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1e0>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d041      	beq.n	8003afa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fd87 	bl	80015a0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fd fd83 	bl	80015a0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1e7      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ef      	beq.n	8003a96 <HAL_RCC_OscConfig+0x22e>
 8003ab6:	e020      	b.n	8003afa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fd6a 	bl	80015a0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ace:	e00d      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fd66 	bl	80015a0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d906      	bls.n	8003aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e1ca      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aec:	4b8c      	ldr	r3, [pc, #560]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ea      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80a6 	beq.w	8003c54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b0c:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2b4>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	4b7f      	ldr	r3, [pc, #508]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a7e      	ldr	r2, [pc, #504]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2e:	4b7c      	ldr	r3, [pc, #496]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3e:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_OscConfig+0x4bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x4bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x4bc>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fd fd23 	bl	80015a0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fd fd1f 	bl	80015a0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e183      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b70:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x4bc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d108      	bne.n	8003b96 <HAL_RCC_OscConfig+0x32e>
 8003b84:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a65      	ldr	r2, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b94:	e024      	b.n	8003be0 <HAL_RCC_OscConfig+0x378>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d110      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x358>
 8003b9e:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	4a5e      	ldr	r2, [pc, #376]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003ba6:	f043 0304 	orr.w	r3, r3, #4
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbe:	e00f      	b.n	8003be0 <HAL_RCC_OscConfig+0x378>
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	4a56      	ldr	r2, [pc, #344]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d016      	beq.n	8003c16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fd fcda 	bl	80015a0 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fcd6 	bl	80015a0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e138      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c06:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ed      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x388>
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd fcc3 	bl	80015a0 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd fcbf 	bl	80015a0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e121      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c34:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ed      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03c      	beq.n	8003cda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c68:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fc92 	bl	80015a0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c80:	f7fd fc8e 	bl	80015a0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0f2      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <HAL_RCC_OscConfig+0x418>
 8003ca0:	e01b      	b.n	8003cda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fc75 	bl	80015a0 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cba:	f7fd fc71 	bl	80015a0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0d5      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80c9 	beq.w	8003e76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	f000 8083 	beq.w	8003df8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d15e      	bne.n	8003db8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_RCC_OscConfig+0x4b8>)
 8003d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fc4b 	bl	80015a0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd fc47 	bl	80015a0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d905      	bls.n	8003d28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0ab      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ec      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d34:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_RCC_OscConfig+0x61c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6a11      	ldr	r1, [r2, #32]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d4e:	0212      	lsls	r2, r2, #8
 8003d50:	4311      	orrs	r1, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	0552      	lsls	r2, r2, #21
 8003d5c:	4311      	orrs	r1, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d62:	0852      	lsrs	r2, r2, #1
 8003d64:	3a01      	subs	r2, #1
 8003d66:	0652      	lsls	r2, r2, #25
 8003d68:	4311      	orrs	r1, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d6e:	06d2      	lsls	r2, r2, #27
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4943      	ldr	r1, [pc, #268]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d78:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a3d      	ldr	r2, [pc, #244]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd fc06 	bl	80015a0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fc02 	bl	80015a0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e066      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003daa:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x530>
 8003db6:	e05e      	b.n	8003e76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fbec 	bl	80015a0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd fbe8 	bl	80015a0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04c      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dde:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	4924      	ldr	r1, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0x620>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]
 8003df6:	e03e      	b.n	8003e76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e039      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_RCC_OscConfig+0x618>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d12c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	3b01      	subs	r3, #1
 8003e24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d123      	bne.n	8003e72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d11b      	bne.n	8003e72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d113      	bne.n	8003e72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	3b01      	subs	r3, #1
 8003e58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	019f800c 	.word	0x019f800c
 8003e88:	feeefffc 	.word	0xfeeefffc

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e11e      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b91      	ldr	r3, [pc, #580]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 020f 	bic.w	r2, r3, #15
 8003eba:	498c      	ldr	r1, [pc, #560]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e106      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d073      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d129      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0f4      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ef8:	f000 f966 	bl	80041c8 <RCC_GetSysClockFreqFromPLLSource>
 8003efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_ClockConfig+0x268>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d93f      	bls.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d033      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d12f      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2e:	4a70      	ldr	r2, [pc, #448]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e024      	b.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0c6      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0be      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f64:	f000 f8ce 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <HAL_RCC_ClockConfig+0x268>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d909      	bls.n	8003f86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4957      	ldr	r1, [pc, #348]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd fb02 	bl	80015a0 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fafe 	bl	80015a0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e095      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a42      	ldr	r2, [pc, #264]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004000:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004006:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4936      	ldr	r1, [pc, #216]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
 800401a:	e008      	b.n	800402e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d105      	bne.n	800402e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004022:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4a32      	ldr	r2, [pc, #200]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d21d      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 020f 	bic.w	r2, r3, #15
 8004044:	4929      	ldr	r1, [pc, #164]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800404c:	f7fd faa8 	bl	80015a0 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fd faa4 	bl	80015a0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e03b      	b.n	80040e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_ClockConfig+0x260>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d1ed      	bne.n	8004054 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4917      	ldr	r1, [pc, #92]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490f      	ldr	r1, [pc, #60]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b6:	f000 f825 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <HAL_RCC_ClockConfig+0x264>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490c      	ldr	r1, [pc, #48]	; (80040f8 <HAL_RCC_ClockConfig+0x26c>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x270>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fa14 	bl	8001508 <HAL_InitTick>
 80040e0:	4603      	mov	r3, r0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40022000 	.word	0x40022000
 80040f0:	40021000 	.word	0x40021000
 80040f4:	04c4b400 	.word	0x04c4b400
 80040f8:	08005f04 	.word	0x08005f04
 80040fc:	20000004 	.word	0x20000004
 8004100:	20000008 	.word	0x20000008

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d102      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e047      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d102      	bne.n	800412e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e03e      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d136      	bne.n	80041a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3301      	adds	r3, #1
 8004150:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d10c      	bne.n	8004172 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	0a12      	lsrs	r2, r2, #8
 8004166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
      break;
 8004170:	e00c      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	0a12      	lsrs	r2, r2, #8
 8004180:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
      break;
 800418a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0e5b      	lsrs	r3, r3, #25
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e001      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041ac:	693b      	ldr	r3, [r7, #16]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	016e3600 	.word	0x016e3600

080041c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d10c      	bne.n	8004206 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	0a12      	lsrs	r2, r2, #8
 80041fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
    break;
 8004204:	e00c      	b.n	8004220 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	0a12      	lsrs	r2, r2, #8
 8004214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    break;
 800421e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	0e5b      	lsrs	r3, r3, #25
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	3301      	adds	r3, #1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800423a:	687b      	ldr	r3, [r7, #4]
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40021000 	.word	0x40021000
 800424c:	016e3600 	.word	0x016e3600
 8004250:	00f42400 	.word	0x00f42400

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800425c:	2300      	movs	r3, #0
 800425e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004260:	2300      	movs	r3, #0
 8004262:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8098 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10d      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b40      	ldr	r3, [pc, #256]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429e:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a39      	ldr	r2, [pc, #228]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042aa:	f7fd f979 	bl	80015a0 <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b0:	e009      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fd f975 	bl	80015a0 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	74fb      	strb	r3, [r7, #19]
        break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d159      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01e      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d019      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd f935 	bl	80015a0 <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004338:	e00b      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd f931 	bl	80015a0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	74fb      	strb	r3, [r7, #19]
            break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ec      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	4903      	ldr	r1, [pc, #12]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004390:	7c7b      	ldrb	r3, [r7, #17]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4ba7      	ldr	r3, [pc, #668]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4aa6      	ldr	r2, [pc, #664]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ae:	4ba1      	ldr	r3, [pc, #644]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	499d      	ldr	r1, [pc, #628]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d0:	4b98      	ldr	r3, [pc, #608]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 020c 	bic.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4995      	ldr	r1, [pc, #596]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f2:	4b90      	ldr	r3, [pc, #576]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	498c      	ldr	r1, [pc, #560]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004414:	4b87      	ldr	r3, [pc, #540]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4984      	ldr	r1, [pc, #528]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	497b      	ldr	r1, [pc, #492]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	4973      	ldr	r1, [pc, #460]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800447a:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	496a      	ldr	r1, [pc, #424]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800449c:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4962      	ldr	r1, [pc, #392]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044be:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	4959      	ldr	r1, [pc, #356]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e0:	4b54      	ldr	r3, [pc, #336]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	4951      	ldr	r1, [pc, #324]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004502:	4b4c      	ldr	r3, [pc, #304]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4948      	ldr	r1, [pc, #288]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	4940      	ldr	r1, [pc, #256]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	4932      	ldr	r1, [pc, #200]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	4924      	ldr	r1, [pc, #144]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	4916      	ldr	r1, [pc, #88]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a10      	ldr	r2, [pc, #64]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d019      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004622:	d109      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a02      	ldr	r2, [pc, #8]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462e:	60d3      	str	r3, [r2, #12]
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004644:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4926      	ldr	r1, [pc, #152]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004662:	d105      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800466a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	4918      	ldr	r1, [pc, #96]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d2:	d105      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e049      	b.n	8004796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc fdd8 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fe34 	bl	800539c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e04c      	b.n	8004852 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a26      	ldr	r2, [pc, #152]	; (8004860 <HAL_TIM_Base_Start+0xc0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_TIM_Base_Start+0xc4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_TIM_Base_Start+0xc8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_TIM_Base_Start+0xcc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_TIM_Base_Start+0xd0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_TIM_Base_Start+0xd4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start+0x70>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_TIM_Base_Start+0xd8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d115      	bne.n	800483c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_TIM_Base_Start+0xdc>)
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d015      	beq.n	800484e <HAL_TIM_Base_Start+0xae>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004828:	d011      	beq.n	800484e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	e008      	b.n	800484e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e000      	b.n	8004850 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40013400 	.word	0x40013400
 8004874:	40014000 	.word	0x40014000
 8004878:	40015000 	.word	0x40015000
 800487c:	00010007 	.word	0x00010007

08004880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e054      	b.n	8004942 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_TIM_Base_Start_IT+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d01d      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_TIM_Base_Start_IT+0xd4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_TIM_Base_Start_IT+0xd8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_TIM_Base_Start_IT+0xdc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_TIM_Base_Start_IT+0xe0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <HAL_TIM_Base_Start_IT+0xe4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x80>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <HAL_TIM_Base_Start_IT+0xe8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d115      	bne.n	800492c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_TIM_Base_Start_IT+0xec>)
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d015      	beq.n	800493e <HAL_TIM_Base_Start_IT+0xbe>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d011      	beq.n	800493e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	e008      	b.n	800493e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e000      	b.n	8004940 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40013400 	.word	0x40013400
 8004964:	40014000 	.word	0x40014000
 8004968:	40015000 	.word	0x40015000
 800496c:	00010007 	.word	0x00010007

08004970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e049      	b.n	8004a16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f841 	bl	8004a1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fcf4 	bl	800539c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_TIM_PWM_Start+0x24>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e03c      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x9e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d109      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x3e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e02f      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x9e>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x58>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x9e>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x72>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x9e>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x8c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x9e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0a6      	b.n	8004c28 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0xb6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	e023      	b.n	8004b32 <HAL_TIM_PWM_Start+0xfe>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_PWM_Start+0xc6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	e01b      	b.n	8004b32 <HAL_TIM_PWM_Start+0xfe>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xd6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b08:	e013      	b.n	8004b32 <HAL_TIM_PWM_Start+0xfe>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0xe6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b18:	e00b      	b.n	8004b32 <HAL_TIM_PWM_Start+0xfe>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0xf6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_PWM_Start+0xfe>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f8a8 	bl	8005c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3a      	ldr	r2, [pc, #232]	; (8004c30 <HAL_TIM_PWM_Start+0x1fc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_PWM_Start+0x148>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <HAL_TIM_PWM_Start+0x200>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_TIM_PWM_Start+0x148>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <HAL_TIM_PWM_Start+0x204>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_TIM_PWM_Start+0x148>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a36      	ldr	r2, [pc, #216]	; (8004c3c <HAL_TIM_PWM_Start+0x208>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_TIM_PWM_Start+0x148>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a34      	ldr	r2, [pc, #208]	; (8004c40 <HAL_TIM_PWM_Start+0x20c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_PWM_Start+0x148>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <HAL_TIM_PWM_Start+0x210>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_PWM_Start+0x14c>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_PWM_Start+0x14e>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <HAL_TIM_PWM_Start+0x1fc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d01d      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <HAL_TIM_PWM_Start+0x214>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <HAL_TIM_PWM_Start+0x218>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <HAL_TIM_PWM_Start+0x21c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_TIM_PWM_Start+0x200>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_TIM_PWM_Start+0x204>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x1b2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIM_PWM_Start+0x210>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d115      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_TIM_PWM_Start+0x220>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b06      	cmp	r3, #6
 8004bf6:	d015      	beq.n	8004c24 <HAL_TIM_PWM_Start+0x1f0>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d011      	beq.n	8004c24 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	e008      	b.n	8004c24 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e000      	b.n	8004c26 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800
 8004c44:	40015000 	.word	0x40015000
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	00010007 	.word	0x00010007

08004c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0202 	mvn.w	r2, #2
 8004c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fb5c 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fb4e 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fb5f 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0204 	mvn.w	r2, #4
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fb36 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fb28 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fb39 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0208 	mvn.w	r2, #8
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fb10 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fb02 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb13 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0210 	mvn.w	r2, #16
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2208      	movs	r2, #8
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 faea 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fadc 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 faed 	bl	8005374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0201 	mvn.w	r2, #1
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc f894 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 f815 	bl	8005e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 f80d 	bl	8005e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 faa7 	bl	8005388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0220 	mvn.w	r2, #32
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 ffd5 	bl	8005e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 ffe1 	bl	8005e44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00c      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 ffd9 	bl	8005e58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 ffd1 	bl	8005e6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 ffc9 	bl	8005e80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0ff      	b.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b14      	cmp	r3, #20
 8004f22:	f200 80f0 	bhi.w	8005106 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08005107 	.word	0x08005107
 8004f34:	08005107 	.word	0x08005107
 8004f38:	08005107 	.word	0x08005107
 8004f3c:	08004fc1 	.word	0x08004fc1
 8004f40:	08005107 	.word	0x08005107
 8004f44:	08005107 	.word	0x08005107
 8004f48:	08005107 	.word	0x08005107
 8004f4c:	08005003 	.word	0x08005003
 8004f50:	08005107 	.word	0x08005107
 8004f54:	08005107 	.word	0x08005107
 8004f58:	08005107 	.word	0x08005107
 8004f5c:	08005043 	.word	0x08005043
 8004f60:	08005107 	.word	0x08005107
 8004f64:	08005107 	.word	0x08005107
 8004f68:	08005107 	.word	0x08005107
 8004f6c:	08005085 	.word	0x08005085
 8004f70:	08005107 	.word	0x08005107
 8004f74:	08005107 	.word	0x08005107
 8004f78:	08005107 	.word	0x08005107
 8004f7c:	080050c5 	.word	0x080050c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fabc 	bl	8005504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	619a      	str	r2, [r3, #24]
      break;
 8004fbe:	e0a5      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fb36 	bl	8005638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	619a      	str	r2, [r3, #24]
      break;
 8005000:	e084      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fba9 	bl	8005760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0204 	bic.w	r2, r2, #4
 800502c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      break;
 8005040:	e064      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fc1b 	bl	8005884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	61da      	str	r2, [r3, #28]
      break;
 8005082:	e043      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fc8e 	bl	80059ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050c2:	e023      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fcd8 	bl	8005a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005104:	e002      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
      break;
 800510a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_ConfigClockSource+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e0f6      	b.n	800532a <HAL_TIM_ConfigClockSource+0x20a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800515a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800515e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a6f      	ldr	r2, [pc, #444]	; (8005334 <HAL_TIM_ConfigClockSource+0x214>)
 8005176:	4293      	cmp	r3, r2
 8005178:	f000 80c1 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 800517c:	4a6d      	ldr	r2, [pc, #436]	; (8005334 <HAL_TIM_ConfigClockSource+0x214>)
 800517e:	4293      	cmp	r3, r2
 8005180:	f200 80c6 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005184:	4a6c      	ldr	r2, [pc, #432]	; (8005338 <HAL_TIM_ConfigClockSource+0x218>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f000 80b9 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 800518c:	4a6a      	ldr	r2, [pc, #424]	; (8005338 <HAL_TIM_ConfigClockSource+0x218>)
 800518e:	4293      	cmp	r3, r2
 8005190:	f200 80be 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	4a69      	ldr	r2, [pc, #420]	; (800533c <HAL_TIM_ConfigClockSource+0x21c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	f000 80b1 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 800519c:	4a67      	ldr	r2, [pc, #412]	; (800533c <HAL_TIM_ConfigClockSource+0x21c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	f200 80b6 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a4:	4a66      	ldr	r2, [pc, #408]	; (8005340 <HAL_TIM_ConfigClockSource+0x220>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	f000 80a9 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 80051ac:	4a64      	ldr	r2, [pc, #400]	; (8005340 <HAL_TIM_ConfigClockSource+0x220>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	f200 80ae 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b4:	4a63      	ldr	r2, [pc, #396]	; (8005344 <HAL_TIM_ConfigClockSource+0x224>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	f000 80a1 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	4a61      	ldr	r2, [pc, #388]	; (8005344 <HAL_TIM_ConfigClockSource+0x224>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f200 80a6 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c4:	4a60      	ldr	r2, [pc, #384]	; (8005348 <HAL_TIM_ConfigClockSource+0x228>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	f000 8099 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 80051cc:	4a5e      	ldr	r2, [pc, #376]	; (8005348 <HAL_TIM_ConfigClockSource+0x228>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f200 809e 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051d8:	f000 8091 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 80051dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051e0:	f200 8096 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e8:	f000 8089 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 80051ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f0:	f200 808e 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d03e      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x158>
 80051fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fe:	f200 8087 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	f000 8086 	beq.w	8005316 <HAL_TIM_ConfigClockSource+0x1f6>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	d87f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d01a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x12a>
 8005214:	2b70      	cmp	r3, #112	; 0x70
 8005216:	d87b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005218:	2b60      	cmp	r3, #96	; 0x60
 800521a:	d050      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x19e>
 800521c:	2b60      	cmp	r3, #96	; 0x60
 800521e:	d877      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005220:	2b50      	cmp	r3, #80	; 0x50
 8005222:	d03c      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x17e>
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d873      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d058      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x1be>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d86f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d064      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d86b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d060      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d867      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05c      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d05a      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x1de>
 8005248:	e062      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800525a:	f000 fcf9 	bl	8005c50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800526c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	609a      	str	r2, [r3, #8]
      break;
 8005276:	e04f      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	f000 fce2 	bl	8005c50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529a:	609a      	str	r2, [r3, #8]
      break;
 800529c:	e03c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fc54 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2150      	movs	r1, #80	; 0x50
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fcad 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e02c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 fc73 	bl	8005bb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2160      	movs	r1, #96	; 0x60
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fc9d 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e01c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fc34 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2140      	movs	r1, #64	; 0x40
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fc8d 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f000 fc84 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 800530e:	e003      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      break;
 8005314:	e000      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	00100070 	.word	0x00100070
 8005338:	00100060 	.word	0x00100060
 800533c:	00100050 	.word	0x00100050
 8005340:	00100040 	.word	0x00100040
 8005344:	00100030 	.word	0x00100030
 8005348:	00100020 	.word	0x00100020

0800534c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a4c      	ldr	r2, [pc, #304]	; (80054e0 <TIM_Base_SetConfig+0x144>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d017      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d013      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a49      	ldr	r2, [pc, #292]	; (80054e4 <TIM_Base_SetConfig+0x148>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a48      	ldr	r2, [pc, #288]	; (80054e8 <TIM_Base_SetConfig+0x14c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a47      	ldr	r2, [pc, #284]	; (80054ec <TIM_Base_SetConfig+0x150>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a46      	ldr	r2, [pc, #280]	; (80054f0 <TIM_Base_SetConfig+0x154>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a45      	ldr	r2, [pc, #276]	; (80054f4 <TIM_Base_SetConfig+0x158>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a39      	ldr	r2, [pc, #228]	; (80054e0 <TIM_Base_SetConfig+0x144>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d023      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d01f      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a36      	ldr	r2, [pc, #216]	; (80054e4 <TIM_Base_SetConfig+0x148>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01b      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a35      	ldr	r2, [pc, #212]	; (80054e8 <TIM_Base_SetConfig+0x14c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d017      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a34      	ldr	r2, [pc, #208]	; (80054ec <TIM_Base_SetConfig+0x150>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <TIM_Base_SetConfig+0x154>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00f      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a33      	ldr	r2, [pc, #204]	; (80054f8 <TIM_Base_SetConfig+0x15c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00b      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a32      	ldr	r2, [pc, #200]	; (80054fc <TIM_Base_SetConfig+0x160>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a31      	ldr	r2, [pc, #196]	; (8005500 <TIM_Base_SetConfig+0x164>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_Base_SetConfig+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <TIM_Base_SetConfig+0x158>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d108      	bne.n	8005458 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <TIM_Base_SetConfig+0x144>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <TIM_Base_SetConfig+0x110>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <TIM_Base_SetConfig+0x154>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x110>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a1a      	ldr	r2, [pc, #104]	; (80054f8 <TIM_Base_SetConfig+0x15c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x110>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <TIM_Base_SetConfig+0x160>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x110>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a18      	ldr	r2, [pc, #96]	; (8005500 <TIM_Base_SetConfig+0x164>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x110>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <TIM_Base_SetConfig+0x158>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	611a      	str	r2, [r3, #16]
  }
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40015000 	.word	0x40015000
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f023 0201 	bic.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a30      	ldr	r2, [pc, #192]	; (8005620 <TIM_OC1_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <TIM_OC1_SetConfig+0x88>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <TIM_OC1_SetConfig+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00f      	beq.n	800558c <TIM_OC1_SetConfig+0x88>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2e      	ldr	r2, [pc, #184]	; (8005628 <TIM_OC1_SetConfig+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_OC1_SetConfig+0x88>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2d      	ldr	r2, [pc, #180]	; (800562c <TIM_OC1_SetConfig+0x128>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_OC1_SetConfig+0x88>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <TIM_OC1_SetConfig+0x12c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC1_SetConfig+0x88>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <TIM_OC1_SetConfig+0x130>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d10c      	bne.n	80055a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0308 	bic.w	r3, r3, #8
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <TIM_OC1_SetConfig+0x11c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <TIM_OC1_SetConfig+0xd2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_OC1_SetConfig+0x120>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <TIM_OC1_SetConfig+0xd2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <TIM_OC1_SetConfig+0x124>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <TIM_OC1_SetConfig+0xd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1a      	ldr	r2, [pc, #104]	; (800562c <TIM_OC1_SetConfig+0x128>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <TIM_OC1_SetConfig+0xd2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a19      	ldr	r2, [pc, #100]	; (8005630 <TIM_OC1_SetConfig+0x12c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <TIM_OC1_SetConfig+0xd2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <TIM_OC1_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d111      	bne.n	80055fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800
 8005634:	40015000 	.word	0x40015000

08005638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0210 	bic.w	r2, r3, #16
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <TIM_OC2_SetConfig+0x110>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_OC2_SetConfig+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2b      	ldr	r2, [pc, #172]	; (800574c <TIM_OC2_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC2_SetConfig+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <TIM_OC2_SetConfig+0x118>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10d      	bne.n	80056c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1f      	ldr	r2, [pc, #124]	; (8005748 <TIM_OC2_SetConfig+0x110>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <TIM_OC2_SetConfig+0xc0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1e      	ldr	r2, [pc, #120]	; (800574c <TIM_OC2_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00f      	beq.n	80056f8 <TIM_OC2_SetConfig+0xc0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <TIM_OC2_SetConfig+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00b      	beq.n	80056f8 <TIM_OC2_SetConfig+0xc0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <TIM_OC2_SetConfig+0x120>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_OC2_SetConfig+0xc0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <TIM_OC2_SetConfig+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC2_SetConfig+0xc0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a17      	ldr	r2, [pc, #92]	; (8005750 <TIM_OC2_SetConfig+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40015000 	.word	0x40015000
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2b      	ldr	r2, [pc, #172]	; (800586c <TIM_OC3_SetConfig+0x10c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_OC3_SetConfig+0x72>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <TIM_OC3_SetConfig+0x110>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC3_SetConfig+0x72>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a29      	ldr	r2, [pc, #164]	; (8005874 <TIM_OC3_SetConfig+0x114>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10d      	bne.n	80057ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a1e      	ldr	r2, [pc, #120]	; (800586c <TIM_OC3_SetConfig+0x10c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <TIM_OC3_SetConfig+0xbe>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <TIM_OC3_SetConfig+0x110>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_OC3_SetConfig+0xbe>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <TIM_OC3_SetConfig+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_OC3_SetConfig+0xbe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <TIM_OC3_SetConfig+0x11c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_OC3_SetConfig+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <TIM_OC3_SetConfig+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC3_SetConfig+0xbe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC3_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d113      	bne.n	8005846 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	621a      	str	r2, [r3, #32]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40013400 	.word	0x40013400
 8005874:	40015000 	.word	0x40015000
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2c      	ldr	r2, [pc, #176]	; (8005994 <TIM_OC4_SetConfig+0x110>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_OC4_SetConfig+0x74>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <TIM_OC4_SetConfig+0x114>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC4_SetConfig+0x74>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2a      	ldr	r2, [pc, #168]	; (800599c <TIM_OC4_SetConfig+0x118>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <TIM_OC4_SetConfig+0x110>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <TIM_OC4_SetConfig+0xc0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <TIM_OC4_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <TIM_OC4_SetConfig+0xc0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1e      	ldr	r2, [pc, #120]	; (80059a0 <TIM_OC4_SetConfig+0x11c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_OC4_SetConfig+0xc0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <TIM_OC4_SetConfig+0x120>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_OC4_SetConfig+0xc0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <TIM_OC4_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC4_SetConfig+0xc0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a17      	ldr	r2, [pc, #92]	; (800599c <TIM_OC4_SetConfig+0x118>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d113      	bne.n	800596c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005952:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40015000 	.word	0x40015000
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <TIM_OC5_SetConfig+0xbc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <TIM_OC5_SetConfig+0x82>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <TIM_OC5_SetConfig+0xc0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_OC5_SetConfig+0x82>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <TIM_OC5_SetConfig+0xc4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_OC5_SetConfig+0x82>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <TIM_OC5_SetConfig+0xc8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_OC5_SetConfig+0x82>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC5_SetConfig+0xcc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC5_SetConfig+0x82>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <TIM_OC5_SetConfig+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d109      	bne.n	8005a42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800
 8005a7c:	40015000 	.word	0x40015000

08005a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	051b      	lsls	r3, r3, #20
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <TIM_OC6_SetConfig+0xc0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <TIM_OC6_SetConfig+0x84>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <TIM_OC6_SetConfig+0xc4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <TIM_OC6_SetConfig+0x84>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC6_SetConfig+0xc8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_OC6_SetConfig+0x84>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <TIM_OC6_SetConfig+0xcc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_OC6_SetConfig+0x84>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC6_SetConfig+0xd0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC6_SetConfig+0x84>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC6_SetConfig+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800
 8005b54:	40015000 	.word	0x40015000

08005b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 030a 	bic.w	r3, r3, #10
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	031b      	lsls	r3, r3, #12
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f043 0307 	orr.w	r3, r3, #7
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	bf00      	nop
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e074      	b.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a34      	ldr	r2, [pc, #208]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a33      	ldr	r2, [pc, #204]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a31      	ldr	r2, [pc, #196]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d108      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d01d      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1f      	ldr	r2, [pc, #124]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10c      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40015000 	.word	0x40015000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40014000 	.word	0x40014000

08005e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <memset>:
 8005e94:	4402      	add	r2, r0
 8005e96:	4603      	mov	r3, r0
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d100      	bne.n	8005e9e <memset+0xa>
 8005e9c:	4770      	bx	lr
 8005e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea2:	e7f9      	b.n	8005e98 <memset+0x4>

08005ea4 <__libc_init_array>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	4d0d      	ldr	r5, [pc, #52]	; (8005edc <__libc_init_array+0x38>)
 8005ea8:	4c0d      	ldr	r4, [pc, #52]	; (8005ee0 <__libc_init_array+0x3c>)
 8005eaa:	1b64      	subs	r4, r4, r5
 8005eac:	10a4      	asrs	r4, r4, #2
 8005eae:	2600      	movs	r6, #0
 8005eb0:	42a6      	cmp	r6, r4
 8005eb2:	d109      	bne.n	8005ec8 <__libc_init_array+0x24>
 8005eb4:	4d0b      	ldr	r5, [pc, #44]	; (8005ee4 <__libc_init_array+0x40>)
 8005eb6:	4c0c      	ldr	r4, [pc, #48]	; (8005ee8 <__libc_init_array+0x44>)
 8005eb8:	f000 f818 	bl	8005eec <_init>
 8005ebc:	1b64      	subs	r4, r4, r5
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	2600      	movs	r6, #0
 8005ec2:	42a6      	cmp	r6, r4
 8005ec4:	d105      	bne.n	8005ed2 <__libc_init_array+0x2e>
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ecc:	4798      	blx	r3
 8005ece:	3601      	adds	r6, #1
 8005ed0:	e7ee      	b.n	8005eb0 <__libc_init_array+0xc>
 8005ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed6:	4798      	blx	r3
 8005ed8:	3601      	adds	r6, #1
 8005eda:	e7f2      	b.n	8005ec2 <__libc_init_array+0x1e>
 8005edc:	08005f1c 	.word	0x08005f1c
 8005ee0:	08005f1c 	.word	0x08005f1c
 8005ee4:	08005f1c 	.word	0x08005f1c
 8005ee8:	08005f20 	.word	0x08005f20

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
